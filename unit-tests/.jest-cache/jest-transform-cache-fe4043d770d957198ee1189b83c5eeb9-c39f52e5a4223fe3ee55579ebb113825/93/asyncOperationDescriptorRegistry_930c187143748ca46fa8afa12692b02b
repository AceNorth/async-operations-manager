c9f968f8e5c6c73d762534dca717158f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncOperationDescriptorRegistry = exports.initialAsyncOperationDescriptors = void 0;

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
} // TODO: JSDocify every function


var initialAsyncOperationDescriptors = {};
exports.initialAsyncOperationDescriptors = initialAsyncOperationDescriptors;

var asyncOperationDescriptorRegistry = function () {
  var asyncOperationDescriptors;

  var getAsyncOperationDescriptors = function getAsyncOperationDescriptors() {
    if (!asyncOperationDescriptors) {
      asyncOperationDescriptors = initialAsyncOperationDescriptors;
    }

    return asyncOperationDescriptors;
  };

  var setAsyncOperationDescriptors = function setAsyncOperationDescriptors(newAsyncOperationDescriptors) {
    asyncOperationDescriptors = _objectSpread({}, asyncOperationDescriptors, newAsyncOperationDescriptors);
    return asyncOperationDescriptors;
  };

  var clearAsyncOperationDescriptors = function clearAsyncOperationDescriptors() {
    asyncOperationDescriptors = initialAsyncOperationDescriptors;
    return asyncOperationDescriptors;
  };

  return {
    getAsyncOperationDescriptors: getAsyncOperationDescriptors,
    setAsyncOperationDescriptors: setAsyncOperationDescriptors,
    clearAsyncOperationDescriptors: clearAsyncOperationDescriptors
  };
}();

exports.asyncOperationDescriptorRegistry = asyncOperationDescriptorRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclJlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yUmVnaXN0cnkiLCJpbml0aWFsQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyIsImdldEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMiLCJzZXRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzIiwibmV3QXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyIsImNsZWFyQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLGdDQUFSLEdBQTJDRixPQUFPLENBQUNHLGdDQUFSLEdBQTJDLEtBQUssQ0FBM0Y7O0FBRUEsU0FBU0MsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0I7QUFBRSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBOUIsRUFBc0NGLENBQUMsRUFBdkMsRUFBMkM7QUFBRSxRQUFJRyxNQUFNLEdBQUdGLFNBQVMsQ0FBQ0QsQ0FBRCxDQUFULElBQWdCLElBQWhCLEdBQXVCQyxTQUFTLENBQUNELENBQUQsQ0FBaEMsR0FBc0MsRUFBbkQ7QUFBdUQsUUFBSUksT0FBTyxHQUFHWixNQUFNLENBQUNhLElBQVAsQ0FBWUYsTUFBWixDQUFkOztBQUFtQyxRQUFJLE9BQU9YLE1BQU0sQ0FBQ2MscUJBQWQsS0FBd0MsVUFBNUMsRUFBd0Q7QUFBRUYsTUFBQUEsT0FBTyxHQUFHQSxPQUFPLENBQUNHLE1BQVIsQ0FBZWYsTUFBTSxDQUFDYyxxQkFBUCxDQUE2QkgsTUFBN0IsRUFBcUNLLE1BQXJDLENBQTRDLFVBQVVDLEdBQVYsRUFBZTtBQUFFLGVBQU9qQixNQUFNLENBQUNrQix3QkFBUCxDQUFnQ1AsTUFBaEMsRUFBd0NNLEdBQXhDLEVBQTZDRSxVQUFwRDtBQUFpRSxPQUE5SCxDQUFmLENBQVY7QUFBNEo7O0FBQUNQLElBQUFBLE9BQU8sQ0FBQ1EsT0FBUixDQUFnQixVQUFVQyxHQUFWLEVBQWU7QUFBRUMsTUFBQUEsZUFBZSxDQUFDZixNQUFELEVBQVNjLEdBQVQsRUFBY1YsTUFBTSxDQUFDVSxHQUFELENBQXBCLENBQWY7QUFBNEMsS0FBN0U7QUFBaUY7O0FBQUMsU0FBT2QsTUFBUDtBQUFnQjs7QUFFamUsU0FBU2UsZUFBVCxDQUF5QkMsR0FBekIsRUFBOEJGLEdBQTlCLEVBQW1DbEIsS0FBbkMsRUFBMEM7QUFBRSxNQUFJa0IsR0FBRyxJQUFJRSxHQUFYLEVBQWdCO0FBQUV2QixJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JzQixHQUF0QixFQUEyQkYsR0FBM0IsRUFBZ0M7QUFBRWxCLE1BQUFBLEtBQUssRUFBRUEsS0FBVDtBQUFnQmdCLE1BQUFBLFVBQVUsRUFBRSxJQUE1QjtBQUFrQ0ssTUFBQUEsWUFBWSxFQUFFLElBQWhEO0FBQXNEQyxNQUFBQSxRQUFRLEVBQUU7QUFBaEUsS0FBaEM7QUFBMEcsR0FBNUgsTUFBa0k7QUFBRUYsSUFBQUEsR0FBRyxDQUFDRixHQUFELENBQUgsR0FBV2xCLEtBQVg7QUFBbUI7O0FBQUMsU0FBT29CLEdBQVA7QUFBYSxDLENBRWpOOzs7QUFDQSxJQUFJbEIsZ0NBQWdDLEdBQUcsRUFBdkM7QUFDQUgsT0FBTyxDQUFDRyxnQ0FBUixHQUEyQ0EsZ0NBQTNDOztBQUVBLElBQUlELGdDQUFnQyxHQUFHLFlBQVk7QUFDakQsTUFBSXNCLHlCQUFKOztBQUVBLE1BQUlDLDRCQUE0QixHQUFHLFNBQVNBLDRCQUFULEdBQXdDO0FBQ3pFLFFBQUksQ0FBQ0QseUJBQUwsRUFBZ0M7QUFDOUJBLE1BQUFBLHlCQUF5QixHQUFHckIsZ0NBQTVCO0FBQ0Q7O0FBRUQsV0FBT3FCLHlCQUFQO0FBQ0QsR0FORDs7QUFRQSxNQUFJRSw0QkFBNEIsR0FBRyxTQUFTQSw0QkFBVCxDQUFzQ0MsNEJBQXRDLEVBQW9FO0FBQ3JHSCxJQUFBQSx5QkFBeUIsR0FBR3BCLGFBQWEsQ0FBQyxFQUFELEVBQUtvQix5QkFBTCxFQUFnQ0csNEJBQWhDLENBQXpDO0FBQ0EsV0FBT0gseUJBQVA7QUFDRCxHQUhEOztBQUtBLE1BQUlJLDhCQUE4QixHQUFHLFNBQVNBLDhCQUFULEdBQTBDO0FBQzdFSixJQUFBQSx5QkFBeUIsR0FBR3JCLGdDQUE1QjtBQUNBLFdBQU9xQix5QkFBUDtBQUNELEdBSEQ7O0FBS0EsU0FBTztBQUNMQyxJQUFBQSw0QkFBNEIsRUFBRUEsNEJBRHpCO0FBRUxDLElBQUFBLDRCQUE0QixFQUFFQSw0QkFGekI7QUFHTEUsSUFBQUEsOEJBQThCLEVBQUVBO0FBSDNCLEdBQVA7QUFLRCxDQTFCc0MsRUFBdkM7O0FBNEJBNUIsT0FBTyxDQUFDRSxnQ0FBUixHQUEyQ0EsZ0NBQTNDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclJlZ2lzdHJ5ID0gZXhwb3J0cy5pbml0aWFsQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vLyBUT0RPOiBKU0RvY2lmeSBldmVyeSBmdW5jdGlvblxudmFyIGluaXRpYWxBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0ge307XG5leHBvcnRzLmluaXRpYWxBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0gaW5pdGlhbEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnM7XG5cbnZhciBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JSZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnM7XG5cbiAgdmFyIGdldEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSBmdW5jdGlvbiBnZXRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzKCkge1xuICAgIGlmICghYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycykge1xuICAgICAgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IGluaXRpYWxBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICAgIH1cblxuICAgIHJldHVybiBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICB9O1xuXG4gIHZhciBzZXRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0gZnVuY3Rpb24gc2V0QXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyhuZXdBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzKSB7XG4gICAgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IF9vYmplY3RTcHJlYWQoe30sIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMsIG5ld0FzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMpO1xuICAgIHJldHVybiBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICB9O1xuXG4gIHZhciBjbGVhckFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSBmdW5jdGlvbiBjbGVhckFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMoKSB7XG4gICAgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IGluaXRpYWxBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICAgIHJldHVybiBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZ2V0QXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yczogZ2V0QXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyxcbiAgICBzZXRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzOiBzZXRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzLFxuICAgIGNsZWFyQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yczogY2xlYXJBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzXG4gIH07XG59KCk7XG5cbmV4cG9ydHMuYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yUmVnaXN0cnkgPSBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JSZWdpc3RyeTsiXX0=