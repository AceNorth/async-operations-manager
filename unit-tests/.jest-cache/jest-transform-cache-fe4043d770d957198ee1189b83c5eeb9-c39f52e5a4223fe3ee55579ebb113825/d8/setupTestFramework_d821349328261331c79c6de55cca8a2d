d2b05974a8b61af6546216a9c246ef3a
"use strict";

/* eslint-env jasmine, jest */

/* global global */
var path = require('path');

var chai = require('chai');

var chaiJestSnapshot = require('chai-jest-snapshot');

var jasmineReporters = require('jasmine-reporters'); // We do snapshot testing with Chai, to detect when things render differently than they did
// the last time we ran the unit tests.


chai.use(chaiJestSnapshot); // We use the JUnitXml reporter for Jasmine, for CI on Jenkins.
//
// This snippet is blatantly stolen from https://github.com/JoeDevine/jest-jasmine-reporters-example
// (and just adjusted to make the linter happy and to set a custom output dir)

jasmine.VERBOSE = true;
jasmine.getEnv().addReporter(new jasmineReporters.JUnitXmlReporter({
  consolidateAll: false,
  savePath: path.join(__dirname, 'junit-xml-output/'),
  filePrefix: 'test-results-'
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwVGVzdEZyYW1ld29yay5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImNoYWkiLCJjaGFpSmVzdFNuYXBzaG90IiwiamFzbWluZVJlcG9ydGVycyIsInVzZSIsImphc21pbmUiLCJWRVJCT1NFIiwiZ2V0RW52IiwiYWRkUmVwb3J0ZXIiLCJKVW5pdFhtbFJlcG9ydGVyIiwiY29uc29saWRhdGVBbGwiLCJzYXZlUGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJmaWxlUHJlZml4Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBO0FBQ0EsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFFQSxJQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1FLGdCQUFnQixHQUFHRixPQUFPLENBQUMsb0JBQUQsQ0FBaEM7O0FBRUEsSUFBTUcsZ0JBQWdCLEdBQUdILE9BQU8sQ0FBQyxtQkFBRCxDQUFoQyxDLENBR0E7QUFDQTs7O0FBQ0FDLElBQUksQ0FBQ0csR0FBTCxDQUFTRixnQkFBVCxFLENBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FHLE9BQU8sQ0FBQ0MsT0FBUixHQUFrQixJQUFsQjtBQUNBRCxPQUFPLENBQUNFLE1BQVIsR0FBaUJDLFdBQWpCLENBQ0UsSUFBSUwsZ0JBQWdCLENBQUNNLGdCQUFyQixDQUFzQztBQUNwQ0MsRUFBQUEsY0FBYyxFQUFFLEtBRG9CO0FBRXBDQyxFQUFBQSxRQUFRLEVBQUVaLElBQUksQ0FBQ2EsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLG1CQUFyQixDQUYwQjtBQUdwQ0MsRUFBQUEsVUFBVSxFQUFFO0FBSHdCLENBQXRDLENBREYiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZW52IGphc21pbmUsIGplc3QgKi9cbi8qIGdsb2JhbCBnbG9iYWwgKi9cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IGNoYWkgPSByZXF1aXJlKCdjaGFpJyk7XG5jb25zdCBjaGFpSmVzdFNuYXBzaG90ID0gcmVxdWlyZSgnY2hhaS1qZXN0LXNuYXBzaG90JylcblxuY29uc3QgamFzbWluZVJlcG9ydGVycyA9IHJlcXVpcmUoJ2phc21pbmUtcmVwb3J0ZXJzJyk7XG5cblxuLy8gV2UgZG8gc25hcHNob3QgdGVzdGluZyB3aXRoIENoYWksIHRvIGRldGVjdCB3aGVuIHRoaW5ncyByZW5kZXIgZGlmZmVyZW50bHkgdGhhbiB0aGV5IGRpZFxuLy8gdGhlIGxhc3QgdGltZSB3ZSByYW4gdGhlIHVuaXQgdGVzdHMuXG5jaGFpLnVzZShjaGFpSmVzdFNuYXBzaG90KTtcblxuXG4vLyBXZSB1c2UgdGhlIEpVbml0WG1sIHJlcG9ydGVyIGZvciBKYXNtaW5lLCBmb3IgQ0kgb24gSmVua2lucy5cbi8vXG4vLyBUaGlzIHNuaXBwZXQgaXMgYmxhdGFudGx5IHN0b2xlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Kb2VEZXZpbmUvamVzdC1qYXNtaW5lLXJlcG9ydGVycy1leGFtcGxlXG4vLyAoYW5kIGp1c3QgYWRqdXN0ZWQgdG8gbWFrZSB0aGUgbGludGVyIGhhcHB5IGFuZCB0byBzZXQgYSBjdXN0b20gb3V0cHV0IGRpcilcbmphc21pbmUuVkVSQk9TRSA9IHRydWU7XG5qYXNtaW5lLmdldEVudigpLmFkZFJlcG9ydGVyKFxuICBuZXcgamFzbWluZVJlcG9ydGVycy5KVW5pdFhtbFJlcG9ydGVyKHtcbiAgICBjb25zb2xpZGF0ZUFsbDogZmFsc2UsXG4gICAgc2F2ZVBhdGg6IHBhdGguam9pbihfX2Rpcm5hbWUsICdqdW5pdC14bWwtb3V0cHV0LycpLFxuICAgIGZpbGVQcmVmaXg6ICd0ZXN0LXJlc3VsdHMtJyxcbiAgfSlcbik7XG4iXX0=