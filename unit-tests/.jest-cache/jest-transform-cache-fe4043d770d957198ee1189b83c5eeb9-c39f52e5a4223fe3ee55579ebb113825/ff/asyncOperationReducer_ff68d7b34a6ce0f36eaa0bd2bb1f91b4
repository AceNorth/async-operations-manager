c5e0e4c864dfe7142c1e1a82d46706f1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/web.dom.iterable");

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncOperationManagerUtils = require("../asyncOperationManagerUtils");

var _constants = require("../constants");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

function asyncOperationReducer() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;

  if (_lodash.default.includes(_constants.ASYNC_OPERATION_STEPS, action.operationStep) && action.descriptorId) {
    return _objectSpread({}, state, (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, action.operationStep, action.descriptorId, action));
  }

  return state;
}

var _default = asyncOperationReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jT3BlcmF0aW9uUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJyZXF1aXJlIiwiX2xvZGFzaCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNPcGVyYXRpb25NYW5hZ2VyVXRpbHMiLCJfY29uc3RhbnRzIiwib2JqIiwiX19lc01vZHVsZSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXN5bmNPcGVyYXRpb25SZWR1Y2VyIiwic3RhdGUiLCJ1bmRlZmluZWQiLCJhY3Rpb24iLCJpbmNsdWRlcyIsIkFTWU5DX09QRVJBVElPTl9TVEVQUyIsIm9wZXJhdGlvblN0ZXAiLCJkZXNjcmlwdG9ySWQiLCJnZXRTdGF0ZUZvck9wZXJhdGlvbkFmdGVyU3RlcCIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU87QUFEb0MsQ0FBN0M7QUFHQUQsUUFBUUUsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUVBQyxRQUFRLGtDQUFSOztBQUVBLElBQUlDLFVBQVVDLHVCQUF1QkYsUUFBUSxRQUFSLENBQXZCLENBQWQ7O0FBRUEsSUFBSUcsOEJBQThCSCxRQUFRLCtCQUFSLENBQWxDOztBQUVBLElBQUlJLGFBQWFKLFFBQVEsY0FBUixDQUFqQjs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFTixTQUFTTSxHQUFYLEVBQXJDO0FBQXdEOztBQUUvRixTQUFTRSxhQUFULENBQXVCQyxNQUF2QixFQUErQjtBQUFFLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJQyxVQUFVQyxNQUE5QixFQUFzQ0YsR0FBdEMsRUFBMkM7QUFBRSxRQUFJRyxTQUFTRixVQUFVRCxDQUFWLEtBQWdCLElBQWhCLEdBQXVCQyxVQUFVRCxDQUFWLENBQXZCLEdBQXNDLEVBQW5ELENBQXVELElBQUlJLFVBQVVsQixPQUFPbUIsSUFBUCxDQUFZRixNQUFaLENBQWQsQ0FBbUMsSUFBSSxPQUFPakIsT0FBT29CLHFCQUFkLEtBQXdDLFVBQTVDLEVBQXdEO0FBQUVGLGdCQUFVQSxRQUFRRyxNQUFSLENBQWVyQixPQUFPb0IscUJBQVAsQ0FBNkJILE1BQTdCLEVBQXFDSyxNQUFyQyxDQUE0QyxVQUFVQyxHQUFWLEVBQWU7QUFBRSxlQUFPdkIsT0FBT3dCLHdCQUFQLENBQWdDUCxNQUFoQyxFQUF3Q00sR0FBeEMsRUFBNkNFLFVBQXBEO0FBQWlFLE9BQTlILENBQWYsQ0FBVjtBQUE0SixLQUFDUCxRQUFRUSxPQUFSLENBQWdCLFVBQVVDLEdBQVYsRUFBZTtBQUFFQyxzQkFBZ0JmLE1BQWhCLEVBQXdCYyxHQUF4QixFQUE2QlYsT0FBT1UsR0FBUCxDQUE3QjtBQUE0QyxLQUE3RTtBQUFpRixHQUFDLE9BQU9kLE1BQVA7QUFBZ0I7O0FBRWplLFNBQVNlLGVBQVQsQ0FBeUJsQixHQUF6QixFQUE4QmlCLEdBQTlCLEVBQW1DeEIsS0FBbkMsRUFBMEM7QUFBRSxNQUFJd0IsT0FBT2pCLEdBQVgsRUFBZ0I7QUFBRVYsV0FBT0MsY0FBUCxDQUFzQlMsR0FBdEIsRUFBMkJpQixHQUEzQixFQUFnQyxFQUFFeEIsT0FBT0EsS0FBVCxFQUFnQnNCLFlBQVksSUFBNUIsRUFBa0NJLGNBQWMsSUFBaEQsRUFBc0RDLFVBQVUsSUFBaEUsRUFBaEM7QUFBMEcsR0FBNUgsTUFBa0k7QUFBRXBCLFFBQUlpQixHQUFKLElBQVd4QixLQUFYO0FBQW1CLEdBQUMsT0FBT08sR0FBUDtBQUFhOztBQUVqTixTQUFTcUIscUJBQVQsR0FBaUM7QUFDL0IsTUFBSUMsUUFBUWpCLFVBQVVDLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JELFVBQVUsQ0FBVixNQUFpQmtCLFNBQXpDLEdBQXFEbEIsVUFBVSxDQUFWLENBQXJELEdBQW9FLEVBQWhGO0FBQ0EsTUFBSW1CLFNBQVNuQixVQUFVQyxNQUFWLEdBQW1CLENBQW5CLEdBQXVCRCxVQUFVLENBQVYsQ0FBdkIsR0FBc0NrQixTQUFuRDs7QUFFQSxNQUFJM0IsUUFBUUYsT0FBUixDQUFnQitCLFFBQWhCLENBQXlCMUIsV0FBVzJCLHFCQUFwQyxFQUEyREYsT0FBT0csYUFBbEUsS0FBb0ZILE9BQU9JLFlBQS9GLEVBQTZHO0FBQzNHLFdBQU8xQixjQUFjLEVBQWQsRUFBa0JvQixLQUFsQixFQUF5QixDQUFDLEdBQUd4Qiw0QkFBNEIrQiw2QkFBaEMsRUFBK0RQLEtBQS9ELEVBQXNFRSxPQUFPRyxhQUE3RSxFQUE0RkgsT0FBT0ksWUFBbkcsRUFBaUhKLE1BQWpILENBQXpCLENBQVA7QUFDRDs7QUFFRCxTQUFPRixLQUFQO0FBQ0Q7O0FBRUQsSUFBSVEsV0FBV1QscUJBQWY7QUFDQTdCLFFBQVFFLE9BQVIsR0FBa0JvQyxRQUFsQiIsImZpbGUiOiJhc3luY09wZXJhdGlvblJlZHVjZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxucmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpO1xuXG52YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaFwiKSk7XG5cbnZhciBfYXN5bmNPcGVyYXRpb25NYW5hZ2VyVXRpbHMgPSByZXF1aXJlKFwiLi4vYXN5bmNPcGVyYXRpb25NYW5hZ2VyVXRpbHNcIik7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBhc3luY09wZXJhdGlvblJlZHVjZXIoKSB7XG4gIGxldCBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIGxldCBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICBpZiAoX2xvZGFzaC5kZWZhdWx0LmluY2x1ZGVzKF9jb25zdGFudHMuQVNZTkNfT1BFUkFUSU9OX1NURVBTLCBhY3Rpb24ub3BlcmF0aW9uU3RlcCkgJiYgYWN0aW9uLmRlc2NyaXB0b3JJZCkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgKDAsIF9hc3luY09wZXJhdGlvbk1hbmFnZXJVdGlscy5nZXRTdGF0ZUZvck9wZXJhdGlvbkFmdGVyU3RlcCkoc3RhdGUsIGFjdGlvbi5vcGVyYXRpb25TdGVwLCBhY3Rpb24uZGVzY3JpcHRvcklkLCBhY3Rpb24pKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxudmFyIF9kZWZhdWx0ID0gYXN5bmNPcGVyYXRpb25SZWR1Y2VyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il19