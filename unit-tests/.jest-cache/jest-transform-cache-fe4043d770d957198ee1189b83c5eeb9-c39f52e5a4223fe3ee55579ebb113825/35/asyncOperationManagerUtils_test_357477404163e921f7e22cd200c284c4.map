{"version":3,"sources":["asyncOperationManagerUtils_test.js"],"names":["require","_chai","_asyncOperationManagerUtils","describe","state","beforeEach","it","registerAsyncOperationDescriptors","descriptorId","requiredParams","operationType","registeredAsyncDescriptors","getRegisteredAsyncDescriptors","expect","Object","keys","to","have","lengthOf","all","parentAsyncOperation","debug","alwaysImmutable","minCacheTime","maxCacheTime","asyncOperationDescriptor","getAsyncOperationDescriptor","be","an","matchSnapshot","dateNowStub","jest","fn","global","Date","now","transformedState","getStateForOperationAfterStep","personId","nested","include","FETCH_PERSON_DATA_111","fetchStatus","dataStatus","message","lastFetchStatusTime","lastDataStatusTime","UPDATE_PERSON_DATA_111"],"mappings":"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","file":"asyncOperationManagerUtils_test.js","sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _chai = require(\"chai\");\n\nvar _asyncOperationManagerUtils = require(\"../asyncOperationManagerUtils\");\n\n/* eslint-env jest */\ndescribe('asyncOperationManagerUtils', () => {\n  let state;\n  beforeEach(() => {\n    state = {};\n  });\n  describe('registerAsyncOperationDescriptors', () => {\n    it('should accept object argument to register one async operation decriptor to state', () => {\n      (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n        descriptorId: 'FETCH_ALL_BEVERAGES_FOR_ORG',\n        requiredParams: ['orgId'],\n        operationType: 'READ'\n      });\n      const registeredAsyncDescriptors = (0, _asyncOperationManagerUtils.getRegisteredAsyncDescriptors)(state);\n      (0, _chai.expect)(Object.keys(registeredAsyncDescriptors)).to.have.lengthOf(1);\n      (0, _chai.expect)(registeredAsyncDescriptors).to.have.all.keys('FETCH_ALL_BEVERAGES_FOR_ORG');\n    });\n    it('should accept array argument to register multiple async operation descriptors to state', () => {\n      (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)([{\n        descriptorId: 'FETCH_ALL_BEVERAGES_FOR_ORG',\n        requiredParams: ['orgId'],\n        operationType: 'READ'\n      }, {\n        descriptorId: 'DRINK_BEVERAGE_BY_ID_FOR_ORG',\n        requiredParams: ['orgId', 'beverageId'],\n        operationType: 'WRITE'\n      }]);\n      const registeredAsyncDescriptors = (0, _asyncOperationManagerUtils.getRegisteredAsyncDescriptors)(state);\n      (0, _chai.expect)(Object.keys(registeredAsyncDescriptors)).to.have.lengthOf(2);\n      (0, _chai.expect)(registeredAsyncDescriptors).to.have.all.keys('FETCH_ALL_BEVERAGES_FOR_ORG', 'DRINK_BEVERAGE_BY_ID_FOR_ORG');\n    });\n  });\n  describe('getAsyncOperationDescriptor', () => {\n    it('should successfully return a registered asyncOperationDescriptor', () => {\n      (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n        descriptorId: 'FETCH_PERSON_DATA_BY_ID',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n        // optional values\n        parentAsyncOperation: 'FETCH_ALL_PERSON_DATA',\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000\n      });\n      const asyncOperationDescriptor = (0, _asyncOperationManagerUtils.getAsyncOperationDescriptor)('FETCH_PERSON_DATA_BY_ID');\n      (0, _chai.expect)(asyncOperationDescriptor).to.be.an('object');\n      (0, _chai.expect)(asyncOperationDescriptor).to.matchSnapshot('well formed async operation descriptor');\n    });\n  });\n  describe('getStateForOperationAfterStep', () => {\n    beforeEach(() => {\n      const dateNowStub = jest.fn(() => 1530518207007);\n      global.Date.now = dateNowStub;\n    });\n    describe('READ async operations', () => {\n      it('should update state to read show async operation as pending state from initial state', () => {\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'FETCH_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'READ'\n        });\n        const transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'BEGIN_ASYNC_OPERATION', 'FETCH_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'FETCH_PERSON_DATA_111.fetchStatus': 'PENDING'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing begun read async operation');\n      });\n      it('should update state to read show async operation as successful state from pending state', () => {\n        state = {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            dataStatus: 'ABSENT',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'FETCH_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'READ'\n        });\n        const transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'RESOLVE_ASYNC_OPERATION', 'FETCH_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'FETCH_PERSON_DATA_111.fetchStatus': 'SUCCESSFUL'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing successful read async operation');\n      });\n      it('should update state to read show async operation as failed state from pending state', () => {\n        state = {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            dataStatus: 'ABSENT',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'FETCH_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'READ'\n        });\n        const transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'REJECT_ASYNC_OPERATION', 'FETCH_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'FETCH_PERSON_DATA_111.fetchStatus': 'FAILED'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing rejected async operation');\n      });\n    });\n    describe('WRITE async operations', () => {\n      it('should update state to show write async operation as pending state from initial state', () => {\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'UPDATE_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'WRITE'\n        });\n        const transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'BEGIN_ASYNC_OPERATION', 'UPDATE_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'UPDATE_PERSON_DATA_111.fetchStatus': 'PENDING'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing pending write async operation');\n      });\n      it('should update state to show write async operation as successful state from pending state', () => {\n        state = {\n          UPDATE_PERSON_DATA_111: {\n            descriptorId: 'UPDATE_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'UPDATE_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'WRITE'\n        });\n        const transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'RESOLVE_ASYNC_OPERATION', 'UPDATE_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'UPDATE_PERSON_DATA_111.fetchStatus': 'SUCCESSFUL'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing successful write async operation');\n      });\n      it('should update state to show write async operation as failed state from pending state', () => {\n        state = {\n          UPDATE_PERSON_DATA_111: {\n            descriptorId: 'UPDATE_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'UPDATE_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'WRITE'\n        });\n        const transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'REJECT_ASYNC_OPERATION', 'UPDATE_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'UPDATE_PERSON_DATA_111.fetchStatus': 'FAILED'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing failed write async operation');\n      });\n    });\n  });\n});"]}