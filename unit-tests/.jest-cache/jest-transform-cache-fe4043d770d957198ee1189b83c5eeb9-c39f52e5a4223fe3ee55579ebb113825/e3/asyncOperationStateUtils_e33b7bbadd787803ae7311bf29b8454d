533e59c71f7a2c9431240dbbd73c48a4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _config = _interopRequireDefault(require("./config"));

var _constants = require("./constants");

var _helpers = require("./helpers");

var _types = require("./types");

var _asyncOperationUtils = require("./asyncOperationUtils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var updateAsyncOperationDescriptor = function updateAsyncOperationDescriptor(asyncOperationDescriptors, descriptorOptions) {
  var asyncOperationDescriptor = _objectSpread({
    debug: false,
    parentOperationDescriptorId: null,
    alwaysImmutable: false,
    minCacheTime: 5000,
    maxCacheTime: 60000
  }, descriptorOptions);

  _propTypes.default.checkPropTypes(_types.asyncOperationDescriptorPropType, asyncOperationDescriptor, 'prop', 'asyncOperationDescriptor');

  return _objectSpread({}, asyncOperationDescriptors, _defineProperty({}, asyncOperationDescriptor.descriptorId, asyncOperationDescriptor));
}; // validate whether the asyncOperationDescriptor exists


var getAsyncOperationDescriptor = function getAsyncOperationDescriptor(asyncOperationDescriptors, descriptorId) {
  var config = _config.default.getConfig();

  var asyncOperationDescriptor = asyncOperationDescriptors[descriptorId];

  if (!asyncOperationDescriptor) {
    config.logger.warningsCallback("descriptorId \"".concat(descriptorId, "\" does not match with any registered async operation descriptor"));
    return null;
  }

  if (asyncOperationDescriptor.debug) {
    config.logger.verboseLoggingCallback("Inside getAsyncOperationDescriptor for ".concat(descriptorId));
    config.logger.infoLoggingCallback('getAsyncOperationDescriptor [Data Snapshot]:', {
      asyncOperationDescriptors: asyncOperationDescriptors,
      asyncOperationDescriptor: asyncOperationDescriptor
    });
  }

  return asyncOperationDescriptor;
}; // This function will do all the work to determine if an async operation is returned as an initial async operation
// (if it is not found in state), an asyncOperation with parentAsyncOperation metaData (recursively searched to find if the parentAsyncOperation is more
// up-to-date) or just the asyncOperation itself if the none of the above apply.


var getAsyncOperation = function getAsyncOperation(state, registeredAsyncOperationDescriptors, asyncOperationKey, asyncOperationDescriptor, asyncOperationParams, fieldsToAdd) {
  var config = _config.default.getConfig();

  var fieldsToAddToAction = _objectSpread({}, asyncOperationParams, fieldsToAdd, {
    // key for the descriptor of the asyncOperation
    descriptorId: asyncOperationDescriptor.descriptorId
  });

  var parentAsyncOperation;
  var asyncOperation = state[asyncOperationKey] || null;

  if (asyncOperationDescriptor.parentOperationDescriptorId) {
    // grab key, descriptor, params, and async operation for parentAsyncOperation
    var parentAsyncOperationDescriptor = getAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor.parentOperationDescriptorId);
    var parentAsyncOperationParams = (0, _helpers.getAndValidateParams)(asyncOperationParams, parentAsyncOperationDescriptor);
    var parentAsyncOperationKey = (0, _helpers.generateAsyncOperationKey)(asyncOperationDescriptor.parentOperationDescriptorId, parentAsyncOperationParams);
    parentAsyncOperation = getAsyncOperation(state, registeredAsyncOperationDescriptors, parentAsyncOperationKey, parentAsyncOperationDescriptor, asyncOperationParams, fieldsToAddToAction);
  }

  if (asyncOperationDescriptor.debug) {
    config.logger.verboseLoggingCallback("Inside getAsyncOperation for ".concat(asyncOperationKey));
    config.logger.infoLoggingCallback('getAsyncOperation [Data Snapshot]:', {
      state: state,
      asyncOperationParams: asyncOperationParams,
      asyncOperationDescriptor: asyncOperationDescriptor,
      asyncOperation: asyncOperation,
      asyncOperationKey: asyncOperationKey
    });
  }

  if (!asyncOperation) {
    if (asyncOperationDescriptor.debug) {
      config.logger.verboseLoggingCallback("asyncOperation not found with given key: ".concat(asyncOperationKey, ". Defaulting to an initial asyncOperation"));
    }

    asyncOperation = asyncOperationDescriptor.operationType === _constants.ASYNC_OPERATION_TYPES.READ ? (0, _asyncOperationUtils.initialReadAsyncOperationForAction)(asyncOperationDescriptor.descriptorId, fieldsToAddToAction, parentAsyncOperation) : (0, _asyncOperationUtils.initialWriteAsyncOperationForAction)(asyncOperationDescriptor.descriptorId, fieldsToAddToAction, parentAsyncOperation);
  } // We want to determine whether or not to use that parentAsyncOperation metaData based on the
  // newness of it's data in comparison to the asyncOperation


  if (parentAsyncOperation && asyncOperation) {
    return parentAsyncOperation.lastDataStatusTime.valueOf() > asyncOperation.lastDataStatusTime.valueOf() ? _objectSpread({}, asyncOperation, (0, _lodash.pick)(parentAsyncOperation, _constants.readAsyncOperationFieldsToPullFromParent)) : asyncOperation;
  }

  return asyncOperation;
};

var updateAsyncOperation = function updateAsyncOperation(state, asyncOperationKey, asyncOperation, asyncOperationDescriptor) {
  var config = _config.default.getConfig();

  if (asyncOperationDescriptor.debug) {
    config.logger.verboseLoggingCallback("Inside updateAsyncOperation for ".concat(asyncOperationKey));
    config.logger.infoLoggingCallback('updateAsyncOperation [Data Snapshot]:', {
      state: state,
      asyncOperationDescriptor: asyncOperationDescriptor,
      asyncOperation: asyncOperation,
      asyncOperationKey: asyncOperationKey
    });
  }

  _propTypes.default.checkPropTypes(_types.asyncOperationPropType, asyncOperation, 'prop', 'asyncOperation');

  return _objectSpread({}, state, _defineProperty({}, asyncOperationKey, asyncOperation));
};

var bulkUpdateAsyncOperations = function bulkUpdateAsyncOperations(state, asyncOperationsList) {
  return (0, _lodash.reduce)(asyncOperationsList, function (accumulator, _ref) {
    var asyncOperationKey = _ref.asyncOperationKey,
        asyncOperation = _ref.asyncOperation,
        asyncOperationDescriptor = _ref.asyncOperationDescriptor;
    return updateAsyncOperation(accumulator, asyncOperationKey, asyncOperation, asyncOperationDescriptor);
  }, state);
};

var _default = {
  updateAsyncOperationDescriptor: updateAsyncOperationDescriptor,
  updateAsyncOperation: updateAsyncOperation,
  bulkUpdateAsyncOperations: bulkUpdateAsyncOperations,
  getAsyncOperation: getAsyncOperation,
  getAsyncOperationDescriptor: getAsyncOperationDescriptor
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,