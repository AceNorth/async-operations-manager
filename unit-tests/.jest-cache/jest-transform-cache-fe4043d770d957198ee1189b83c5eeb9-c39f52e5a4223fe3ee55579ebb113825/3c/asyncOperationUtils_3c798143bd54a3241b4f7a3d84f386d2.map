{"version":3,"sources":["asyncOperationUtils.js"],"names":["Object","defineProperty","exports","value","getActionForAsyncOperation","rejectWriteAsyncOperation","rejectReadAsyncOperation","resolveWriteAsyncOperation","resolveReadAsyncOperation","beginWriteAsyncOperation","beginReadAsyncOperation","initialWriteAsyncOperationForAction","initialReadAsyncOperationForAction","_lodash","require","_constants","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","_objectSpread","arguments","ownKeys","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","_defineProperty","obj","configurable","writable","alwaysImmutable","initialReadAsyncOperation","fetchStatus","FETCH_STATUS","NULL","dataStatus","DATA_STATUS","ABSENT","message","lastFetchStatusTime","lastFetchFailed","lastDataStatusTime","initialWriteAsyncOperation","descriptorId","fieldsToAdd","undefined","parentAsyncOperation","pick","readAsyncOperationFieldsToPullFromParent","previousAsyncOperation","fieldsForNewAsyncOperation","PENDING","Date","now","PRESENT","assign","initialAsyncOperation","currentTime","fieldsToUpdate","SUCCESSFUL","FAILED","operation","configContainer","extraParams","otherProps","console","warn","type"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getActionForAsyncOperation = exports.rejectWriteAsyncOperation = exports.rejectReadAsyncOperation = exports.resolveWriteAsyncOperation = exports.resolveReadAsyncOperation = exports.beginWriteAsyncOperation = exports.beginReadAsyncOperation = exports.initialWriteAsyncOperationForAction = exports.initialReadAsyncOperationForAction = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _constants = require(\"./constants\");\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// An asyncOperation is an object that tracks the status of some data that we fetch from\n// somewhere or send to somewhere. Each asyncOperation represents\n// a single 'dataset' (which, today, always means a single ajax request -- although that's\n// not a fixed constraint), and they're stored in Redux under operation-specific keys.\n//\n// \"read\" and \"write\" operations are *slightly* different, but they work the same way.\n//\n// The asyncOperation tracks information about:\n//  - Our last attempt to fetch or write the data\n//  - Whether we have data from a prior successful attempt (for reads only)\n//  - The action and params and such that were used to request the data\n//\n// This file includes standalone functions that transform asyncOperations when we\n// begin, resolve, or reject requests. In general, only reducers should use these functions.\n\n/**\n * asyncOperations were originally always treated as proper immutable objects, but for background refreshes\n * it doesn't make sense to create a new object unless the status is actually different somehow, because\n * the new object will cause any screens that select the asyncOperation to rerender.\n *\n * So this is an experiment in having the asyncOperation object be *semi*-immutable: it will only yield\n * a new object instance if there's a noteworthy change in status.\n *\n * @type {boolean}\n */\nvar alwaysImmutable = false;\n/**\n * This is the default look of brand new, never-touched asyncOperation.\n */\n\nvar initialReadAsyncOperation = {\n  // Note that descriptorId is NOT included here: it MUST be provided!\n  fetchStatus: _constants.FETCH_STATUS.NULL,\n  dataStatus: _constants.DATA_STATUS.ABSENT,\n  message: null,\n  lastFetchStatusTime: 0,\n  lastFetchFailed: false,\n  lastDataStatusTime: 0\n};\nvar initialWriteAsyncOperation = {\n  // Note that descriptorId is NOT included here: it MUST be provided!\n  fetchStatus: _constants.FETCH_STATUS.NULL,\n  message: null,\n  lastFetchStatusTime: 0\n}; // Note that we'll pull in any status (dataStatus, fetchStatus, etc) from the parent\n// operation (which *should* be fetchAllBeveragesForOrg) to seed the initial status.\n\nvar initialReadAsyncOperationForAction = function initialReadAsyncOperationForAction(descriptorId) {\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parentAsyncOperation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return _objectSpread({}, initialReadAsyncOperation, parentAsyncOperation ? (0, _lodash.pick)(parentAsyncOperation, _constants.readAsyncOperationFieldsToPullFromParent) : {}, fieldsToAdd, {\n    descriptorId: descriptorId\n  });\n};\n\nexports.initialReadAsyncOperationForAction = initialReadAsyncOperationForAction;\n\nvar initialWriteAsyncOperationForAction = function initialWriteAsyncOperationForAction(descriptorId) {\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _objectSpread({}, initialWriteAsyncOperation, fieldsToAdd, {\n    descriptorId: descriptorId\n  });\n};\n/**\n * These are intended for use in reducers, when a __BEGIN action comes in:\n * For read operations, we'll retain any prior dataStatus, but everything else gets reset.\n * Write operations are always a new, blank backendAsyncOperation.\n *\n * Note that you'll always want to specify `descriptorId` in fieldsToAdd, along with any IDs.\n */\n\n\nexports.initialWriteAsyncOperationForAction = initialWriteAsyncOperationForAction;\n\nvar beginReadAsyncOperation = function beginReadAsyncOperation() {\n  var previousAsyncOperation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialReadAsyncOperation;\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var fieldsForNewAsyncOperation = _objectSpread({\n    // We re-initialize the entire operation state (except descriptorId and dataStatus) on __BEGIN.\n    // (resolve/reject *don't* re-initialize: they carry through any IDs or other fields from before)\n    descriptorId: previousAsyncOperation.descriptorId,\n    fetchStatus: _constants.FETCH_STATUS.PENDING,\n    dataStatus: previousAsyncOperation.dataStatus,\n    message: null,\n    lastFetchStatusTime: Date.now(),\n    lastDataStatusTime: previousAsyncOperation.lastDataStatusTime\n  }, fieldsToAdd);\n\n  if (alwaysImmutable || previousAsyncOperation.dataStatus !== _constants.DATA_STATUS.PRESENT) {\n    return fieldsForNewAsyncOperation;\n  }\n\n  Object.assign(previousAsyncOperation, fieldsForNewAsyncOperation);\n  return previousAsyncOperation;\n}; // Note that the 'write' works the same way as 'read', but instead of calling the base\n// operation \"previousAsyncOperation\" we call it \"initialAsyncOperation\" since its role is different.\n\n\nexports.beginReadAsyncOperation = beginReadAsyncOperation;\n\nvar beginWriteAsyncOperation = function beginWriteAsyncOperation() {\n  var initialAsyncOperation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialWriteAsyncOperation;\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _objectSpread({\n    descriptorId: initialAsyncOperation.descriptorId,\n    fetchStatus: _constants.FETCH_STATUS.PENDING,\n    message: null,\n    lastFetchStatusTime: Date.now()\n  }, fieldsToAdd);\n};\n/**\n * These are intended for use in reducers, when a __RESOLVE action comes in:\n * we'll mark that we have data, and will overwrite any prior data status.\n */\n\n\nexports.beginWriteAsyncOperation = beginWriteAsyncOperation;\n\nvar resolveReadAsyncOperation = function resolveReadAsyncOperation() {\n  var previousAsyncOperation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialReadAsyncOperation;\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var currentTime = Date.now();\n\n  var fieldsToUpdate = _objectSpread({\n    fetchStatus: _constants.FETCH_STATUS.SUCCESSFUL,\n    dataStatus: _constants.DATA_STATUS.PRESENT,\n    lastFetchStatusTime: currentTime,\n    lastFetchFailed: false,\n    lastDataStatusTime: currentTime\n  }, fieldsToAdd);\n\n  if (alwaysImmutable || previousAsyncOperation.lastFetchFailed || previousAsyncOperation.dataStatus !== _constants.DATA_STATUS.PRESENT) {\n    return _objectSpread({}, previousAsyncOperation, fieldsToUpdate);\n  } // Else: we already had data, and we weren't asked to be immutable, so this isn't a noteworthy change,\n  // so mutate in place. (Eep)\n\n\n  Object.assign(previousAsyncOperation, fieldsToUpdate);\n  return previousAsyncOperation;\n};\n\nexports.resolveReadAsyncOperation = resolveReadAsyncOperation;\n\nvar resolveWriteAsyncOperation = function resolveWriteAsyncOperation() {\n  var previousAsyncOperation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialReadAsyncOperation;\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var currentTime = Date.now();\n  return _objectSpread({}, previousAsyncOperation, {\n    fetchStatus: _constants.FETCH_STATUS.SUCCESSFUL,\n    lastFetchStatusTime: currentTime\n  }, fieldsToAdd);\n};\n/**\n * These are intended for use in reducers, when a __REJECT action comes in:\n * we'll mark that things failed, but won't alter any prior data status (if it's a read).\n *\n * Note that you'll almost always want to specify `message` in fieldsToAdd.\n */\n\n\nexports.resolveWriteAsyncOperation = resolveWriteAsyncOperation;\n\nvar rejectReadAsyncOperation = function rejectReadAsyncOperation() {\n  var previousAsyncOperation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialReadAsyncOperation;\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _objectSpread({}, previousAsyncOperation, {\n    fetchStatus: _constants.FETCH_STATUS.FAILED,\n    lastFetchStatusTime: Date.now(),\n    lastFetchFailed: true\n  }, fieldsToAdd);\n};\n\nexports.rejectReadAsyncOperation = rejectReadAsyncOperation;\n\nvar rejectWriteAsyncOperation = function rejectWriteAsyncOperation(previousAsyncOperation) {\n  var fieldsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _objectSpread({}, previousAsyncOperation, {\n    fetchStatus: _constants.FETCH_STATUS.FAILED,\n    lastFetchStatusTime: Date.now()\n  }, fieldsToAdd);\n};\n\nexports.rejectWriteAsyncOperation = rejectWriteAsyncOperation;\n\nvar getActionForAsyncOperation = function getActionForAsyncOperation(operation, configContainer) {\n  var extraParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // We're going to pull out all the fields we recognize -- for both Read and Write operations --\n  // and anything left over is assumed to be part of the action (i.e., any necessary IDs or params)\n  var fetchStatus = operation.fetchStatus,\n      dataStatus = operation.dataStatus,\n      message = operation.message,\n      lastFetchStatusTime = operation.lastFetchStatusTime,\n      lastDataStatusTime = operation.lastDataStatusTime,\n      descriptorId = operation.descriptorId,\n      otherProps = _objectWithoutProperties(operation, [\"fetchStatus\", \"dataStatus\", \"message\", \"lastFetchStatusTime\", \"lastDataStatusTime\", \"descriptorId\"]);\n\n  if (!descriptorId) {\n    console.warn('AsyncOperation needs to include descriptorId so that we can re-dispatch it.', operation);\n  }\n\n  return _objectSpread({\n    type: descriptorId,\n    configContainer: configContainer\n  }, otherProps, extraParams);\n};\n\nexports.getActionForAsyncOperation = getActionForAsyncOperation;"]}