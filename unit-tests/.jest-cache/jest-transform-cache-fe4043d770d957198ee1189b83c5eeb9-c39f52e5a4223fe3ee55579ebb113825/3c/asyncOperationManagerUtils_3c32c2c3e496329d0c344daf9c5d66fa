f444f5b7dbc5c1fbd360aec0a1e4efbf
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAsyncOperationInfo = exports.getStateForOperationAfterStep = exports.getAsyncOperationDescriptor = exports.registerAsyncOperationDescriptors = exports.getAsyncOperation = exports.clearRegisteredAsyncDescriptors = exports.getRegisteredAsyncDescriptors = void 0;

var _lodash = require("lodash");

var _asyncOperationStateUtils = _interopRequireDefault(require("./asyncOperationStateUtils"));

var _config = _interopRequireDefault(require("./config"));

var _asyncOperationDescriptorRegistry = require("./asyncOperationDescriptorRegistry");

var _asyncOperationUtils = require("./asyncOperationUtils");

var _helpers = require("./helpers");

var _constants = require("./constants");

var _readStepLookup, _writeStepLookup, _transformTypeLookup;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var getRegisteredAsyncDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.getAsyncOperationDescriptors;
exports.getRegisteredAsyncDescriptors = getRegisteredAsyncDescriptors;
var clearRegisteredAsyncDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.clearAsyncOperationDescriptors;
exports.clearRegisteredAsyncDescriptors = clearRegisteredAsyncDescriptors;

var getAsyncOperationDescriptor = function getAsyncOperationDescriptor(descriptorId) {
  var asyncOperationDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.getAsyncOperationDescriptors();

  return _asyncOperationStateUtils.default.getAsyncOperationDescriptor(asyncOperationDescriptors, descriptorId);
};

exports.getAsyncOperationDescriptor = getAsyncOperationDescriptor;

var getAsyncOperationInfo = function getAsyncOperationInfo(descriptorId, params) {
  var asyncOperationDescriptor = getAsyncOperationDescriptor(descriptorId);
  var asyncOperationParams = (0, _helpers.getAndValidateParams)(params, asyncOperationDescriptor);
  var asyncOperationKey = (0, _helpers.generateAsyncOperationKey)(descriptorId, asyncOperationParams);
  var otherFields = (0, _lodash.omit)(params, _toConsumableArray(asyncOperationDescriptor.requiredParams));
  return {
    asyncOperationDescriptor: asyncOperationDescriptor,
    asyncOperationParams: asyncOperationParams,
    asyncOperationKey: asyncOperationKey,
    otherFields: otherFields
  };
};

exports.getAsyncOperationInfo = getAsyncOperationInfo;

var registerAsyncOperationDescriptors = function registerAsyncOperationDescriptors(asyncOperationDescriptors) {
  var newAsyncOperationDescriptors;

  var existingAsyncOperationDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.getAsyncOperationDescriptors();

  var config = _config.default.getConfig();

  for (var _len = arguments.length, otherDescriptors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    otherDescriptors[_key - 1] = arguments[_key];
  }

  if (!(0, _lodash.isEmpty)(otherDescriptors)) {
    config.logger.exceptionsCallback("\n      You provided more than one argument to registerAsyncOperationDescriptors.\n      You likely forgot to put multiple descriptors within an array", new Error());
  } // handle array or single object arguments


  if ((0, _lodash.isArray)(asyncOperationDescriptors)) {
    newAsyncOperationDescriptors = (0, _lodash.reduce)(asyncOperationDescriptors, function (acc, asyncOperationDescriptor) {
      return _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(acc, asyncOperationDescriptor);
    }, existingAsyncOperationDescriptors);
  } else {
    newAsyncOperationDescriptors = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(existingAsyncOperationDescriptors, asyncOperationDescriptors);
  }

  _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.setAsyncOperationDescriptors(newAsyncOperationDescriptors);

  return newAsyncOperationDescriptors;
}; // TODO: heavy unit testing needed!


exports.registerAsyncOperationDescriptors = registerAsyncOperationDescriptors;

var getAsyncOperation = function getAsyncOperation(state, descriptorId, params, otherFields) {
  var _getAsyncOperationInf = getAsyncOperationInfo(descriptorId, params),
      asyncOperationDescriptor = _getAsyncOperationInf.asyncOperationDescriptor,
      asyncOperationParams = _getAsyncOperationInf.asyncOperationParams,
      asyncOperationKey = _getAsyncOperationInf.asyncOperationKey;

  var registeredAsyncOperationDescriptors = getRegisteredAsyncDescriptors();
  return _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, asyncOperationKey, asyncOperationDescriptor, asyncOperationParams, otherFields);
}; // switchboard for resolving the Read operation steps


exports.getAsyncOperation = getAsyncOperation;
var readStepLookup = (_readStepLookup = {}, _defineProperty(_readStepLookup, _constants.ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION, function (asyncOperation, asyncOperationParams, otherFields) {
  return (0, _asyncOperationUtils.beginReadAsyncOperation)(asyncOperation, asyncOperationParams, otherFields);
}), _defineProperty(_readStepLookup, _constants.ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION, function (asyncOperation, asyncOperationParams, otherFields) {
  return (0, _asyncOperationUtils.resolveReadAsyncOperation)(asyncOperation, asyncOperationParams, otherFields);
}), _defineProperty(_readStepLookup, _constants.ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION, function (asyncOperation, asyncOperationParams, otherFields) {
  return (0, _asyncOperationUtils.rejectReadAsyncOperation)(asyncOperation, asyncOperationParams, otherFields);
}), _readStepLookup); // switchboard for resolving Write operation steps

var writeStepLookup = (_writeStepLookup = {}, _defineProperty(_writeStepLookup, _constants.ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION, function (asyncOperation, asyncOperationParams, otherFields) {
  return (0, _asyncOperationUtils.beginWriteAsyncOperation)(asyncOperation, asyncOperationParams, otherFields);
}), _defineProperty(_writeStepLookup, _constants.ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION, function (asyncOperation, asyncOperationParams, otherFields) {
  return (0, _asyncOperationUtils.resolveWriteAsyncOperation)(asyncOperation, asyncOperationParams, otherFields);
}), _defineProperty(_writeStepLookup, _constants.ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION, function (asyncOperation, asyncOperationParams, otherFields) {
  return (0, _asyncOperationUtils.rejectWriteAsyncOperation)(asyncOperation, asyncOperationParams, otherFields);
}), _writeStepLookup); // first switchboard to transform an async operation

var transformTypeLookup = (_transformTypeLookup = {}, _defineProperty(_transformTypeLookup, _constants.ASYNC_OPERATION_TYPES.READ, function (asyncOperation, asyncOperationStep, asyncOperationParams, otherFields) {
  return readStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams, otherFields);
}), _defineProperty(_transformTypeLookup, _constants.ASYNC_OPERATION_TYPES.WRITE, function (asyncOperation, asyncOperationStep, asyncOperationParams, otherFields) {
  return writeStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams, otherFields);
}), _transformTypeLookup); // this function is called in the reducer (in redux integration)

var getStateForOperationAfterStep = function getStateForOperationAfterStep(state, asyncOperationStep, descriptorId, params) {
  var newState = state;

  var _getAsyncOperationInf2 = getAsyncOperationInfo(descriptorId, params),
      asyncOperationDescriptor = _getAsyncOperationInf2.asyncOperationDescriptor,
      asyncOperationParams = _getAsyncOperationInf2.asyncOperationParams,
      asyncOperationKey = _getAsyncOperationInf2.asyncOperationKey,
      otherFields = _getAsyncOperationInf2.otherFields;

  var asyncOperationToTranform = getAsyncOperation(state, descriptorId, asyncOperationParams, otherFields);
  var newAsyncOperation = transformTypeLookup[asyncOperationDescriptor.operationType](asyncOperationToTranform, asyncOperationStep, asyncOperationParams, otherFields);
  newState = _asyncOperationStateUtils.default.updateAsyncOperation(state, asyncOperationKey, newAsyncOperation, asyncOperationDescriptor);
  return newState;
};

exports.getStateForOperationAfterStep = getStateForOperationAfterStep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,