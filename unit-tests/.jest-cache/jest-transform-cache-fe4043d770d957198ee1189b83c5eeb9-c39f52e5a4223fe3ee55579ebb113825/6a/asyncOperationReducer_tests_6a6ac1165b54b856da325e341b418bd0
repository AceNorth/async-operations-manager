2f1bcf71123d13a0cf7a38f512ea9e61
"use strict";

var _chai = require("chai");

var _asyncOperationReducer = _interopRequireDefault(require("../asyncOperationReducer"));

var _asyncOperationManagerUtils = require("../../asyncOperationManagerUtils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/* eslint-env jest */


describe('asyncOperationReducer', function () {
  var state;
  beforeEach(function () {
    state = {};
    (0, _asyncOperationManagerUtils.clearRegisteredAsyncDescriptors)();
    var dateNowStub = jest.fn(function () {
      return 1530518207007;
    });
    global.Date.now = dateNowStub;
  });
  it('should return the initial state', function () {
    (0, _chai.expect)((0, _asyncOperationReducer.default)(undefined, {})).to.deep.equal(state);
  });
  it('should handle BEGIN_ASYNC_OPERATION for write action', function () {
    var action = {
      descriptorId: 'UPDATE_PERSON_DATA',
      operationStep: 'BEGIN_ASYNC_OPERATION',
      type: 'AOM//BEGIN__UPDATE_PERSON_DATA',
      actionType: 'UPDATE_PERSON_DATA',
      personId: 111
    };
    (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({
      descriptorId: 'UPDATE_PERSON_DATA',
      requiredParams: ['personId'],
      operationType: 'WRITE'
    });
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.have.all.keys('UPDATE_PERSON_DATA_111');
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.matchSnapshot('well formed state for begun write async operation');
  });
  it('should handle RESOLVE_ASYNC_OPERATION for write action', function () {
    var action = {
      descriptorId: 'UPDATE_PERSON_DATA',
      operationStep: 'RESOLVE_ASYNC_OPERATION',
      type: 'AOM//RESOLVE__UPDATE_PERSON_DATA',
      actionType: 'UPDATE_PERSON_DATA',
      personId: 111
    };
    (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({
      descriptorId: 'UPDATE_PERSON_DATA',
      requiredParams: ['personId'],
      operationType: 'WRITE'
    });
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.have.all.keys('UPDATE_PERSON_DATA_111');
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.matchSnapshot('well formed state for resolved write async operation');
  });
  it('should handle REJECT_ASYNC_OPERATION for write action', function () {
    var action = {
      descriptorId: 'UPDATE_PERSON_DATA',
      operationStep: 'REJECT_ASYNC_OPERATION',
      type: 'AOM//REJECT__UPDATE_PERSON_DATA',
      actionType: 'UPDATE_PERSON_DATA',
      personId: 111
    };
    (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({
      descriptorId: 'UPDATE_PERSON_DATA',
      requiredParams: ['personId'],
      operationType: 'WRITE'
    });
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.have.all.keys('UPDATE_PERSON_DATA_111');
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.matchSnapshot('well formed state for rejected read async operation');
  });
  it('should handle BEGIN_ASYNC_OPERATION for read action', function () {
    var action = {
      descriptorId: 'FETCH_PERSON_DATA',
      operationStep: 'BEGIN_ASYNC_OPERATION',
      type: 'AOM//BEGIN__FETCH_PERSON_DATA',
      actionType: 'FETCH_PERSON_DATA',
      personId: 111
    };
    (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({
      descriptorId: 'FETCH_PERSON_DATA',
      requiredParams: ['personId'],
      operationType: 'READ'
    });
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.have.all.keys('FETCH_PERSON_DATA_111');
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.matchSnapshot('well formed state for begun read async operation');
  });
  it('should handle RESOLVE_ASYNC_OPERATION for read action', function () {
    var action = {
      descriptorId: 'FETCH_PERSON_DATA',
      operationStep: 'RESOLVE_ASYNC_OPERATION',
      type: 'AOM//RESOLVE__FETCH_PERSON_DATA',
      actionType: 'FETCH_PERSON_DATA',
      personId: 111
    };
    (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({
      descriptorId: 'FETCH_PERSON_DATA',
      requiredParams: ['personId'],
      operationType: 'READ'
    });
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.have.all.keys('FETCH_PERSON_DATA_111');
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.matchSnapshot('well formed state for resolved read async operation');
  });
  it('should handle REJECT_ASYNC_OPERATION for write action', function () {
    var action = {
      descriptorId: 'FETCH_PERSON_DATA',
      operationStep: 'REJECT_ASYNC_OPERATION',
      type: 'AOM//REJECT__FETCH_PERSON_DATA',
      actionType: 'FETCH_PERSON_DATA',
      personId: 111
    };
    (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({
      descriptorId: 'FETCH_PERSON_DATA',
      requiredParams: ['personId'],
      operationType: 'WRITE'
    });
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.have.all.keys('FETCH_PERSON_DATA_111');
    (0, _chai.expect)((0, _asyncOperationReducer.default)(state, action)).to.matchSnapshot('well formed state for rejected write async operation');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,