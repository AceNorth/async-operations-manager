{"version":3,"sources":["asyncOperationStateUtils.js"],"names":["Object","defineProperty","exports","value","default","require","_lodash","_interopRequireDefault","_propTypes","_config","_constants","_helpers","_types","_asyncOperationUtils","obj","__esModule","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","configurable","writable","updateAsyncOperationDescriptor","asyncOperationDescriptors","descriptorOptions","asyncOperationDescriptor","debug","parentOperationDescriptorId","alwaysImmutable","minCacheTime","maxCacheTime","checkPropTypes","asyncOperationDescriptorPropType","descriptorId","getAsyncOperationDescriptor","config","getConfig","logger","warningsCallback","verboseLoggingCallback","infoLoggingCallback","getAsyncOperation","state","registeredAsyncOperationDescriptors","asyncOperationKey","asyncOperationParams","fieldsToAdd","fieldsToAddToAction","parentAsyncOperation","asyncOperation","parentAsyncOperationDescriptor","parentAsyncOperationParams","getAndValidateParams","parentAsyncOperationKey","generateAsyncOperationKey","operationType","ASYNC_OPERATION_TYPES","READ","initialReadAsyncOperationForAction","initialWriteAsyncOperationForAction","lastDataStatusTime","valueOf","pick","readAsyncOperationFieldsToPullFromParent","updateAsyncOperation","asyncOperationPropType","bulkUpdateAsyncOperations","asyncOperationsList","reduce","accumulator","_ref","_default"],"mappings":"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","file":"asyncOperationStateUtils.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _types = require(\"./types\");\n\nvar _asyncOperationUtils = require(\"./asyncOperationUtils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst updateAsyncOperationDescriptor = (asyncOperationDescriptors, descriptorOptions) => {\n  const asyncOperationDescriptor = _objectSpread({\n    debug: false,\n    parentOperationDescriptorId: null,\n    alwaysImmutable: false,\n    minCacheTime: 5000,\n    maxCacheTime: 60000\n  }, descriptorOptions);\n\n  _propTypes.default.checkPropTypes(_types.asyncOperationDescriptorPropType, asyncOperationDescriptor, 'prop', 'asyncOperationDescriptor');\n\n  return _objectSpread({}, asyncOperationDescriptors, {\n    [asyncOperationDescriptor.descriptorId]: asyncOperationDescriptor\n  });\n}; // validate whether the asyncOperationDescriptor exists\n\n\nconst getAsyncOperationDescriptor = (asyncOperationDescriptors, descriptorId) => {\n  const config = _config.default.getConfig();\n\n  const asyncOperationDescriptor = asyncOperationDescriptors[descriptorId];\n\n  if (!asyncOperationDescriptor) {\n    config.logger.warningsCallback(`descriptorId \"${descriptorId}\" does not match with any registered async operation descriptor`);\n    return null;\n  }\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside getAsyncOperationDescriptor for ${descriptorId}`);\n    config.logger.infoLoggingCallback('getAsyncOperationDescriptor [Data Snapshot]:', {\n      asyncOperationDescriptors,\n      asyncOperationDescriptor\n    });\n  }\n\n  return asyncOperationDescriptor;\n}; // This function will do all the work to determine if an async operation is returned as an initial async operation\n// (if it is not found in state), an asyncOperation with parentAsyncOperation metaData (recursively searched to find if the parentAsyncOperation is more\n// up-to-date) or just the asyncOperation itself if the none of the above apply.\n\n\nconst getAsyncOperation = (state, registeredAsyncOperationDescriptors, asyncOperationKey, asyncOperationDescriptor, asyncOperationParams, fieldsToAdd) => {\n  const config = _config.default.getConfig();\n\n  const fieldsToAddToAction = _objectSpread({}, asyncOperationParams, fieldsToAdd, {\n    // key for the descriptor of the asyncOperation\n    descriptorId: asyncOperationDescriptor.descriptorId\n  });\n\n  let parentAsyncOperation;\n  let asyncOperation = state[asyncOperationKey] || null;\n\n  if (asyncOperationDescriptor.parentOperationDescriptorId) {\n    // grab key, descriptor, params, and async operation for parentAsyncOperation\n    const parentAsyncOperationDescriptor = getAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor.parentOperationDescriptorId);\n    const parentAsyncOperationParams = (0, _helpers.getAndValidateParams)(asyncOperationParams, parentAsyncOperationDescriptor);\n    const parentAsyncOperationKey = (0, _helpers.generateAsyncOperationKey)(asyncOperationDescriptor.parentOperationDescriptorId, parentAsyncOperationParams);\n    parentAsyncOperation = getAsyncOperation(state, registeredAsyncOperationDescriptors, parentAsyncOperationKey, parentAsyncOperationDescriptor, asyncOperationParams, fieldsToAddToAction);\n  }\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside getAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('getAsyncOperation [Data Snapshot]:', {\n      state,\n      asyncOperationParams,\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey\n    });\n  }\n\n  if (!asyncOperation) {\n    if (asyncOperationDescriptor.debug) {\n      config.logger.verboseLoggingCallback(`asyncOperation not found with given key: ${asyncOperationKey}. Defaulting to an initial asyncOperation`);\n    }\n\n    asyncOperation = asyncOperationDescriptor.operationType === _constants.ASYNC_OPERATION_TYPES.READ ? (0, _asyncOperationUtils.initialReadAsyncOperationForAction)(asyncOperationDescriptor.descriptorId, fieldsToAddToAction, parentAsyncOperation) : (0, _asyncOperationUtils.initialWriteAsyncOperationForAction)(asyncOperationDescriptor.descriptorId, fieldsToAddToAction, parentAsyncOperation);\n  } // We want to determine whether or not to use that parentAsyncOperation metaData based on the\n  // newness of it's data in comparison to the asyncOperation\n\n\n  if (parentAsyncOperation && asyncOperation) {\n    return parentAsyncOperation.lastDataStatusTime.valueOf() > asyncOperation.lastDataStatusTime.valueOf() ? _objectSpread({}, asyncOperation, _lodash.default.pick(parentAsyncOperation, _constants.readAsyncOperationFieldsToPullFromParent)) : asyncOperation;\n  }\n\n  return asyncOperation;\n};\n\nconst updateAsyncOperation = (state, asyncOperationKey, asyncOperation, asyncOperationDescriptor) => {\n  const config = _config.default.getConfig();\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside updateAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('updateAsyncOperation [Data Snapshot]:', {\n      state,\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey\n    });\n  }\n\n  _propTypes.default.checkPropTypes(_types.asyncOperationPropType, asyncOperation, 'prop', 'asyncOperation');\n\n  return _objectSpread({}, state, {\n    [asyncOperationKey]: asyncOperation\n  });\n};\n\nconst bulkUpdateAsyncOperations = (state, asyncOperationsList) => {\n  return _lodash.default.reduce(asyncOperationsList, (accumulator, _ref) => {\n    let asyncOperationKey = _ref.asyncOperationKey,\n        asyncOperation = _ref.asyncOperation,\n        asyncOperationDescriptor = _ref.asyncOperationDescriptor;\n    return updateAsyncOperation(accumulator, asyncOperationKey, asyncOperation, asyncOperationDescriptor);\n  }, state);\n};\n\nvar _default = {\n  updateAsyncOperationDescriptor,\n  updateAsyncOperation,\n  bulkUpdateAsyncOperations,\n  getAsyncOperation,\n  getAsyncOperationDescriptor\n};\nexports.default = _default;"]}