42ba52aab6e50d5a4c472f59dcb3b9fa
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _asyncOperationManagerUtils = require("../asyncOperationManagerUtils");

var _constants = require("../constants");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function asyncOperationReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  if ((0, _lodash.includes)(_constants.ASYNC_OPERATION_STEPS, action.operationStep) && action.descriptorId) {
    return _objectSpread({}, state, (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, action.operationStep, action.descriptorId, action));
  }

  return state;
}

var _default = asyncOperationReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jT3BlcmF0aW9uUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfbG9kYXNoIiwicmVxdWlyZSIsIl9hc3luY09wZXJhdGlvbk1hbmFnZXJVdGlscyIsIl9jb25zdGFudHMiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY29uY2F0IiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFzeW5jT3BlcmF0aW9uUmVkdWNlciIsInN0YXRlIiwidW5kZWZpbmVkIiwiYWN0aW9uIiwiaW5jbHVkZXMiLCJBU1lOQ19PUEVSQVRJT05fU1RFUFMiLCJvcGVyYXRpb25TdGVwIiwiZGVzY3JpcHRvcklkIiwiZ2V0U3RhdGVGb3JPcGVyYXRpb25BZnRlclN0ZXAiLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXJCOztBQUVBLElBQUlDLDJCQUEyQixHQUFHRCxPQUFPLENBQUMsK0JBQUQsQ0FBekM7O0FBRUEsSUFBSUUsVUFBVSxHQUFHRixPQUFPLENBQUMsY0FBRCxDQUF4Qjs7QUFFQSxTQUFTRyxhQUFULENBQXVCQyxNQUF2QixFQUErQjtBQUFFLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUE5QixFQUFzQ0YsQ0FBQyxFQUF2QyxFQUEyQztBQUFFLFFBQUlHLE1BQU0sR0FBR0YsU0FBUyxDQUFDRCxDQUFELENBQVQsSUFBZ0IsSUFBaEIsR0FBdUJDLFNBQVMsQ0FBQ0QsQ0FBRCxDQUFoQyxHQUFzQyxFQUFuRDtBQUF1RCxRQUFJSSxPQUFPLEdBQUdmLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWUYsTUFBWixDQUFkOztBQUFtQyxRQUFJLE9BQU9kLE1BQU0sQ0FBQ2lCLHFCQUFkLEtBQXdDLFVBQTVDLEVBQXdEO0FBQUVGLE1BQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDRyxNQUFSLENBQWVsQixNQUFNLENBQUNpQixxQkFBUCxDQUE2QkgsTUFBN0IsRUFBcUNLLE1BQXJDLENBQTRDLFVBQVVDLEdBQVYsRUFBZTtBQUFFLGVBQU9wQixNQUFNLENBQUNxQix3QkFBUCxDQUFnQ1AsTUFBaEMsRUFBd0NNLEdBQXhDLEVBQTZDRSxVQUFwRDtBQUFpRSxPQUE5SCxDQUFmLENBQVY7QUFBNEo7O0FBQUNQLElBQUFBLE9BQU8sQ0FBQ1EsT0FBUixDQUFnQixVQUFVQyxHQUFWLEVBQWU7QUFBRUMsTUFBQUEsZUFBZSxDQUFDZixNQUFELEVBQVNjLEdBQVQsRUFBY1YsTUFBTSxDQUFDVSxHQUFELENBQXBCLENBQWY7QUFBNEMsS0FBN0U7QUFBaUY7O0FBQUMsU0FBT2QsTUFBUDtBQUFnQjs7QUFFamUsU0FBU2UsZUFBVCxDQUF5QkMsR0FBekIsRUFBOEJGLEdBQTlCLEVBQW1DckIsS0FBbkMsRUFBMEM7QUFBRSxNQUFJcUIsR0FBRyxJQUFJRSxHQUFYLEVBQWdCO0FBQUUxQixJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0J5QixHQUF0QixFQUEyQkYsR0FBM0IsRUFBZ0M7QUFBRXJCLE1BQUFBLEtBQUssRUFBRUEsS0FBVDtBQUFnQm1CLE1BQUFBLFVBQVUsRUFBRSxJQUE1QjtBQUFrQ0ssTUFBQUEsWUFBWSxFQUFFLElBQWhEO0FBQXNEQyxNQUFBQSxRQUFRLEVBQUU7QUFBaEUsS0FBaEM7QUFBMEcsR0FBNUgsTUFBa0k7QUFBRUYsSUFBQUEsR0FBRyxDQUFDRixHQUFELENBQUgsR0FBV3JCLEtBQVg7QUFBbUI7O0FBQUMsU0FBT3VCLEdBQVA7QUFBYTs7QUFFak4sU0FBU0cscUJBQVQsR0FBaUM7QUFDL0IsTUFBSUMsS0FBSyxHQUFHbEIsU0FBUyxDQUFDQyxNQUFWLEdBQW1CLENBQW5CLElBQXdCRCxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCbUIsU0FBekMsR0FBcURuQixTQUFTLENBQUMsQ0FBRCxDQUE5RCxHQUFvRSxFQUFoRjtBQUNBLE1BQUlvQixNQUFNLEdBQUdwQixTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBbkIsR0FBdUJELFNBQVMsQ0FBQyxDQUFELENBQWhDLEdBQXNDbUIsU0FBbkQ7O0FBRUEsTUFBSSxDQUFDLEdBQUcxQixPQUFPLENBQUM0QixRQUFaLEVBQXNCekIsVUFBVSxDQUFDMEIscUJBQWpDLEVBQXdERixNQUFNLENBQUNHLGFBQS9ELEtBQWlGSCxNQUFNLENBQUNJLFlBQTVGLEVBQTBHO0FBQ3hHLFdBQU8zQixhQUFhLENBQUMsRUFBRCxFQUFLcUIsS0FBTCxFQUFZLENBQUMsR0FBR3ZCLDJCQUEyQixDQUFDOEIsNkJBQWhDLEVBQStEUCxLQUEvRCxFQUFzRUUsTUFBTSxDQUFDRyxhQUE3RSxFQUE0RkgsTUFBTSxDQUFDSSxZQUFuRyxFQUFpSEosTUFBakgsQ0FBWixDQUFwQjtBQUNEOztBQUVELFNBQU9GLEtBQVA7QUFDRDs7QUFFRCxJQUFJUSxRQUFRLEdBQUdULHFCQUFmO0FBQ0EzQixPQUFPLENBQUNFLE9BQVIsR0FBa0JrQyxRQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2xvZGFzaCA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbnZhciBfYXN5bmNPcGVyYXRpb25NYW5hZ2VyVXRpbHMgPSByZXF1aXJlKFwiLi4vYXN5bmNPcGVyYXRpb25NYW5hZ2VyVXRpbHNcIik7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBhc3luY09wZXJhdGlvblJlZHVjZXIoKSB7XG4gIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICBpZiAoKDAsIF9sb2Rhc2guaW5jbHVkZXMpKF9jb25zdGFudHMuQVNZTkNfT1BFUkFUSU9OX1NURVBTLCBhY3Rpb24ub3BlcmF0aW9uU3RlcCkgJiYgYWN0aW9uLmRlc2NyaXB0b3JJZCkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgKDAsIF9hc3luY09wZXJhdGlvbk1hbmFnZXJVdGlscy5nZXRTdGF0ZUZvck9wZXJhdGlvbkFmdGVyU3RlcCkoc3RhdGUsIGFjdGlvbi5vcGVyYXRpb25TdGVwLCBhY3Rpb24uZGVzY3JpcHRvcklkLCBhY3Rpb24pKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxudmFyIF9kZWZhdWx0ID0gYXN5bmNPcGVyYXRpb25SZWR1Y2VyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il19