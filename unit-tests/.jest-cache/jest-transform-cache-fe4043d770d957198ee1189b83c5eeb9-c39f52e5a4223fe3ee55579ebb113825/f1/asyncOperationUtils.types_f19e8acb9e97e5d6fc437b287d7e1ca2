8b117c10cd239289ed18767445bfa6bf
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncOperationDescriptorPropType = exports.asyncOperationPropType = void 0;

require("core-js/modules/web.dom.iterable");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// @flow

/**
 * Flow types!
 */
// type asyncOperationType = {
//   fetchStatus: 'NULL' | 'PENDING' | 'SUCCESSFUL' | 'FAILED',
//   dataStatus: 'ABSENT' | 'PRESENT',
//   message: any,
//   lastFetchStatusTime: string,
//   lastDataStatusTime: string,
//   actionType: string,
// };
// type asyncOperationDescriptorType = {
//   descriptorId: string,
//   requiredParams: any,   // label + params make the key automatically
//   parentOperationDescriptorId: string, // trivial case: just reference by name
//   operationType: 'READ' | 'WRITE',
// };

/**
 * PropTypes!
 */
const asyncOperationPropType = {
  descriptorId: _propTypes.default.string.isRequired,
  fetchStatus: _propTypes.default.oneOf(_lodash.default.values(_constants.FETCH_STATUS)).isRequired,
  dataStatus: _propTypes.default.oneOf(_lodash.default.values(_constants.DATA_STATUS)),
  message: _propTypes.default.string,
  lastFetchStatusTime: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  lastDataStatusTime: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
exports.asyncOperationPropType = asyncOperationPropType;
const asyncOperationDescriptorPropType = {
  descriptorId: _propTypes.default.string.isRequired,
  requiredParams: _propTypes.default.arrayOf(_propTypes.default.string),
  parentOperationDescriptorId: _propTypes.default.string,
  operationType: _propTypes.default.oneOf(_lodash.default.values(_constants.ASYNC_OPERATION_TYPES)).isRequired
}; // export type {
//   asyncOperationType,
//   asyncOperationDescriptorType,
// };

exports.asyncOperationDescriptorPropType = asyncOperationDescriptorPropType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jT3BlcmF0aW9uVXRpbHMudHlwZXMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JQcm9wVHlwZSIsImFzeW5jT3BlcmF0aW9uUHJvcFR5cGUiLCJyZXF1aXJlIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9kYXNoIiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZGVzY3JpcHRvcklkIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImZldGNoU3RhdHVzIiwib25lT2YiLCJ2YWx1ZXMiLCJGRVRDSF9TVEFUVVMiLCJkYXRhU3RhdHVzIiwiREFUQV9TVEFUVVMiLCJtZXNzYWdlIiwibGFzdEZldGNoU3RhdHVzVGltZSIsIm9uZU9mVHlwZSIsIm51bWJlciIsImxhc3REYXRhU3RhdHVzVGltZSIsInJlcXVpcmVkUGFyYW1zIiwiYXJyYXlPZiIsInBhcmVudE9wZXJhdGlvbkRlc2NyaXB0b3JJZCIsIm9wZXJhdGlvblR5cGUiLCJBU1lOQ19PUEVSQVRJT05fVFlQRVMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTztBQURvQyxDQUE3QztBQUdBRCxRQUFRRSxnQ0FBUixHQUEyQ0YsUUFBUUcsc0JBQVIsR0FBaUMsS0FBSyxDQUFqRjs7QUFFQUMsUUFBUSxrQ0FBUjs7QUFFQSxJQUFJQyxhQUFhQyx1QkFBdUJGLFFBQVEsWUFBUixDQUF2QixDQUFqQjs7QUFFQSxJQUFJRyxVQUFVRCx1QkFBdUJGLFFBQVEsUUFBUixDQUF2QixDQUFkOztBQUVBLElBQUlJLGFBQWFKLFFBQVEsY0FBUixDQUFqQjs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDO0FBQXdEOztBQUUvRjs7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0EsTUFBTU4seUJBQXlCO0FBQzdCUyxnQkFBY1AsV0FBV00sT0FBWCxDQUFtQkUsTUFBbkIsQ0FBMEJDLFVBRFg7QUFFN0JDLGVBQWFWLFdBQVdNLE9BQVgsQ0FBbUJLLEtBQW5CLENBQXlCVCxRQUFRSSxPQUFSLENBQWdCTSxNQUFoQixDQUF1QlQsV0FBV1UsWUFBbEMsQ0FBekIsRUFBMEVKLFVBRjFEO0FBRzdCSyxjQUFZZCxXQUFXTSxPQUFYLENBQW1CSyxLQUFuQixDQUF5QlQsUUFBUUksT0FBUixDQUFnQk0sTUFBaEIsQ0FBdUJULFdBQVdZLFdBQWxDLENBQXpCLENBSGlCO0FBSTdCQyxXQUFTaEIsV0FBV00sT0FBWCxDQUFtQkUsTUFKQztBQUs3QlMsdUJBQXFCakIsV0FBV00sT0FBWCxDQUFtQlksU0FBbkIsQ0FBNkIsQ0FBQ2xCLFdBQVdNLE9BQVgsQ0FBbUJFLE1BQXBCLEVBQTRCUixXQUFXTSxPQUFYLENBQW1CYSxNQUEvQyxDQUE3QixDQUxRO0FBTTdCQyxzQkFBb0JwQixXQUFXTSxPQUFYLENBQW1CWSxTQUFuQixDQUE2QixDQUFDbEIsV0FBV00sT0FBWCxDQUFtQkUsTUFBcEIsRUFBNEJSLFdBQVdNLE9BQVgsQ0FBbUJhLE1BQS9DLENBQTdCO0FBTlMsQ0FBL0I7QUFRQXhCLFFBQVFHLHNCQUFSLEdBQWlDQSxzQkFBakM7QUFDQSxNQUFNRCxtQ0FBbUM7QUFDdkNVLGdCQUFjUCxXQUFXTSxPQUFYLENBQW1CRSxNQUFuQixDQUEwQkMsVUFERDtBQUV2Q1ksa0JBQWdCckIsV0FBV00sT0FBWCxDQUFtQmdCLE9BQW5CLENBQTJCdEIsV0FBV00sT0FBWCxDQUFtQkUsTUFBOUMsQ0FGdUI7QUFHdkNlLCtCQUE2QnZCLFdBQVdNLE9BQVgsQ0FBbUJFLE1BSFQ7QUFJdkNnQixpQkFBZXhCLFdBQVdNLE9BQVgsQ0FBbUJLLEtBQW5CLENBQXlCVCxRQUFRSSxPQUFSLENBQWdCTSxNQUFoQixDQUF1QlQsV0FBV3NCLHFCQUFsQyxDQUF6QixFQUFtRmhCO0FBSjNELENBQXpDLEMsQ0FLRztBQUNIO0FBQ0E7QUFDQTs7QUFFQWQsUUFBUUUsZ0NBQVIsR0FBMkNBLGdDQUEzQyIsImZpbGUiOiJhc3luY09wZXJhdGlvblV0aWxzLnR5cGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclByb3BUeXBlID0gZXhwb3J0cy5hc3luY09wZXJhdGlvblByb3BUeXBlID0gdm9pZCAwO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGVcIik7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBAZmxvd1xuXG4vKipcbiAqIEZsb3cgdHlwZXMhXG4gKi9cbi8vIHR5cGUgYXN5bmNPcGVyYXRpb25UeXBlID0ge1xuLy8gICBmZXRjaFN0YXR1czogJ05VTEwnIHwgJ1BFTkRJTkcnIHwgJ1NVQ0NFU1NGVUwnIHwgJ0ZBSUxFRCcsXG4vLyAgIGRhdGFTdGF0dXM6ICdBQlNFTlQnIHwgJ1BSRVNFTlQnLFxuLy8gICBtZXNzYWdlOiBhbnksXG4vLyAgIGxhc3RGZXRjaFN0YXR1c1RpbWU6IHN0cmluZyxcbi8vICAgbGFzdERhdGFTdGF0dXNUaW1lOiBzdHJpbmcsXG4vLyAgIGFjdGlvblR5cGU6IHN0cmluZyxcbi8vIH07XG4vLyB0eXBlIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclR5cGUgPSB7XG4vLyAgIGRlc2NyaXB0b3JJZDogc3RyaW5nLFxuLy8gICByZXF1aXJlZFBhcmFtczogYW55LCAgIC8vIGxhYmVsICsgcGFyYW1zIG1ha2UgdGhlIGtleSBhdXRvbWF0aWNhbGx5XG4vLyAgIHBhcmVudE9wZXJhdGlvbkRlc2NyaXB0b3JJZDogc3RyaW5nLCAvLyB0cml2aWFsIGNhc2U6IGp1c3QgcmVmZXJlbmNlIGJ5IG5hbWVcbi8vICAgb3BlcmF0aW9uVHlwZTogJ1JFQUQnIHwgJ1dSSVRFJyxcbi8vIH07XG5cbi8qKlxuICogUHJvcFR5cGVzIVxuICovXG5jb25zdCBhc3luY09wZXJhdGlvblByb3BUeXBlID0ge1xuICBkZXNjcmlwdG9ySWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgZmV0Y2hTdGF0dXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihfbG9kYXNoLmRlZmF1bHQudmFsdWVzKF9jb25zdGFudHMuRkVUQ0hfU1RBVFVTKSkuaXNSZXF1aXJlZCxcbiAgZGF0YVN0YXR1czogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKF9sb2Rhc2guZGVmYXVsdC52YWx1ZXMoX2NvbnN0YW50cy5EQVRBX1NUQVRVUykpLFxuICBtZXNzYWdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG4gIGxhc3REYXRhU3RhdHVzVGltZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pXG59O1xuZXhwb3J0cy5hc3luY09wZXJhdGlvblByb3BUeXBlID0gYXN5bmNPcGVyYXRpb25Qcm9wVHlwZTtcbmNvbnN0IGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclByb3BUeXBlID0ge1xuICBkZXNjcmlwdG9ySWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmVxdWlyZWRQYXJhbXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcpLFxuICBwYXJlbnRPcGVyYXRpb25EZXNjcmlwdG9ySWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIG9wZXJhdGlvblR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihfbG9kYXNoLmRlZmF1bHQudmFsdWVzKF9jb25zdGFudHMuQVNZTkNfT1BFUkFUSU9OX1RZUEVTKSkuaXNSZXF1aXJlZFxufTsgLy8gZXhwb3J0IHR5cGUge1xuLy8gICBhc3luY09wZXJhdGlvblR5cGUsXG4vLyAgIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclR5cGUsXG4vLyB9O1xuXG5leHBvcnRzLmFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclByb3BUeXBlID0gYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yUHJvcFR5cGU7Il19