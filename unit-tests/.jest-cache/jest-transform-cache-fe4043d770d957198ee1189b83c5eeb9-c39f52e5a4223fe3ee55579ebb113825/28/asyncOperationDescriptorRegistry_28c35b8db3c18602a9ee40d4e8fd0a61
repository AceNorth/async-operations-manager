1f807e0381f3500cb8efc594e14aa307
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncOperationDescriptorRegistry = exports.initialAsyncOperationDescriptors = void 0;

require("core-js/modules/web.dom.iterable");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

// TODO: JSDocify every function
const initialAsyncOperationDescriptors = {};
exports.initialAsyncOperationDescriptors = initialAsyncOperationDescriptors;

const asyncOperationDescriptorRegistry = (() => {
  let asyncOperationDescriptors;

  const getAsyncOperationDescriptors = () => {
    if (!asyncOperationDescriptors) {
      asyncOperationDescriptors = initialAsyncOperationDescriptors;
    }

    return asyncOperationDescriptors;
  };

  const setAsyncOperationDescriptors = newAsyncOperationDescriptors => {
    asyncOperationDescriptors = _objectSpread({}, asyncOperationDescriptors, newAsyncOperationDescriptors);
    return asyncOperationDescriptors;
  };

  const clearAsyncOperationDescriptors = () => {
    asyncOperationDescriptors = initialAsyncOperationDescriptors;
    return asyncOperationDescriptors;
  };

  return {
    getAsyncOperationDescriptors,
    setAsyncOperationDescriptors,
    clearAsyncOperationDescriptors
  };
})();

exports.asyncOperationDescriptorRegistry = asyncOperationDescriptorRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvclJlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yUmVnaXN0cnkiLCJpbml0aWFsQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyIsInJlcXVpcmUiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY29uY2F0IiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMiLCJnZXRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzIiwic2V0QXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyIsIm5ld0FzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMiLCJjbGVhckFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTztBQURvQyxDQUE3QztBQUdBRCxRQUFRRSxnQ0FBUixHQUEyQ0YsUUFBUUcsZ0NBQVIsR0FBMkMsS0FBSyxDQUEzRjs7QUFFQUMsUUFBUSxrQ0FBUjs7QUFFQSxTQUFTQyxhQUFULENBQXVCQyxNQUF2QixFQUErQjtBQUFFLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJQyxVQUFVQyxNQUE5QixFQUFzQ0YsR0FBdEMsRUFBMkM7QUFBRSxRQUFJRyxTQUFTRixVQUFVRCxDQUFWLEtBQWdCLElBQWhCLEdBQXVCQyxVQUFVRCxDQUFWLENBQXZCLEdBQXNDLEVBQW5ELENBQXVELElBQUlJLFVBQVViLE9BQU9jLElBQVAsQ0FBWUYsTUFBWixDQUFkLENBQW1DLElBQUksT0FBT1osT0FBT2UscUJBQWQsS0FBd0MsVUFBNUMsRUFBd0Q7QUFBRUYsZ0JBQVVBLFFBQVFHLE1BQVIsQ0FBZWhCLE9BQU9lLHFCQUFQLENBQTZCSCxNQUE3QixFQUFxQ0ssTUFBckMsQ0FBNEMsVUFBVUMsR0FBVixFQUFlO0FBQUUsZUFBT2xCLE9BQU9tQix3QkFBUCxDQUFnQ1AsTUFBaEMsRUFBd0NNLEdBQXhDLEVBQTZDRSxVQUFwRDtBQUFpRSxPQUE5SCxDQUFmLENBQVY7QUFBNEosS0FBQ1AsUUFBUVEsT0FBUixDQUFnQixVQUFVQyxHQUFWLEVBQWU7QUFBRUMsc0JBQWdCZixNQUFoQixFQUF3QmMsR0FBeEIsRUFBNkJWLE9BQU9VLEdBQVAsQ0FBN0I7QUFBNEMsS0FBN0U7QUFBaUYsR0FBQyxPQUFPZCxNQUFQO0FBQWdCOztBQUVqZSxTQUFTZSxlQUFULENBQXlCQyxHQUF6QixFQUE4QkYsR0FBOUIsRUFBbUNuQixLQUFuQyxFQUEwQztBQUFFLE1BQUltQixPQUFPRSxHQUFYLEVBQWdCO0FBQUV4QixXQUFPQyxjQUFQLENBQXNCdUIsR0FBdEIsRUFBMkJGLEdBQTNCLEVBQWdDLEVBQUVuQixPQUFPQSxLQUFULEVBQWdCaUIsWUFBWSxJQUE1QixFQUFrQ0ssY0FBYyxJQUFoRCxFQUFzREMsVUFBVSxJQUFoRSxFQUFoQztBQUEwRyxHQUE1SCxNQUFrSTtBQUFFRixRQUFJRixHQUFKLElBQVduQixLQUFYO0FBQW1CLEdBQUMsT0FBT3FCLEdBQVA7QUFBYTs7QUFFak47QUFDQSxNQUFNbkIsbUNBQW1DLEVBQXpDO0FBQ0FILFFBQVFHLGdDQUFSLEdBQTJDQSxnQ0FBM0M7O0FBRUEsTUFBTUQsbUNBQW1DLENBQUMsTUFBTTtBQUM5QyxNQUFJdUIseUJBQUo7O0FBRUEsUUFBTUMsK0JBQStCLE1BQU07QUFDekMsUUFBSSxDQUFDRCx5QkFBTCxFQUFnQztBQUM5QkEsa0NBQTRCdEIsZ0NBQTVCO0FBQ0Q7O0FBRUQsV0FBT3NCLHlCQUFQO0FBQ0QsR0FORDs7QUFRQSxRQUFNRSwrQkFBK0JDLGdDQUFnQztBQUNuRUgsZ0NBQTRCcEIsY0FBYyxFQUFkLEVBQWtCb0IseUJBQWxCLEVBQTZDRyw0QkFBN0MsQ0FBNUI7QUFDQSxXQUFPSCx5QkFBUDtBQUNELEdBSEQ7O0FBS0EsUUFBTUksaUNBQWlDLE1BQU07QUFDM0NKLGdDQUE0QnRCLGdDQUE1QjtBQUNBLFdBQU9zQix5QkFBUDtBQUNELEdBSEQ7O0FBS0EsU0FBTztBQUNMQyxnQ0FESztBQUVMQyxnQ0FGSztBQUdMRTtBQUhLLEdBQVA7QUFLRCxDQTFCd0MsR0FBekM7O0FBNEJBN0IsUUFBUUUsZ0NBQVIsR0FBMkNBLGdDQUEzQyIsImZpbGUiOiJhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JSZWdpc3RyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hc3luY09wZXJhdGlvbkRlc2NyaXB0b3JSZWdpc3RyeSA9IGV4cG9ydHMuaW5pdGlhbEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSB2b2lkIDA7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vLyBUT0RPOiBKU0RvY2lmeSBldmVyeSBmdW5jdGlvblxuY29uc3QgaW5pdGlhbEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSB7fTtcbmV4cG9ydHMuaW5pdGlhbEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSBpbml0aWFsQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycztcblxuY29uc3QgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yUmVnaXN0cnkgPSAoKCkgPT4ge1xuICBsZXQgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycztcblxuICBjb25zdCBnZXRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0gKCkgPT4ge1xuICAgIGlmICghYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycykge1xuICAgICAgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IGluaXRpYWxBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICAgIH1cblxuICAgIHJldHVybiBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICB9O1xuXG4gIGNvbnN0IHNldEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSBuZXdBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0+IHtcbiAgICBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0gX29iamVjdFNwcmVhZCh7fSwgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycywgbmV3QXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyk7XG4gICAgcmV0dXJuIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnM7XG4gIH07XG5cbiAgY29uc3QgY2xlYXJBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0gKCkgPT4ge1xuICAgIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSBpbml0aWFsQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycztcbiAgICByZXR1cm4gYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGdldEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMsXG4gICAgc2V0QXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyxcbiAgICBjbGVhckFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnNcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yUmVnaXN0cnkgPSBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JSZWdpc3RyeTsiXX0=