e8b1441c8ed895992ac941efd6820cf2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DATA_STATUS = exports.FETCH_STATUS = exports.ASYNC_OPERATION_STEPS = exports.ASYNC_OPERATION_TYPES = exports.readAsyncOperationFieldsToPullFromParent = void 0;

var _helpers = require("./helpers");

var readAsyncOperationFieldsToPullFromParent = ['fetchStatus', 'dataStatus', 'lastFetchStatusTime', 'lastDataStatusTime'];
exports.readAsyncOperationFieldsToPullFromParent = readAsyncOperationFieldsToPullFromParent;
var ASYNC_OPERATION_STEPS = (0, _helpers.makeConstantsObject)(['BEGIN_ASYNC_OPERATION', 'RESOLVE_ASYNC_OPERATION', 'REJECT_ASYNC_OPERATION']);
exports.ASYNC_OPERATION_STEPS = ASYNC_OPERATION_STEPS;
var ASYNC_OPERATION_TYPES = (0, _helpers.makeConstantsObject)(['READ', 'WRITE']);
/**
 * In general this is used to note the status of the last fetch attempted for a backend operation.
 */

exports.ASYNC_OPERATION_TYPES = ASYNC_OPERATION_TYPES;
var FETCH_STATUS = (0, _helpers.makeConstantsObject)([// Default: we haven't tried to fetch yet
'NULL', // Indicates that a request is in flight.
'PENDING', // Indicates that the request completed and all is well
'SUCCESSFUL', // Indicates that something went wrong: the request didn't complete, or it completed with
// an http, payload/parsing, or business logic error.
// @TODO: Should we distinguish between "request completed by result failed" vs
//        "request didn't complete due to timeout or network error"?
'FAILED']);
/**
 * In general this is used to note the presence of data for a specific backend operation.
 */

exports.FETCH_STATUS = FETCH_STATUS;
var DATA_STATUS = (0, _helpers.makeConstantsObject)([// Default: we haven't received anything
'ABSENT', // Result was received and we have data
'PRESENT']);
exports.DATA_STATUS = DATA_STATUS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRBVEFfU1RBVFVTIiwiRkVUQ0hfU1RBVFVTIiwiQVNZTkNfT1BFUkFUSU9OX1NURVBTIiwiQVNZTkNfT1BFUkFUSU9OX1RZUEVTIiwicmVhZEFzeW5jT3BlcmF0aW9uRmllbGRzVG9QdWxsRnJvbVBhcmVudCIsIl9oZWxwZXJzIiwicmVxdWlyZSIsIm1ha2VDb25zdGFudHNPYmplY3QiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxXQUFSLEdBQXNCRixPQUFPLENBQUNHLFlBQVIsR0FBdUJILE9BQU8sQ0FBQ0kscUJBQVIsR0FBZ0NKLE9BQU8sQ0FBQ0sscUJBQVIsR0FBZ0NMLE9BQU8sQ0FBQ00sd0NBQVIsR0FBbUQsS0FBSyxDQUFySzs7QUFFQSxJQUFJQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXRCOztBQUVBLElBQUlGLHdDQUF3QyxHQUFHLENBQUMsYUFBRCxFQUFnQixZQUFoQixFQUE4QixxQkFBOUIsRUFBcUQsb0JBQXJELENBQS9DO0FBQ0FOLE9BQU8sQ0FBQ00sd0NBQVIsR0FBbURBLHdDQUFuRDtBQUNBLElBQUlGLHFCQUFxQixHQUFHLENBQUMsR0FBR0csUUFBUSxDQUFDRSxtQkFBYixFQUFrQyxDQUFDLHVCQUFELEVBQTBCLHlCQUExQixFQUFxRCx3QkFBckQsQ0FBbEMsQ0FBNUI7QUFDQVQsT0FBTyxDQUFDSSxxQkFBUixHQUFnQ0EscUJBQWhDO0FBQ0EsSUFBSUMscUJBQXFCLEdBQUcsQ0FBQyxHQUFHRSxRQUFRLENBQUNFLG1CQUFiLEVBQWtDLENBQUMsTUFBRCxFQUFTLE9BQVQsQ0FBbEMsQ0FBNUI7QUFDQTs7OztBQUlBVCxPQUFPLENBQUNLLHFCQUFSLEdBQWdDQSxxQkFBaEM7QUFDQSxJQUFJRixZQUFZLEdBQUcsQ0FBQyxHQUFHSSxRQUFRLENBQUNFLG1CQUFiLEVBQWtDLENBQUM7QUFDdEQsTUFEcUQsRUFDN0M7QUFDUixTQUZxRCxFQUUxQztBQUNYLFlBSHFELEVBR3ZDO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsUUFQcUQsQ0FBbEMsQ0FBbkI7QUFRQTs7OztBQUlBVCxPQUFPLENBQUNHLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0EsSUFBSUQsV0FBVyxHQUFHLENBQUMsR0FBR0ssUUFBUSxDQUFDRSxtQkFBYixFQUFrQyxDQUFDO0FBQ3JELFFBRG9ELEVBQzFDO0FBQ1YsU0FGb0QsQ0FBbEMsQ0FBbEI7QUFHQVQsT0FBTyxDQUFDRSxXQUFSLEdBQXNCQSxXQUF0QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EQVRBX1NUQVRVUyA9IGV4cG9ydHMuRkVUQ0hfU1RBVFVTID0gZXhwb3J0cy5BU1lOQ19PUEVSQVRJT05fU1RFUFMgPSBleHBvcnRzLkFTWU5DX09QRVJBVElPTl9UWVBFUyA9IGV4cG9ydHMucmVhZEFzeW5jT3BlcmF0aW9uRmllbGRzVG9QdWxsRnJvbVBhcmVudCA9IHZvaWQgMDtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcblxudmFyIHJlYWRBc3luY09wZXJhdGlvbkZpZWxkc1RvUHVsbEZyb21QYXJlbnQgPSBbJ2ZldGNoU3RhdHVzJywgJ2RhdGFTdGF0dXMnLCAnbGFzdEZldGNoU3RhdHVzVGltZScsICdsYXN0RGF0YVN0YXR1c1RpbWUnXTtcbmV4cG9ydHMucmVhZEFzeW5jT3BlcmF0aW9uRmllbGRzVG9QdWxsRnJvbVBhcmVudCA9IHJlYWRBc3luY09wZXJhdGlvbkZpZWxkc1RvUHVsbEZyb21QYXJlbnQ7XG52YXIgQVNZTkNfT1BFUkFUSU9OX1NURVBTID0gKDAsIF9oZWxwZXJzLm1ha2VDb25zdGFudHNPYmplY3QpKFsnQkVHSU5fQVNZTkNfT1BFUkFUSU9OJywgJ1JFU09MVkVfQVNZTkNfT1BFUkFUSU9OJywgJ1JFSkVDVF9BU1lOQ19PUEVSQVRJT04nXSk7XG5leHBvcnRzLkFTWU5DX09QRVJBVElPTl9TVEVQUyA9IEFTWU5DX09QRVJBVElPTl9TVEVQUztcbnZhciBBU1lOQ19PUEVSQVRJT05fVFlQRVMgPSAoMCwgX2hlbHBlcnMubWFrZUNvbnN0YW50c09iamVjdCkoWydSRUFEJywgJ1dSSVRFJ10pO1xuLyoqXG4gKiBJbiBnZW5lcmFsIHRoaXMgaXMgdXNlZCB0byBub3RlIHRoZSBzdGF0dXMgb2YgdGhlIGxhc3QgZmV0Y2ggYXR0ZW1wdGVkIGZvciBhIGJhY2tlbmQgb3BlcmF0aW9uLlxuICovXG5cbmV4cG9ydHMuQVNZTkNfT1BFUkFUSU9OX1RZUEVTID0gQVNZTkNfT1BFUkFUSU9OX1RZUEVTO1xudmFyIEZFVENIX1NUQVRVUyA9ICgwLCBfaGVscGVycy5tYWtlQ29uc3RhbnRzT2JqZWN0KShbLy8gRGVmYXVsdDogd2UgaGF2ZW4ndCB0cmllZCB0byBmZXRjaCB5ZXRcbidOVUxMJywgLy8gSW5kaWNhdGVzIHRoYXQgYSByZXF1ZXN0IGlzIGluIGZsaWdodC5cbidQRU5ESU5HJywgLy8gSW5kaWNhdGVzIHRoYXQgdGhlIHJlcXVlc3QgY29tcGxldGVkIGFuZCBhbGwgaXMgd2VsbFxuJ1NVQ0NFU1NGVUwnLCAvLyBJbmRpY2F0ZXMgdGhhdCBzb21ldGhpbmcgd2VudCB3cm9uZzogdGhlIHJlcXVlc3QgZGlkbid0IGNvbXBsZXRlLCBvciBpdCBjb21wbGV0ZWQgd2l0aFxuLy8gYW4gaHR0cCwgcGF5bG9hZC9wYXJzaW5nLCBvciBidXNpbmVzcyBsb2dpYyBlcnJvci5cbi8vIEBUT0RPOiBTaG91bGQgd2UgZGlzdGluZ3Vpc2ggYmV0d2VlbiBcInJlcXVlc3QgY29tcGxldGVkIGJ5IHJlc3VsdCBmYWlsZWRcIiB2c1xuLy8gICAgICAgIFwicmVxdWVzdCBkaWRuJ3QgY29tcGxldGUgZHVlIHRvIHRpbWVvdXQgb3IgbmV0d29yayBlcnJvclwiP1xuJ0ZBSUxFRCddKTtcbi8qKlxuICogSW4gZ2VuZXJhbCB0aGlzIGlzIHVzZWQgdG8gbm90ZSB0aGUgcHJlc2VuY2Ugb2YgZGF0YSBmb3IgYSBzcGVjaWZpYyBiYWNrZW5kIG9wZXJhdGlvbi5cbiAqL1xuXG5leHBvcnRzLkZFVENIX1NUQVRVUyA9IEZFVENIX1NUQVRVUztcbnZhciBEQVRBX1NUQVRVUyA9ICgwLCBfaGVscGVycy5tYWtlQ29uc3RhbnRzT2JqZWN0KShbLy8gRGVmYXVsdDogd2UgaGF2ZW4ndCByZWNlaXZlZCBhbnl0aGluZ1xuJ0FCU0VOVCcsIC8vIFJlc3VsdCB3YXMgcmVjZWl2ZWQgYW5kIHdlIGhhdmUgZGF0YVxuJ1BSRVNFTlQnXSk7XG5leHBvcnRzLkRBVEFfU1RBVFVTID0gREFUQV9TVEFUVVM7Il19