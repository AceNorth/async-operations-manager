{"version":3,"sources":["asyncOperationManagerUtils_test.js"],"names":["_chai","require","_asyncOperationManagerUtils","describe","state","beforeEach","it","registerAsyncOperationDescriptors","descriptorId","requiredParams","operationType","registeredAsyncDescriptors","getRegisteredAsyncDescriptors","expect","Object","keys","to","have","lengthOf","all","parentAsyncOperation","debug","alwaysImmutable","minCacheTime","maxCacheTime","asyncOperationDescriptor","getAsyncOperationDescriptor","be","an","matchSnapshot","dateNowStub","jest","fn","global","Date","now","transformedState","getStateForOperationAfterStep","personId","nested","include","FETCH_PERSON_DATA_111","fetchStatus","dataStatus","message","lastFetchStatusTime","lastDataStatusTime","UPDATE_PERSON_DATA_111"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,2BAA2B,GAAGD,OAAO,CAAC,+BAAD,CAAzC;AAEA;;;AACAE,QAAQ,CAAC,4BAAD,EAA+B,YAAY;AACjD,MAAIC,KAAJ;AACAC,EAAAA,UAAU,CAAC,YAAY;AACrBD,IAAAA,KAAK,GAAG,EAAR;AACD,GAFS,CAAV;AAGAD,EAAAA,QAAQ,CAAC,mCAAD,EAAsC,YAAY;AACxDG,IAAAA,EAAE,CAAC,kFAAD,EAAqF,YAAY;AACjG,OAAC,GAAGJ,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,QAAAA,YAAY,EAAE,6BADmD;AAEjEC,QAAAA,cAAc,EAAE,CAAC,OAAD,CAFiD;AAGjEC,QAAAA,aAAa,EAAE;AAHkD,OAAnE;AAKA,UAAIC,0BAA0B,GAAG,CAAC,GAAGT,2BAA2B,CAACU,6BAAhC,EAA+DR,KAA/D,CAAjC;AACA,OAAC,GAAGJ,KAAK,CAACa,MAAV,EAAkBC,MAAM,CAACC,IAAP,CAAYJ,0BAAZ,CAAlB,EAA2DK,EAA3D,CAA8DC,IAA9D,CAAmEC,QAAnE,CAA4E,CAA5E;AACA,OAAC,GAAGlB,KAAK,CAACa,MAAV,EAAkBF,0BAAlB,EAA8CK,EAA9C,CAAiDC,IAAjD,CAAsDE,GAAtD,CAA0DJ,IAA1D,CAA+D,6BAA/D;AACD,KATC,CAAF;AAUAT,IAAAA,EAAE,CAAC,wFAAD,EAA2F,YAAY;AACvG,OAAC,GAAGJ,2BAA2B,CAACK,iCAAhC,EAAmE,CAAC;AAClEC,QAAAA,YAAY,EAAE,6BADoD;AAElEC,QAAAA,cAAc,EAAE,CAAC,OAAD,CAFkD;AAGlEC,QAAAA,aAAa,EAAE;AAHmD,OAAD,EAIhE;AACDF,QAAAA,YAAY,EAAE,8BADb;AAEDC,QAAAA,cAAc,EAAE,CAAC,OAAD,EAAU,YAAV,CAFf;AAGDC,QAAAA,aAAa,EAAE;AAHd,OAJgE,CAAnE;AASA,UAAIC,0BAA0B,GAAG,CAAC,GAAGT,2BAA2B,CAACU,6BAAhC,EAA+DR,KAA/D,CAAjC;AACA,OAAC,GAAGJ,KAAK,CAACa,MAAV,EAAkBC,MAAM,CAACC,IAAP,CAAYJ,0BAAZ,CAAlB,EAA2DK,EAA3D,CAA8DC,IAA9D,CAAmEC,QAAnE,CAA4E,CAA5E;AACA,OAAC,GAAGlB,KAAK,CAACa,MAAV,EAAkBF,0BAAlB,EAA8CK,EAA9C,CAAiDC,IAAjD,CAAsDE,GAAtD,CAA0DJ,IAA1D,CAA+D,6BAA/D,EAA8F,8BAA9F;AACD,KAbC,CAAF;AAcD,GAzBO,CAAR;AA0BAZ,EAAAA,QAAQ,CAAC,6BAAD,EAAgC,YAAY;AAClDG,IAAAA,EAAE,CAAC,kEAAD,EAAqE,YAAY;AACjF,OAAC,GAAGJ,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,QAAAA,YAAY,EAAE,yBADmD;AAEjEC,QAAAA,cAAc,EAAE,CAAC,UAAD,CAFiD;AAGjEC,QAAAA,aAAa,EAAE,MAHkD;AAIjE;AACAU,QAAAA,oBAAoB,EAAE,uBAL2C;AAMjEC,QAAAA,KAAK,EAAE,KAN0D;AAOjEC,QAAAA,eAAe,EAAE,KAPgD;AAQjEC,QAAAA,YAAY,EAAE,IARmD;AASjEC,QAAAA,YAAY,EAAE;AATmD,OAAnE;AAWA,UAAIC,wBAAwB,GAAG,CAAC,GAAGvB,2BAA2B,CAACwB,2BAAhC,EAA6D,yBAA7D,CAA/B;AACA,OAAC,GAAG1B,KAAK,CAACa,MAAV,EAAkBY,wBAAlB,EAA4CT,EAA5C,CAA+CW,EAA/C,CAAkDC,EAAlD,CAAqD,QAArD;AACA,OAAC,GAAG5B,KAAK,CAACa,MAAV,EAAkBY,wBAAlB,EAA4CT,EAA5C,CAA+Ca,aAA/C,CAA6D,wCAA7D;AACD,KAfC,CAAF;AAgBD,GAjBO,CAAR;AAkBA1B,EAAAA,QAAQ,CAAC,+BAAD,EAAkC,YAAY;AACpDE,IAAAA,UAAU,CAAC,YAAY;AACrB,UAAIyB,WAAW,GAAGC,IAAI,CAACC,EAAL,CAAQ,YAAY;AACpC,eAAO,aAAP;AACD,OAFiB,CAAlB;AAGAC,MAAAA,MAAM,CAACC,IAAP,CAAYC,GAAZ,GAAkBL,WAAlB;AACD,KALS,CAAV;AAMA3B,IAAAA,QAAQ,CAAC,uBAAD,EAA0B,YAAY;AAC5CG,MAAAA,EAAE,CAAC,sFAAD,EAAyF,YAAY;AACrG,SAAC,GAAGJ,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,UAAAA,YAAY,EAAE,mBADmD;AAEjEC,UAAAA,cAAc,EAAE,CAAC,UAAD,CAFiD;AAGjEC,UAAAA,aAAa,EAAE;AAHkD,SAAnE;AAKA,YAAI0B,gBAAgB,GAAG,CAAC,GAAGlC,2BAA2B,CAACmC,6BAAhC,EAA+DjC,KAA/D,EAAsE,uBAAtE,EAA+F,mBAA/F,EAAoH;AACzIkC,UAAAA,QAAQ,EAAE;AAD+H,SAApH,CAAvB;AAGA,SAAC,GAAGtC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCuB,MAAvC,CAA8CC,OAA9C,CAAsD;AACpD,+CAAqC;AADe,SAAtD;AAGA,SAAC,GAAGxC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCa,aAAvC,CAAqD,kDAArD;AACD,OAbC,CAAF;AAcAvB,MAAAA,EAAE,CAAC,yFAAD,EAA4F,YAAY;AACxGF,QAAAA,KAAK,GAAG;AACNqC,UAAAA,qBAAqB,EAAE;AACrBjC,YAAAA,YAAY,EAAE,mBADO;AAErBkC,YAAAA,WAAW,EAAE,SAFQ;AAGrBC,YAAAA,UAAU,EAAE,QAHS;AAIrBC,YAAAA,OAAO,EAAE,IAJY;AAKrBC,YAAAA,mBAAmB,EAAE,CALA;AAMrBC,YAAAA,kBAAkB,EAAE,CANC;AAOrBR,YAAAA,QAAQ,EAAE;AAPW;AADjB,SAAR;AAWA,SAAC,GAAGpC,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,UAAAA,YAAY,EAAE,mBADmD;AAEjEC,UAAAA,cAAc,EAAE,CAAC,UAAD,CAFiD;AAGjEC,UAAAA,aAAa,EAAE;AAHkD,SAAnE;AAKA,YAAI0B,gBAAgB,GAAG,CAAC,GAAGlC,2BAA2B,CAACmC,6BAAhC,EAA+DjC,KAA/D,EAAsE,yBAAtE,EAAiG,mBAAjG,EAAsH;AAC3IkC,UAAAA,QAAQ,EAAE;AADiI,SAAtH,CAAvB;AAGA,SAAC,GAAGtC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCuB,MAAvC,CAA8CC,OAA9C,CAAsD;AACpD,+CAAqC;AADe,SAAtD;AAGA,SAAC,GAAGxC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCa,aAAvC,CAAqD,uDAArD;AACD,OAxBC,CAAF;AAyBAvB,MAAAA,EAAE,CAAC,qFAAD,EAAwF,YAAY;AACpGF,QAAAA,KAAK,GAAG;AACNqC,UAAAA,qBAAqB,EAAE;AACrBjC,YAAAA,YAAY,EAAE,mBADO;AAErBkC,YAAAA,WAAW,EAAE,SAFQ;AAGrBC,YAAAA,UAAU,EAAE,QAHS;AAIrBC,YAAAA,OAAO,EAAE,IAJY;AAKrBC,YAAAA,mBAAmB,EAAE,CALA;AAMrBC,YAAAA,kBAAkB,EAAE,CANC;AAOrBR,YAAAA,QAAQ,EAAE;AAPW;AADjB,SAAR;AAWA,SAAC,GAAGpC,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,UAAAA,YAAY,EAAE,mBADmD;AAEjEC,UAAAA,cAAc,EAAE,CAAC,UAAD,CAFiD;AAGjEC,UAAAA,aAAa,EAAE;AAHkD,SAAnE;AAKA,YAAI0B,gBAAgB,GAAG,CAAC,GAAGlC,2BAA2B,CAACmC,6BAAhC,EAA+DjC,KAA/D,EAAsE,wBAAtE,EAAgG,mBAAhG,EAAqH;AAC1IkC,UAAAA,QAAQ,EAAE;AADgI,SAArH,CAAvB;AAGA,SAAC,GAAGtC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCuB,MAAvC,CAA8CC,OAA9C,CAAsD;AACpD,+CAAqC;AADe,SAAtD;AAGA,SAAC,GAAGxC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCa,aAAvC,CAAqD,gDAArD;AACD,OAxBC,CAAF;AAyBD,KAjEO,CAAR;AAkEA1B,IAAAA,QAAQ,CAAC,wBAAD,EAA2B,YAAY;AAC7CG,MAAAA,EAAE,CAAC,uFAAD,EAA0F,YAAY;AACtG,SAAC,GAAGJ,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,UAAAA,YAAY,EAAE,oBADmD;AAEjEC,UAAAA,cAAc,EAAE,CAAC,UAAD,CAFiD;AAGjEC,UAAAA,aAAa,EAAE;AAHkD,SAAnE;AAKA,YAAI0B,gBAAgB,GAAG,CAAC,GAAGlC,2BAA2B,CAACmC,6BAAhC,EAA+DjC,KAA/D,EAAsE,uBAAtE,EAA+F,oBAA/F,EAAqH;AAC1IkC,UAAAA,QAAQ,EAAE;AADgI,SAArH,CAAvB;AAGA,SAAC,GAAGtC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCuB,MAAvC,CAA8CC,OAA9C,CAAsD;AACpD,gDAAsC;AADc,SAAtD;AAGA,SAAC,GAAGxC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCa,aAAvC,CAAqD,qDAArD;AACD,OAbC,CAAF;AAcAvB,MAAAA,EAAE,CAAC,0FAAD,EAA6F,YAAY;AACzGF,QAAAA,KAAK,GAAG;AACN2C,UAAAA,sBAAsB,EAAE;AACtBvC,YAAAA,YAAY,EAAE,oBADQ;AAEtBkC,YAAAA,WAAW,EAAE,SAFS;AAGtBE,YAAAA,OAAO,EAAE,IAHa;AAItBC,YAAAA,mBAAmB,EAAE,CAJC;AAKtBC,YAAAA,kBAAkB,EAAE,CALE;AAMtBR,YAAAA,QAAQ,EAAE;AANY;AADlB,SAAR;AAUA,SAAC,GAAGpC,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,UAAAA,YAAY,EAAE,oBADmD;AAEjEC,UAAAA,cAAc,EAAE,CAAC,UAAD,CAFiD;AAGjEC,UAAAA,aAAa,EAAE;AAHkD,SAAnE;AAKA,YAAI0B,gBAAgB,GAAG,CAAC,GAAGlC,2BAA2B,CAACmC,6BAAhC,EAA+DjC,KAA/D,EAAsE,yBAAtE,EAAiG,oBAAjG,EAAuH;AAC5IkC,UAAAA,QAAQ,EAAE;AADkI,SAAvH,CAAvB;AAGA,SAAC,GAAGtC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCuB,MAAvC,CAA8CC,OAA9C,CAAsD;AACpD,gDAAsC;AADc,SAAtD;AAGA,SAAC,GAAGxC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCa,aAAvC,CAAqD,wDAArD;AACD,OAvBC,CAAF;AAwBAvB,MAAAA,EAAE,CAAC,sFAAD,EAAyF,YAAY;AACrGF,QAAAA,KAAK,GAAG;AACN2C,UAAAA,sBAAsB,EAAE;AACtBvC,YAAAA,YAAY,EAAE,oBADQ;AAEtBkC,YAAAA,WAAW,EAAE,SAFS;AAGtBE,YAAAA,OAAO,EAAE,IAHa;AAItBC,YAAAA,mBAAmB,EAAE,CAJC;AAKtBC,YAAAA,kBAAkB,EAAE,CALE;AAMtBR,YAAAA,QAAQ,EAAE;AANY;AADlB,SAAR;AAUA,SAAC,GAAGpC,2BAA2B,CAACK,iCAAhC,EAAmE;AACjEC,UAAAA,YAAY,EAAE,oBADmD;AAEjEC,UAAAA,cAAc,EAAE,CAAC,UAAD,CAFiD;AAGjEC,UAAAA,aAAa,EAAE;AAHkD,SAAnE;AAKA,YAAI0B,gBAAgB,GAAG,CAAC,GAAGlC,2BAA2B,CAACmC,6BAAhC,EAA+DjC,KAA/D,EAAsE,wBAAtE,EAAgG,oBAAhG,EAAsH;AAC3IkC,UAAAA,QAAQ,EAAE;AADiI,SAAtH,CAAvB;AAGA,SAAC,GAAGtC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCuB,MAAvC,CAA8CC,OAA9C,CAAsD;AACpD,gDAAsC;AADc,SAAtD;AAGA,SAAC,GAAGxC,KAAK,CAACa,MAAV,EAAkBuB,gBAAlB,EAAoCpB,EAApC,CAAuCa,aAAvC,CAAqD,oDAArD;AACD,OAvBC,CAAF;AAwBD,KA/DO,CAAR;AAgED,GAzIO,CAAR;AA0ID,CA3LO,CAAR","sourcesContent":["\"use strict\";\n\nvar _chai = require(\"chai\");\n\nvar _asyncOperationManagerUtils = require(\"../asyncOperationManagerUtils\");\n\n/* eslint-env jest */\ndescribe('asyncOperationManagerUtils', function () {\n  var state;\n  beforeEach(function () {\n    state = {};\n  });\n  describe('registerAsyncOperationDescriptors', function () {\n    it('should accept object argument to register one async operation decriptor to state', function () {\n      (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n        descriptorId: 'FETCH_ALL_BEVERAGES_FOR_ORG',\n        requiredParams: ['orgId'],\n        operationType: 'READ'\n      });\n      var registeredAsyncDescriptors = (0, _asyncOperationManagerUtils.getRegisteredAsyncDescriptors)(state);\n      (0, _chai.expect)(Object.keys(registeredAsyncDescriptors)).to.have.lengthOf(1);\n      (0, _chai.expect)(registeredAsyncDescriptors).to.have.all.keys('FETCH_ALL_BEVERAGES_FOR_ORG');\n    });\n    it('should accept array argument to register multiple async operation descriptors to state', function () {\n      (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)([{\n        descriptorId: 'FETCH_ALL_BEVERAGES_FOR_ORG',\n        requiredParams: ['orgId'],\n        operationType: 'READ'\n      }, {\n        descriptorId: 'DRINK_BEVERAGE_BY_ID_FOR_ORG',\n        requiredParams: ['orgId', 'beverageId'],\n        operationType: 'WRITE'\n      }]);\n      var registeredAsyncDescriptors = (0, _asyncOperationManagerUtils.getRegisteredAsyncDescriptors)(state);\n      (0, _chai.expect)(Object.keys(registeredAsyncDescriptors)).to.have.lengthOf(2);\n      (0, _chai.expect)(registeredAsyncDescriptors).to.have.all.keys('FETCH_ALL_BEVERAGES_FOR_ORG', 'DRINK_BEVERAGE_BY_ID_FOR_ORG');\n    });\n  });\n  describe('getAsyncOperationDescriptor', function () {\n    it('should successfully return a registered asyncOperationDescriptor', function () {\n      (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n        descriptorId: 'FETCH_PERSON_DATA_BY_ID',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n        // optional values\n        parentAsyncOperation: 'FETCH_ALL_PERSON_DATA',\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000\n      });\n      var asyncOperationDescriptor = (0, _asyncOperationManagerUtils.getAsyncOperationDescriptor)('FETCH_PERSON_DATA_BY_ID');\n      (0, _chai.expect)(asyncOperationDescriptor).to.be.an('object');\n      (0, _chai.expect)(asyncOperationDescriptor).to.matchSnapshot('well formed async operation descriptor');\n    });\n  });\n  describe('getStateForOperationAfterStep', function () {\n    beforeEach(function () {\n      var dateNowStub = jest.fn(function () {\n        return 1530518207007;\n      });\n      global.Date.now = dateNowStub;\n    });\n    describe('READ async operations', function () {\n      it('should update state to read show async operation as pending state from initial state', function () {\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'FETCH_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'READ'\n        });\n        var transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'BEGIN_ASYNC_OPERATION', 'FETCH_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'FETCH_PERSON_DATA_111.fetchStatus': 'PENDING'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing begun read async operation');\n      });\n      it('should update state to read show async operation as successful state from pending state', function () {\n        state = {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            dataStatus: 'ABSENT',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'FETCH_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'READ'\n        });\n        var transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'RESOLVE_ASYNC_OPERATION', 'FETCH_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'FETCH_PERSON_DATA_111.fetchStatus': 'SUCCESSFUL'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing successful read async operation');\n      });\n      it('should update state to read show async operation as failed state from pending state', function () {\n        state = {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            dataStatus: 'ABSENT',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'FETCH_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'READ'\n        });\n        var transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'REJECT_ASYNC_OPERATION', 'FETCH_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'FETCH_PERSON_DATA_111.fetchStatus': 'FAILED'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing rejected async operation');\n      });\n    });\n    describe('WRITE async operations', function () {\n      it('should update state to show write async operation as pending state from initial state', function () {\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'UPDATE_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'WRITE'\n        });\n        var transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'BEGIN_ASYNC_OPERATION', 'UPDATE_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'UPDATE_PERSON_DATA_111.fetchStatus': 'PENDING'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing pending write async operation');\n      });\n      it('should update state to show write async operation as successful state from pending state', function () {\n        state = {\n          UPDATE_PERSON_DATA_111: {\n            descriptorId: 'UPDATE_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'UPDATE_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'WRITE'\n        });\n        var transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'RESOLVE_ASYNC_OPERATION', 'UPDATE_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'UPDATE_PERSON_DATA_111.fetchStatus': 'SUCCESSFUL'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing successful write async operation');\n      });\n      it('should update state to show write async operation as failed state from pending state', function () {\n        state = {\n          UPDATE_PERSON_DATA_111: {\n            descriptorId: 'UPDATE_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            message: null,\n            lastFetchStatusTime: 0,\n            lastDataStatusTime: 0,\n            personId: 111\n          }\n        };\n        (0, _asyncOperationManagerUtils.registerAsyncOperationDescriptors)({\n          descriptorId: 'UPDATE_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'WRITE'\n        });\n        var transformedState = (0, _asyncOperationManagerUtils.getStateForOperationAfterStep)(state, 'REJECT_ASYNC_OPERATION', 'UPDATE_PERSON_DATA', {\n          personId: 111\n        });\n        (0, _chai.expect)(transformedState).to.nested.include({\n          'UPDATE_PERSON_DATA_111.fetchStatus': 'FAILED'\n        });\n        (0, _chai.expect)(transformedState).to.matchSnapshot('updated state showing failed write async operation');\n      });\n    });\n  });\n});"]}