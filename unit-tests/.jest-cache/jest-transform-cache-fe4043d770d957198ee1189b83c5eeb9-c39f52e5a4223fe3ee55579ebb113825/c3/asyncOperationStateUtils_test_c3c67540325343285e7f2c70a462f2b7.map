{"version":3,"sources":["asyncOperationStateUtils_test.js"],"names":["require","_chai","_sinon","_interopRequireDefault","_asyncOperationStateUtils","obj","__esModule","default","describe","stub","registeredAsyncOperationDescriptors","beforeEach","console","afterEach","restore","it","asyncOperationDescriptor","descriptorId","requiredParams","operationType","debug","alwaysImmutable","minCacheTime","maxCacheTime","newState","updateAsyncOperationDescriptor","expect","to","matchSnapshot","asyncOperationDescriptors","UPDATE_PERSON_DATA","deep","include","parentOperationDescriptorId","callCount","equal","state","newAsyncOperation","fetchStatus","message","lastFetchStatusTime","lastDataStatusTime","personId","updateAsyncOperation","have","all","keys","asyncOperationUpdates","asyncOperation","dataStatus","asyncOperationKey","teamId","bulkUpdateAsyncOperations","getAsyncOperation","FETCH_PERSON_DATA_111","be","an","FETCH_ALL_PERSON_DATA","fetchPersonDataAsyncOperationDescriptor","FETCH_ALL_PERSON_DATA_FOR_ORG_22","orgId","FETCH_ALL_DATA_FOR_ORG_22","FETCH_ALL_PERSON_DATA_FOR_ORG","FETCH_ALL_DATA_FOR_ORG"],"mappings":"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","file":"asyncOperationStateUtils_test.js","sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _chai = require(\"chai\");\n\nvar _sinon = _interopRequireDefault(require(\"sinon\"));\n\nvar _asyncOperationStateUtils = _interopRequireDefault(require(\"../asyncOperationStateUtils\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-env jest */\ndescribe('asyncOperationStateUtils', () => {\n  describe('updateAsyncOperationDescriptor', () => {\n    let stub;\n    let registeredAsyncOperationDescriptors;\n    beforeEach(() => {\n      registeredAsyncOperationDescriptors = {};\n      stub = _sinon.default.stub(console, 'error');\n    });\n    afterEach(() => {\n      stub.restore();\n    });\n    it('should update state with an asyncOperationDescriptor', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n        // optional values\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000\n      };\n\n      const newState = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);\n\n      (0, _chai.expect)(newState).to.matchSnapshot('state with well formed asyncOperationDescriptor');\n    });\n    it('should update state with an asyncOperationDescriptor and default optional values', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE'\n      };\n\n      const asyncOperationDescriptors = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);\n\n      (0, _chai.expect)(asyncOperationDescriptors.UPDATE_PERSON_DATA).to.deep.include({\n        parentOperationDescriptorId: null,\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000\n      });\n    });\n    it('should throw an error if required descriptorId prop is not passed', () => {\n      const asyncOperationDescriptor = {\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n        // optional values\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000\n      };\n\n      _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);\n\n      (0, _chai.expect)(stub.callCount).to.equal(1);\n    });\n  });\n  describe('updateAsyncOperation', () => {\n    let state;\n    beforeEach(() => {\n      state = {};\n    });\n    it('should update state with an asyncOperation', () => {\n      const newAsyncOperation = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        fetchStatus: 'SUCCESSFUL',\n        message: null,\n        lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n        lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n        personId: 111\n      };\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE'\n      };\n\n      const newState = _asyncOperationStateUtils.default.updateAsyncOperation(state, 'UPDATE_PERSON_DATA_111', newAsyncOperation, asyncOperationDescriptor);\n\n      (0, _chai.expect)(newState).to.have.all.keys('UPDATE_PERSON_DATA_111');\n      (0, _chai.expect)(newState).to.matchSnapshot('state with well formed asyncOperation');\n    });\n  });\n  describe('bulkUpdateAsyncOperations', () => {\n    let state;\n    beforeEach(() => {\n      state = {};\n    });\n    it('should update state with multiple async operations', () => {\n      const asyncOperationUpdates = [{\n        asyncOperation: {\n          descriptorId: 'UPDATE_PERSON_DATA',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n          lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n          personId: 111\n        },\n        asyncOperationKey: 'UPDATE_PERSON_DATA_111',\n        asyncOperationDescriptor: {\n          descriptorId: 'UPDATE_PERSON_DATA',\n          requiredParams: ['personId'],\n          operationType: 'WRITE'\n        }\n      }, {\n        asyncOperation: {\n          descriptorId: 'UPDATE_TEAM_DATA',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-10-01T19:12:26.189Z',\n          lastDataStatusTime: '2018-10-01T19:12:27.189Z',\n          teamId: 2\n        },\n        asyncOperationKey: 'UPDATE_TEAM_DATA_2',\n        asyncOperationDescriptor: {\n          descriptorId: 'UPDATE_TEAM_DATA',\n          requiredParams: ['teamId'],\n          operationType: 'WRITE'\n        }\n      }];\n\n      const newState = _asyncOperationStateUtils.default.bulkUpdateAsyncOperations(state, asyncOperationUpdates);\n\n      (0, _chai.expect)(newState).to.have.all.keys('UPDATE_PERSON_DATA_111', 'UPDATE_TEAM_DATA_2');\n      (0, _chai.expect)(newState).to.matchSnapshot('state with multiple asyncOperations');\n    });\n  });\n  describe('getAsyncOperation', () => {\n    let state;\n    beforeEach(() => {\n      state = {};\n    });\n    it('should return an initial read asyncOperation', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n        descriptorId: 'FETCH_PERSON_DATA'\n      };\n\n      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {\n        personId: 111\n      });\n\n      (0, _chai.expect)(asyncOperation).to.deep.include({\n        fetchStatus: 'NULL',\n        dataStatus: 'ABSENT',\n        lastFetchStatusTime: 0,\n        lastDataStatusTime: 0\n      });\n      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');\n    });\n    it('should return an initial write asyncOperation', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n        descriptorId: 'UPDATE_PERSON_DATA'\n      };\n\n      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'UPDATE_PERSON_DATA_111', asyncOperationDescriptor, {\n        personId: 111\n      });\n\n      (0, _chai.expect)(asyncOperation).to.deep.include({\n        fetchStatus: 'NULL',\n        lastFetchStatusTime: 0\n      });\n      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');\n    });\n    it('should return a pending asyncOperation', () => {\n      state = {\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: 'PENDING',\n          dataStatus: 'ABSENT',\n          message: null,\n          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n          lastDataStatusTime: '2018-10-01T19:12:13.189Z',\n          personId: 111\n        }\n      };\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n        descriptorId: 'FETCH_PERSON_DATA'\n      };\n\n      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {\n        personId: 111\n      });\n\n      (0, _chai.expect)(asyncOperation).to.be.an('object');\n      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed pending asyncOperation');\n    });\n    it('should return a successful asyncOperation', () => {\n      state = {\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n          lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n          personId: 111\n        }\n      };\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n        descriptorId: 'FETCH_PERSON_DATA'\n      };\n\n      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {\n        personId: 111\n      });\n\n      (0, _chai.expect)(asyncOperation).to.be.an('object');\n      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation');\n    });\n    it('should return a successful asyncOperation with parentAsyncOperation metaData', () => {\n      state = {\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n          lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n          personId: 111\n        },\n        FETCH_ALL_PERSON_DATA: {\n          descriptorId: 'FETCH_ALL_PERSON_DATA',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-10-01T19:13:52.189Z',\n          lastDataStatusTime: '2018-10-01T19:13:56.189Z'\n        }\n      };\n      const registeredAsyncOperationDescriptors = {\n        FETCH_ALL_PERSON_DATA: {\n          descriptorId: 'FETCH_ALL_PERSON_DATA',\n          operationType: 'READ',\n          descriptorId: 'FETCH_ALL_PERSON_DATA'\n        }\n      };\n      const fetchPersonDataAsyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n        descriptorId: 'FETCH_PERSON_DATA',\n        // optional values\n        parentOperationDescriptorId: 'FETCH_ALL_PERSON_DATA'\n      };\n\n      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, 'FETCH_PERSON_DATA_111', fetchPersonDataAsyncOperationDescriptor, {\n        personId: 111\n      });\n\n      (0, _chai.expect)(asyncOperation).to.be.an('object');\n      (0, _chai.expect)(asyncOperation).to.deep.include({\n        lastFetchStatusTime: '2018-10-01T19:13:52.189Z',\n        lastDataStatusTime: '2018-10-01T19:13:56.189Z'\n      });\n      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData');\n    });\n    it('should return a successful asyncOperation with parentAsyncOperation metaData two levels deep', () => {\n      state = {\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-09-01T19:12:46.189Z',\n          lastDataStatusTime: '2018-09-01T19:12:53.189Z',\n          personId: 111\n        },\n        FETCH_ALL_PERSON_DATA_FOR_ORG_22: {\n          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-09-21T19:13:52.189Z',\n          lastDataStatusTime: '2018-09-21T19:13:56.189Z',\n          orgId: 22\n        },\n        FETCH_ALL_DATA_FOR_ORG_22: {\n          descriptorId: 'FETCH_ALL_DATA_FOR_ORG',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: '2018-10-01T19:16:52.189Z',\n          lastDataStatusTime: '2018-10-01T19:23:56.189Z',\n          orgId: 22\n        }\n      };\n      const registeredAsyncOperationDescriptors = {\n        FETCH_ALL_PERSON_DATA_FOR_ORG: {\n          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',\n          requiredParams: ['orgId'],\n          operationType: 'READ',\n          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',\n          parentOperationDescriptorId: 'FETCH_ALL_DATA_FOR_ORG'\n        },\n        FETCH_ALL_DATA_FOR_ORG: {\n          descriptorId: 'FETCH_ALL_DATA_FOR_ORG',\n          requiredParams: ['orgId'],\n          operationType: 'READ',\n          descriptorId: 'FETCH_ALL_DATA_FOR_ORG'\n        }\n      };\n      const fetchPersonDataAsyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['orgId', 'personId'],\n        descriptorId: 'FETCH_PERSON_DATA',\n        operationType: 'READ',\n        parentOperationDescriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG'\n      };\n\n      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, 'fetchPersonData_111', fetchPersonDataAsyncOperationDescriptor, {\n        personId: 111,\n        orgId: 22\n      });\n\n      (0, _chai.expect)(asyncOperation).to.be.an('object');\n      (0, _chai.expect)(asyncOperation).to.deep.include({\n        lastFetchStatusTime: '2018-10-01T19:16:52.189Z',\n        lastDataStatusTime: '2018-10-01T19:23:56.189Z'\n      });\n      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData two levels deep');\n    });\n  });\n});"]}