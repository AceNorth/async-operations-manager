37bc1d7183775b73ed05d110990af538
"use strict";

require("core-js/modules/web.dom.iterable");

var _chai = require("chai");

var _sinon = _interopRequireDefault(require("sinon"));

var _asyncOperationStateUtils = _interopRequireDefault(require("../asyncOperationStateUtils"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/* eslint-env jest */
describe('asyncOperationStateUtils', () => {
  describe('updateAsyncOperationDescriptor', () => {
    let stub;
    let registeredAsyncOperationDescriptors;
    beforeEach(() => {
      registeredAsyncOperationDescriptors = {};
      stub = _sinon.default.stub(console, 'error');
    });
    afterEach(() => {
      stub.restore();
    });
    it('should update state with an asyncOperationDescriptor', () => {
      const asyncOperationDescriptor = {
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE',
        // optional values
        debug: false,
        alwaysImmutable: false,
        minCacheTime: 5000,
        maxCacheTime: 60000
      };

      const newState = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);

      (0, _chai.expect)(newState).to.matchSnapshot('state with well formed asyncOperationDescriptor');
    });
    it('should update state with an asyncOperationDescriptor and default optional values', () => {
      const asyncOperationDescriptor = {
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE'
      };

      const asyncOperationDescriptors = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);

      (0, _chai.expect)(asyncOperationDescriptors.UPDATE_PERSON_DATA).to.deep.include({
        parentOperationDescriptorId: null,
        debug: false,
        alwaysImmutable: false,
        minCacheTime: 5000,
        maxCacheTime: 60000
      });
    });
    it('should throw an error if required descriptorId prop is not passed', () => {
      const asyncOperationDescriptor = {
        requiredParams: ['personId'],
        operationType: 'WRITE',
        // optional values
        debug: false,
        alwaysImmutable: false,
        minCacheTime: 5000,
        maxCacheTime: 60000
      };

      _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);

      (0, _chai.expect)(stub.callCount).to.equal(1);
    });
  });
  describe('updateAsyncOperation', () => {
    let state;
    beforeEach(() => {
      state = {};
    });
    it('should update state with an asyncOperation', () => {
      const newAsyncOperation = {
        descriptorId: 'UPDATE_PERSON_DATA',
        fetchStatus: 'SUCCESSFUL',
        message: null,
        lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
        lastDataStatusTime: '2018-10-01T19:12:53.189Z',
        personId: 111
      };
      const asyncOperationDescriptor = {
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE'
      };

      const newState = _asyncOperationStateUtils.default.updateAsyncOperation(state, 'UPDATE_PERSON_DATA_111', newAsyncOperation, asyncOperationDescriptor);

      (0, _chai.expect)(newState).to.have.all.keys('UPDATE_PERSON_DATA_111');
      (0, _chai.expect)(newState).to.matchSnapshot('state with well formed asyncOperation');
    });
  });
  describe('bulkUpdateAsyncOperations', () => {
    let state;
    beforeEach(() => {
      state = {};
    });
    it('should update state with multiple async operations', () => {
      const asyncOperationUpdates = [{
        asyncOperation: {
          descriptorId: 'UPDATE_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:53.189Z',
          personId: 111
        },
        asyncOperationKey: 'UPDATE_PERSON_DATA_111',
        asyncOperationDescriptor: {
          descriptorId: 'UPDATE_PERSON_DATA',
          requiredParams: ['personId'],
          operationType: 'WRITE'
        }
      }, {
        asyncOperation: {
          descriptorId: 'UPDATE_TEAM_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:26.189Z',
          lastDataStatusTime: '2018-10-01T19:12:27.189Z',
          teamId: 2
        },
        asyncOperationKey: 'UPDATE_TEAM_DATA_2',
        asyncOperationDescriptor: {
          descriptorId: 'UPDATE_TEAM_DATA',
          requiredParams: ['teamId'],
          operationType: 'WRITE'
        }
      }];

      const newState = _asyncOperationStateUtils.default.bulkUpdateAsyncOperations(state, asyncOperationUpdates);

      (0, _chai.expect)(newState).to.have.all.keys('UPDATE_PERSON_DATA_111', 'UPDATE_TEAM_DATA_2');
      (0, _chai.expect)(newState).to.matchSnapshot('state with multiple asyncOperations');
    });
  });
  describe('getAsyncOperation', () => {
    let state;
    beforeEach(() => {
      state = {};
    });
    it('should return an initial read asyncOperation', () => {
      const asyncOperationDescriptor = {
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ',
        descriptorId: 'FETCH_PERSON_DATA'
      };

      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.deep.include({
        fetchStatus: 'NULL',
        dataStatus: 'ABSENT',
        lastFetchStatusTime: 0,
        lastDataStatusTime: 0
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');
    });
    it('should return an initial write asyncOperation', () => {
      const asyncOperationDescriptor = {
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE',
        descriptorId: 'UPDATE_PERSON_DATA'
      };

      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'UPDATE_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.deep.include({
        fetchStatus: 'NULL',
        lastFetchStatusTime: 0
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');
    });
    it('should return a pending asyncOperation', () => {
      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'PENDING',
          dataStatus: 'ABSENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:13.189Z',
          personId: 111
        }
      };
      const asyncOperationDescriptor = {
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ',
        descriptorId: 'FETCH_PERSON_DATA'
      };

      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed pending asyncOperation');
    });
    it('should return a successful asyncOperation', () => {
      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:53.189Z',
          personId: 111
        }
      };
      const asyncOperationDescriptor = {
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ',
        descriptorId: 'FETCH_PERSON_DATA'
      };

      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation');
    });
    it('should return a successful asyncOperation with parentAsyncOperation metaData', () => {
      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:53.189Z',
          personId: 111
        },
        FETCH_ALL_PERSON_DATA: {
          descriptorId: 'FETCH_ALL_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:13:52.189Z',
          lastDataStatusTime: '2018-10-01T19:13:56.189Z'
        }
      };
      const registeredAsyncOperationDescriptors = {
        FETCH_ALL_PERSON_DATA: {
          descriptorId: 'FETCH_ALL_PERSON_DATA',
          operationType: 'READ',
          descriptorId: 'FETCH_ALL_PERSON_DATA'
        }
      };
      const fetchPersonDataAsyncOperationDescriptor = {
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ',
        descriptorId: 'FETCH_PERSON_DATA',
        // optional values
        parentOperationDescriptorId: 'FETCH_ALL_PERSON_DATA'
      };

      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, 'FETCH_PERSON_DATA_111', fetchPersonDataAsyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.deep.include({
        lastFetchStatusTime: '2018-10-01T19:13:52.189Z',
        lastDataStatusTime: '2018-10-01T19:13:56.189Z'
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData');
    });
    it('should return a successful asyncOperation with parentAsyncOperation metaData two levels deep', () => {
      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-09-01T19:12:46.189Z',
          lastDataStatusTime: '2018-09-01T19:12:53.189Z',
          personId: 111
        },
        FETCH_ALL_PERSON_DATA_FOR_ORG_22: {
          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-09-21T19:13:52.189Z',
          lastDataStatusTime: '2018-09-21T19:13:56.189Z',
          orgId: 22
        },
        FETCH_ALL_DATA_FOR_ORG_22: {
          descriptorId: 'FETCH_ALL_DATA_FOR_ORG',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:16:52.189Z',
          lastDataStatusTime: '2018-10-01T19:23:56.189Z',
          orgId: 22
        }
      };
      const registeredAsyncOperationDescriptors = {
        FETCH_ALL_PERSON_DATA_FOR_ORG: {
          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',
          requiredParams: ['orgId'],
          operationType: 'READ',
          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',
          parentOperationDescriptorId: 'FETCH_ALL_DATA_FOR_ORG'
        },
        FETCH_ALL_DATA_FOR_ORG: {
          descriptorId: 'FETCH_ALL_DATA_FOR_ORG',
          requiredParams: ['orgId'],
          operationType: 'READ',
          descriptorId: 'FETCH_ALL_DATA_FOR_ORG'
        }
      };
      const fetchPersonDataAsyncOperationDescriptor = {
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['orgId', 'personId'],
        descriptorId: 'FETCH_PERSON_DATA',
        operationType: 'READ',
        parentOperationDescriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG'
      };

      const asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, 'fetchPersonData_111', fetchPersonDataAsyncOperationDescriptor, {
        personId: 111,
        orgId: 22
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.deep.include({
        lastFetchStatusTime: '2018-10-01T19:16:52.189Z',
        lastDataStatusTime: '2018-10-01T19:23:56.189Z'
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData two levels deep');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jT3BlcmF0aW9uU3RhdGVVdGlsc190ZXN0LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJfY2hhaSIsIl9zaW5vbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZXNjcmliZSIsInN0dWIiLCJyZWdpc3RlcmVkQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyIsImJlZm9yZUVhY2giLCJjb25zb2xlIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsIml0IiwiYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yIiwiZGVzY3JpcHRvcklkIiwicmVxdWlyZWRQYXJhbXMiLCJvcGVyYXRpb25UeXBlIiwiZGVidWciLCJhbHdheXNJbW11dGFibGUiLCJtaW5DYWNoZVRpbWUiLCJtYXhDYWNoZVRpbWUiLCJuZXdTdGF0ZSIsInVwZGF0ZUFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciIsImV4cGVjdCIsInRvIiwibWF0Y2hTbmFwc2hvdCIsImFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMiLCJVUERBVEVfUEVSU09OX0RBVEEiLCJkZWVwIiwiaW5jbHVkZSIsInBhcmVudE9wZXJhdGlvbkRlc2NyaXB0b3JJZCIsImNhbGxDb3VudCIsImVxdWFsIiwic3RhdGUiLCJuZXdBc3luY09wZXJhdGlvbiIsImZldGNoU3RhdHVzIiwibWVzc2FnZSIsImxhc3RGZXRjaFN0YXR1c1RpbWUiLCJsYXN0RGF0YVN0YXR1c1RpbWUiLCJwZXJzb25JZCIsInVwZGF0ZUFzeW5jT3BlcmF0aW9uIiwiaGF2ZSIsImFsbCIsImtleXMiLCJhc3luY09wZXJhdGlvblVwZGF0ZXMiLCJhc3luY09wZXJhdGlvbiIsImRhdGFTdGF0dXMiLCJhc3luY09wZXJhdGlvbktleSIsInRlYW1JZCIsImJ1bGtVcGRhdGVBc3luY09wZXJhdGlvbnMiLCJnZXRBc3luY09wZXJhdGlvbiIsIkZFVENIX1BFUlNPTl9EQVRBXzExMSIsImJlIiwiYW4iLCJGRVRDSF9BTExfUEVSU09OX0RBVEEiLCJmZXRjaFBlcnNvbkRhdGFBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IiLCJGRVRDSF9BTExfUEVSU09OX0RBVEFfRk9SX09SR18yMiIsIm9yZ0lkIiwiRkVUQ0hfQUxMX0RBVEFfRk9SX09SR18yMiIsIkZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHIiwiRkVUQ0hfQUxMX0RBVEFfRk9SX09SRyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLFFBQVEsa0NBQVI7O0FBRUEsSUFBSUMsUUFBUUQsUUFBUSxNQUFSLENBQVo7O0FBRUEsSUFBSUUsU0FBU0MsdUJBQXVCSCxRQUFRLE9BQVIsQ0FBdkIsQ0FBYjs7QUFFQSxJQUFJSSw0QkFBNEJELHVCQUF1QkgsUUFBUSw2QkFBUixDQUF2QixDQUFoQzs7QUFFQSxTQUFTRyxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDO0FBQXdEOztBQUUvRjtBQUNBRyxTQUFTLDBCQUFULEVBQXFDLE1BQU07QUFDekNBLFdBQVMsZ0NBQVQsRUFBMkMsTUFBTTtBQUMvQyxRQUFJQyxJQUFKO0FBQ0EsUUFBSUMsbUNBQUo7QUFDQUMsZUFBVyxNQUFNO0FBQ2ZELDRDQUFzQyxFQUF0QztBQUNBRCxhQUFPUCxPQUFPSyxPQUFQLENBQWVFLElBQWYsQ0FBb0JHLE9BQXBCLEVBQTZCLE9BQTdCLENBQVA7QUFDRCxLQUhEO0FBSUFDLGNBQVUsTUFBTTtBQUNkSixXQUFLSyxPQUFMO0FBQ0QsS0FGRDtBQUdBQyxPQUFHLHNEQUFILEVBQTJELE1BQU07QUFDL0QsWUFBTUMsMkJBQTJCO0FBQy9CQyxzQkFBYyxvQkFEaUI7QUFFL0JDLHdCQUFnQixDQUFDLFVBQUQsQ0FGZTtBQUcvQkMsdUJBQWUsT0FIZ0I7QUFJL0I7QUFDQUMsZUFBTyxLQUx3QjtBQU0vQkMseUJBQWlCLEtBTmM7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TGtCLGVBQU87QUFGOEssT0FBaEssQ0FBdkI7O0FBS0EsT0FBQyxHQUFHM0QsTUFBTXlCLE1BQVYsRUFBa0JzQixjQUFsQixFQUFrQ3JCLEVBQWxDLENBQXFDNEIsRUFBckMsQ0FBd0NDLEVBQXhDLENBQTJDLFFBQTNDO0FBQ0EsT0FBQyxHQUFHdkQsTUFBTXlCLE1BQVYsRUFBa0JzQixjQUFsQixFQUFrQ3JCLEVBQWxDLENBQXFDSSxJQUFyQyxDQUEwQ0MsT0FBMUMsQ0FBa0Q7QUFDaERRLDZCQUFxQiwwQkFEMkI7QUFFaERDLDRCQUFvQjtBQUY0QixPQUFsRDtBQUlBLE9BQUMsR0FBR3hDLE1BQU15QixNQUFWLEVBQWtCc0IsY0FBbEIsRUFBa0NyQixFQUFsQyxDQUFxQ0MsYUFBckMsQ0FBbUQsMEZBQW5EO0FBQ0QsS0FoRUQ7QUFpRUQsR0EvTUQ7QUFnTkQsQ0FwVkQiLCJmaWxlIjoiYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzX3Rlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpO1xuXG52YXIgX2NoYWkgPSByZXF1aXJlKFwiY2hhaVwiKTtcblxudmFyIF9zaW5vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInNpbm9uXCIpKTtcblxudmFyIF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9hc3luY09wZXJhdGlvblN0YXRlVXRpbHNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZW52IGplc3QgKi9cbmRlc2NyaWJlKCdhc3luY09wZXJhdGlvblN0YXRlVXRpbHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCd1cGRhdGVBc3luY09wZXJhdGlvbkRlc2NyaXB0b3InLCAoKSA9PiB7XG4gICAgbGV0IHN0dWI7XG4gICAgbGV0IHJlZ2lzdGVyZWRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzO1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSB7fTtcbiAgICAgIHN0dWIgPSBfc2lub24uZGVmYXVsdC5zdHViKGNvbnNvbGUsICdlcnJvcicpO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBzdHViLnJlc3RvcmUoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSBzdGF0ZSB3aXRoIGFuIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1dSSVRFJyxcbiAgICAgICAgLy8gb3B0aW9uYWwgdmFsdWVzXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgYWx3YXlzSW1tdXRhYmxlOiBmYWxzZSxcbiAgICAgICAgbWluQ2FjaGVUaW1lOiA1MDAwLFxuICAgICAgICBtYXhDYWNoZVRpbWU6IDYwMDAwXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC51cGRhdGVBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IocmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcik7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKG5ld1N0YXRlKS50by5tYXRjaFNuYXBzaG90KCdzdGF0ZSB3aXRoIHdlbGwgZm9ybWVkIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcicpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdXBkYXRlIHN0YXRlIHdpdGggYW4gYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yIGFuZCBkZWZhdWx0IG9wdGlvbmFsIHZhbHVlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1dSSVRFJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC51cGRhdGVBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IocmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcik7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMuVVBEQVRFX1BFUlNPTl9EQVRBKS50by5kZWVwLmluY2x1ZGUoe1xuICAgICAgICBwYXJlbnRPcGVyYXRpb25EZXNjcmlwdG9ySWQ6IG51bGwsXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgYWx3YXlzSW1tdXRhYmxlOiBmYWxzZSxcbiAgICAgICAgbWluQ2FjaGVUaW1lOiA1MDAwLFxuICAgICAgICBtYXhDYWNoZVRpbWU6IDYwMDAwXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHJlcXVpcmVkIGRlc2NyaXB0b3JJZCBwcm9wIGlzIG5vdCBwYXNzZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IgPSB7XG4gICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ3BlcnNvbklkJ10sXG4gICAgICAgIG9wZXJhdGlvblR5cGU6ICdXUklURScsXG4gICAgICAgIC8vIG9wdGlvbmFsIHZhbHVlc1xuICAgICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgICAgIGFsd2F5c0ltbXV0YWJsZTogZmFsc2UsXG4gICAgICAgIG1pbkNhY2hlVGltZTogNTAwMCxcbiAgICAgICAgbWF4Q2FjaGVUaW1lOiA2MDAwMFxuICAgICAgfTtcblxuICAgICAgX2FzeW5jT3BlcmF0aW9uU3RhdGVVdGlscy5kZWZhdWx0LnVwZGF0ZUFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcihyZWdpc3RlcmVkQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycywgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yKTtcblxuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoc3R1Yi5jYWxsQ291bnQpLnRvLmVxdWFsKDEpO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3VwZGF0ZUFzeW5jT3BlcmF0aW9uJywgKCkgPT4ge1xuICAgIGxldCBzdGF0ZTtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgc3RhdGUgd2l0aCBhbiBhc3luY09wZXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IG5ld0FzeW5jT3BlcmF0aW9uID0ge1xuICAgICAgICBkZXNjcmlwdG9ySWQ6ICdVUERBVEVfUEVSU09OX0RBVEEnLFxuICAgICAgICBmZXRjaFN0YXR1czogJ1NVQ0NFU1NGVUwnLFxuICAgICAgICBtZXNzYWdlOiBudWxsLFxuICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo0Ni4xODlaJyxcbiAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo1My4xODlaJyxcbiAgICAgICAgcGVyc29uSWQ6IDExMVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1dSSVRFJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV3U3RhdGUgPSBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzLmRlZmF1bHQudXBkYXRlQXN5bmNPcGVyYXRpb24oc3RhdGUsICdVUERBVEVfUEVSU09OX0RBVEFfMTExJywgbmV3QXN5bmNPcGVyYXRpb24sIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcik7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKG5ld1N0YXRlKS50by5oYXZlLmFsbC5rZXlzKCdVUERBVEVfUEVSU09OX0RBVEFfMTExJyk7XG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShuZXdTdGF0ZSkudG8ubWF0Y2hTbmFwc2hvdCgnc3RhdGUgd2l0aCB3ZWxsIGZvcm1lZCBhc3luY09wZXJhdGlvbicpO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2J1bGtVcGRhdGVBc3luY09wZXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgbGV0IHN0YXRlO1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSBzdGF0ZSB3aXRoIG11bHRpcGxlIGFzeW5jIG9wZXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBhc3luY09wZXJhdGlvblVwZGF0ZXMgPSBbe1xuICAgICAgICBhc3luY09wZXJhdGlvbjoge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ1VQREFURV9QRVJTT05fREFUQScsXG4gICAgICAgICAgZmV0Y2hTdGF0dXM6ICdTVUNDRVNTRlVMJyxcbiAgICAgICAgICBkYXRhU3RhdHVzOiAnUFJFU0VOVCcsXG4gICAgICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo0Ni4xODlaJyxcbiAgICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEyOjUzLjE4OVonLFxuICAgICAgICAgIHBlcnNvbklkOiAxMTFcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmNPcGVyYXRpb25LZXk6ICdVUERBVEVfUEVSU09OX0RBVEFfMTExJyxcbiAgICAgICAgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgICByZXF1aXJlZFBhcmFtczogWydwZXJzb25JZCddLFxuICAgICAgICAgIG9wZXJhdGlvblR5cGU6ICdXUklURSdcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBhc3luY09wZXJhdGlvbjoge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ1VQREFURV9URUFNX0RBVEEnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTI6MjYuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjoyNy4xODlaJyxcbiAgICAgICAgICB0ZWFtSWQ6IDJcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmNPcGVyYXRpb25LZXk6ICdVUERBVEVfVEVBTV9EQVRBXzInLFxuICAgICAgICBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3I6IHtcbiAgICAgICAgICBkZXNjcmlwdG9ySWQ6ICdVUERBVEVfVEVBTV9EQVRBJyxcbiAgICAgICAgICByZXF1aXJlZFBhcmFtczogWyd0ZWFtSWQnXSxcbiAgICAgICAgICBvcGVyYXRpb25UeXBlOiAnV1JJVEUnXG4gICAgICAgIH1cbiAgICAgIH1dO1xuXG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC5idWxrVXBkYXRlQXN5bmNPcGVyYXRpb25zKHN0YXRlLCBhc3luY09wZXJhdGlvblVwZGF0ZXMpO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShuZXdTdGF0ZSkudG8uaGF2ZS5hbGwua2V5cygnVVBEQVRFX1BFUlNPTl9EQVRBXzExMScsICdVUERBVEVfVEVBTV9EQVRBXzInKTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKG5ld1N0YXRlKS50by5tYXRjaFNuYXBzaG90KCdzdGF0ZSB3aXRoIG11bHRpcGxlIGFzeW5jT3BlcmF0aW9ucycpO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2dldEFzeW5jT3BlcmF0aW9uJywgKCkgPT4ge1xuICAgIGxldCBzdGF0ZTtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gaW5pdGlhbCByZWFkIGFzeW5jT3BlcmF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yID0ge1xuICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9QRVJTT05fREFUQScsXG4gICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ3BlcnNvbklkJ10sXG4gICAgICAgIG9wZXJhdGlvblR5cGU6ICdSRUFEJyxcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBhc3luY09wZXJhdGlvbiA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC5nZXRBc3luY09wZXJhdGlvbihzdGF0ZSwge30sICdGRVRDSF9QRVJTT05fREFUQV8xMTEnLCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IsIHtcbiAgICAgICAgcGVyc29uSWQ6IDExMVxuICAgICAgfSk7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5kZWVwLmluY2x1ZGUoe1xuICAgICAgICBmZXRjaFN0YXR1czogJ05VTEwnLFxuICAgICAgICBkYXRhU3RhdHVzOiAnQUJTRU5UJyxcbiAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogMCxcbiAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAwXG4gICAgICB9KTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5tYXRjaFNuYXBzaG90KCd3ZWxsIGZvcm1lZCBpbml0aWFsIGFzeW5jT3BlcmF0aW9uJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gaW5pdGlhbCB3cml0ZSBhc3luY09wZXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1dSSVRFJyxcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgYXN5bmNPcGVyYXRpb24gPSBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzLmRlZmF1bHQuZ2V0QXN5bmNPcGVyYXRpb24oc3RhdGUsIHt9LCAnVVBEQVRFX1BFUlNPTl9EQVRBXzExMScsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciwge1xuICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICB9KTtcblxuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLmRlZXAuaW5jbHVkZSh7XG4gICAgICAgIGZldGNoU3RhdHVzOiAnTlVMTCcsXG4gICAgICAgIGxhc3RGZXRjaFN0YXR1c1RpbWU6IDBcbiAgICAgIH0pO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLm1hdGNoU25hcHNob3QoJ3dlbGwgZm9ybWVkIGluaXRpYWwgYXN5bmNPcGVyYXRpb24nKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHBlbmRpbmcgYXN5bmNPcGVyYXRpb24nLCAoKSA9PiB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgRkVUQ0hfUEVSU09OX0RBVEFfMTExOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnUEVORElORycsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ0FCU0VOVCcsXG4gICAgICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo0Ni4xODlaJyxcbiAgICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEyOjEzLjE4OVonLFxuICAgICAgICAgIHBlcnNvbklkOiAxMTFcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICByZXF1aXJlZFBhcmFtczogWydwZXJzb25JZCddLFxuICAgICAgICBvcGVyYXRpb25UeXBlOiAnUkVBRCcsXG4gICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX1BFUlNPTl9EQVRBJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgYXN5bmNPcGVyYXRpb24gPSBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzLmRlZmF1bHQuZ2V0QXN5bmNPcGVyYXRpb24oc3RhdGUsIHt9LCAnRkVUQ0hfUEVSU09OX0RBVEFfMTExJywgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yLCB7XG4gICAgICAgIHBlcnNvbklkOiAxMTFcbiAgICAgIH0pO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShhc3luY09wZXJhdGlvbikudG8uYmUuYW4oJ29iamVjdCcpO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLm1hdGNoU25hcHNob3QoJ3dlbGwgZm9ybWVkIHBlbmRpbmcgYXN5bmNPcGVyYXRpb24nKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHN1Y2Nlc3NmdWwgYXN5bmNPcGVyYXRpb24nLCAoKSA9PiB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgRkVUQ0hfUEVSU09OX0RBVEFfMTExOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTI6NDYuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo1My4xODlaJyxcbiAgICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IgPSB7XG4gICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1JFQUQnLFxuICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9QRVJTT05fREFUQSdcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGFzeW5jT3BlcmF0aW9uID0gX2FzeW5jT3BlcmF0aW9uU3RhdGVVdGlscy5kZWZhdWx0LmdldEFzeW5jT3BlcmF0aW9uKHN0YXRlLCB7fSwgJ0ZFVENIX1BFUlNPTl9EQVRBXzExMScsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciwge1xuICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICB9KTtcblxuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5tYXRjaFNuYXBzaG90KCd3ZWxsIGZvcm1lZCBzdWNjZXNzZnVsIGFzeW5jT3BlcmF0aW9uJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBzdWNjZXNzZnVsIGFzeW5jT3BlcmF0aW9uIHdpdGggcGFyZW50QXN5bmNPcGVyYXRpb24gbWV0YURhdGEnLCAoKSA9PiB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgRkVUQ0hfUEVSU09OX0RBVEFfMTExOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTI6NDYuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo1My4xODlaJyxcbiAgICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICAgIH0sXG4gICAgICAgIEZFVENIX0FMTF9QRVJTT05fREFUQToge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9QRVJTT05fREFUQScsXG4gICAgICAgICAgZmV0Y2hTdGF0dXM6ICdTVUNDRVNTRlVMJyxcbiAgICAgICAgICBkYXRhU3RhdHVzOiAnUFJFU0VOVCcsXG4gICAgICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMzo1Mi4xODlaJyxcbiAgICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEzOjU2LjE4OVonXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCByZWdpc3RlcmVkQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgRkVUQ0hfQUxMX1BFUlNPTl9EQVRBOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfQUxMX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgICBvcGVyYXRpb25UeXBlOiAnUkVBRCcsXG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfQUxMX1BFUlNPTl9EQVRBJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgZmV0Y2hQZXJzb25EYXRhQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yID0ge1xuICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9QRVJTT05fREFUQScsXG4gICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ3BlcnNvbklkJ10sXG4gICAgICAgIG9wZXJhdGlvblR5cGU6ICdSRUFEJyxcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICAvLyBvcHRpb25hbCB2YWx1ZXNcbiAgICAgICAgcGFyZW50T3BlcmF0aW9uRGVzY3JpcHRvcklkOiAnRkVUQ0hfQUxMX1BFUlNPTl9EQVRBJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgYXN5bmNPcGVyYXRpb24gPSBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzLmRlZmF1bHQuZ2V0QXN5bmNPcGVyYXRpb24oc3RhdGUsIHJlZ2lzdGVyZWRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzLCAnRkVUQ0hfUEVSU09OX0RBVEFfMTExJywgZmV0Y2hQZXJzb25EYXRhQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yLCB7XG4gICAgICAgIHBlcnNvbklkOiAxMTFcbiAgICAgIH0pO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShhc3luY09wZXJhdGlvbikudG8uYmUuYW4oJ29iamVjdCcpO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLmRlZXAuaW5jbHVkZSh7XG4gICAgICAgIGxhc3RGZXRjaFN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEzOjUyLjE4OVonLFxuICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEzOjU2LjE4OVonXG4gICAgICB9KTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5tYXRjaFNuYXBzaG90KCd3ZWxsIGZvcm1lZCBzdWNjZXNzZnVsIGFzeW5jT3BlcmF0aW9uIHdpdGggcGFyZW50QXN5bmNPcGVyYXRpb24gbWV0YURhdGEnKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHN1Y2Nlc3NmdWwgYXN5bmNPcGVyYXRpb24gd2l0aCBwYXJlbnRBc3luY09wZXJhdGlvbiBtZXRhRGF0YSB0d28gbGV2ZWxzIGRlZXAnLCAoKSA9PiB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgRkVUQ0hfUEVSU09OX0RBVEFfMTExOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMDktMDFUMTk6MTI6NDYuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0wOS0wMVQxOToxMjo1My4xODlaJyxcbiAgICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICAgIH0sXG4gICAgICAgIEZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHXzIyOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfQUxMX1BFUlNPTl9EQVRBX0ZPUl9PUkcnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMDktMjFUMTk6MTM6NTIuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0wOS0yMVQxOToxMzo1Ni4xODlaJyxcbiAgICAgICAgICBvcmdJZDogMjJcbiAgICAgICAgfSxcbiAgICAgICAgRkVUQ0hfQUxMX0RBVEFfRk9SX09SR18yMjoge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9EQVRBX0ZPUl9PUkcnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTY6NTIuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToyMzo1Ni4xODlaJyxcbiAgICAgICAgICBvcmdJZDogMjJcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlZ2lzdGVyZWRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzID0ge1xuICAgICAgICBGRVRDSF9BTExfUEVSU09OX0RBVEFfRk9SX09SRzoge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHJyxcbiAgICAgICAgICByZXF1aXJlZFBhcmFtczogWydvcmdJZCddLFxuICAgICAgICAgIG9wZXJhdGlvblR5cGU6ICdSRUFEJyxcbiAgICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9BTExfUEVSU09OX0RBVEFfRk9SX09SRycsXG4gICAgICAgICAgcGFyZW50T3BlcmF0aW9uRGVzY3JpcHRvcklkOiAnRkVUQ0hfQUxMX0RBVEFfRk9SX09SRydcbiAgICAgICAgfSxcbiAgICAgICAgRkVUQ0hfQUxMX0RBVEFfRk9SX09SRzoge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9EQVRBX0ZPUl9PUkcnLFxuICAgICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ29yZ0lkJ10sXG4gICAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1JFQUQnLFxuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9EQVRBX0ZPUl9PUkcnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBmZXRjaFBlcnNvbkRhdGFBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IgPSB7XG4gICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsnb3JnSWQnLCAncGVyc29uSWQnXSxcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICBvcGVyYXRpb25UeXBlOiAnUkVBRCcsXG4gICAgICAgIHBhcmVudE9wZXJhdGlvbkRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgYXN5bmNPcGVyYXRpb24gPSBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzLmRlZmF1bHQuZ2V0QXN5bmNPcGVyYXRpb24oc3RhdGUsIHJlZ2lzdGVyZWRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzLCAnZmV0Y2hQZXJzb25EYXRhXzExMScsIGZldGNoUGVyc29uRGF0YUFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciwge1xuICAgICAgICBwZXJzb25JZDogMTExLFxuICAgICAgICBvcmdJZDogMjJcbiAgICAgIH0pO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShhc3luY09wZXJhdGlvbikudG8uYmUuYW4oJ29iamVjdCcpO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLmRlZXAuaW5jbHVkZSh7XG4gICAgICAgIGxhc3RGZXRjaFN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjE2OjUyLjE4OVonLFxuICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjIzOjU2LjE4OVonXG4gICAgICB9KTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5tYXRjaFNuYXBzaG90KCd3ZWxsIGZvcm1lZCBzdWNjZXNzZnVsIGFzeW5jT3BlcmF0aW9uIHdpdGggcGFyZW50QXN5bmNPcGVyYXRpb24gbWV0YURhdGEgdHdvIGxldmVscyBkZWVwJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il19