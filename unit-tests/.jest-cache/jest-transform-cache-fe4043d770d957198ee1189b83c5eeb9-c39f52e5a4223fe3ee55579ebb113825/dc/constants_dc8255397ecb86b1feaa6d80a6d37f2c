d24546800715528ae11fca84298c2422
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DATA_STATUS = exports.FETCH_STATUS = exports.ASYNC_OPERATION_STEPS = exports.ASYNC_OPERATION_TYPES = exports.readAsyncOperationFieldsToPullFromParent = void 0;

var _helpers = require("./helpers");

const readAsyncOperationFieldsToPullFromParent = ['fetchStatus', 'dataStatus', 'lastFetchStatusTime', 'lastDataStatusTime'];
exports.readAsyncOperationFieldsToPullFromParent = readAsyncOperationFieldsToPullFromParent;
const ASYNC_OPERATION_STEPS = (0, _helpers.makeConstantsObject)(['BEGIN_ASYNC_OPERATION', 'RESOLVE_ASYNC_OPERATION', 'REJECT_ASYNC_OPERATION']);
exports.ASYNC_OPERATION_STEPS = ASYNC_OPERATION_STEPS;
const ASYNC_OPERATION_TYPES = (0, _helpers.makeConstantsObject)(['READ', 'WRITE']);
/**
 * In general this is used to note the status of the last fetch attempted for a backend operation.
 */

exports.ASYNC_OPERATION_TYPES = ASYNC_OPERATION_TYPES;
const FETCH_STATUS = (0, _helpers.makeConstantsObject)([// Default: we haven't tried to fetch yet
'NULL', // Indicates that a request is in flight.
'PENDING', // Indicates that the request completed and all is well
'SUCCESSFUL', // Indicates that something went wrong: the request didn't complete, or it completed with
// an http, payload/parsing, or business logic error.
// @TODO: Should we distinguish between "request completed by result failed" vs
//        "request didn't complete due to timeout or network error"?
'FAILED']);
/**
 * In general this is used to note the presence of data for a specific backend operation.
 */

exports.FETCH_STATUS = FETCH_STATUS;
const DATA_STATUS = (0, _helpers.makeConstantsObject)([// Default: we haven't received anything
'ABSENT', // Result was received and we have data
'PRESENT']);
exports.DATA_STATUS = DATA_STATUS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRBVEFfU1RBVFVTIiwiRkVUQ0hfU1RBVFVTIiwiQVNZTkNfT1BFUkFUSU9OX1NURVBTIiwiQVNZTkNfT1BFUkFUSU9OX1RZUEVTIiwicmVhZEFzeW5jT3BlcmF0aW9uRmllbGRzVG9QdWxsRnJvbVBhcmVudCIsIl9oZWxwZXJzIiwicmVxdWlyZSIsIm1ha2VDb25zdGFudHNPYmplY3QiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTztBQURvQyxDQUE3QztBQUdBRCxRQUFRRSxXQUFSLEdBQXNCRixRQUFRRyxZQUFSLEdBQXVCSCxRQUFRSSxxQkFBUixHQUFnQ0osUUFBUUsscUJBQVIsR0FBZ0NMLFFBQVFNLHdDQUFSLEdBQW1ELEtBQUssQ0FBcks7O0FBRUEsSUFBSUMsV0FBV0MsUUFBUSxXQUFSLENBQWY7O0FBRUEsTUFBTUYsMkNBQTJDLENBQUMsYUFBRCxFQUFnQixZQUFoQixFQUE4QixxQkFBOUIsRUFBcUQsb0JBQXJELENBQWpEO0FBQ0FOLFFBQVFNLHdDQUFSLEdBQW1EQSx3Q0FBbkQ7QUFDQSxNQUFNRix3QkFBd0IsQ0FBQyxHQUFHRyxTQUFTRSxtQkFBYixFQUFrQyxDQUFDLHVCQUFELEVBQTBCLHlCQUExQixFQUFxRCx3QkFBckQsQ0FBbEMsQ0FBOUI7QUFDQVQsUUFBUUkscUJBQVIsR0FBZ0NBLHFCQUFoQztBQUNBLE1BQU1DLHdCQUF3QixDQUFDLEdBQUdFLFNBQVNFLG1CQUFiLEVBQWtDLENBQUMsTUFBRCxFQUFTLE9BQVQsQ0FBbEMsQ0FBOUI7QUFDQTs7OztBQUlBVCxRQUFRSyxxQkFBUixHQUFnQ0EscUJBQWhDO0FBQ0EsTUFBTUYsZUFBZSxDQUFDLEdBQUdJLFNBQVNFLG1CQUFiLEVBQWtDLENBQUM7QUFDeEQsTUFEdUQsRUFDL0M7QUFDUixTQUZ1RCxFQUU1QztBQUNYLFlBSHVELEVBR3pDO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsUUFQdUQsQ0FBbEMsQ0FBckI7QUFRQTs7OztBQUlBVCxRQUFRRyxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBLE1BQU1ELGNBQWMsQ0FBQyxHQUFHSyxTQUFTRSxtQkFBYixFQUFrQyxDQUFDO0FBQ3ZELFFBRHNELEVBQzVDO0FBQ1YsU0FGc0QsQ0FBbEMsQ0FBcEI7QUFHQVQsUUFBUUUsV0FBUixHQUFzQkEsV0FBdEIiLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkRBVEFfU1RBVFVTID0gZXhwb3J0cy5GRVRDSF9TVEFUVVMgPSBleHBvcnRzLkFTWU5DX09QRVJBVElPTl9TVEVQUyA9IGV4cG9ydHMuQVNZTkNfT1BFUkFUSU9OX1RZUEVTID0gZXhwb3J0cy5yZWFkQXN5bmNPcGVyYXRpb25GaWVsZHNUb1B1bGxGcm9tUGFyZW50ID0gdm9pZCAwO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuXG5jb25zdCByZWFkQXN5bmNPcGVyYXRpb25GaWVsZHNUb1B1bGxGcm9tUGFyZW50ID0gWydmZXRjaFN0YXR1cycsICdkYXRhU3RhdHVzJywgJ2xhc3RGZXRjaFN0YXR1c1RpbWUnLCAnbGFzdERhdGFTdGF0dXNUaW1lJ107XG5leHBvcnRzLnJlYWRBc3luY09wZXJhdGlvbkZpZWxkc1RvUHVsbEZyb21QYXJlbnQgPSByZWFkQXN5bmNPcGVyYXRpb25GaWVsZHNUb1B1bGxGcm9tUGFyZW50O1xuY29uc3QgQVNZTkNfT1BFUkFUSU9OX1NURVBTID0gKDAsIF9oZWxwZXJzLm1ha2VDb25zdGFudHNPYmplY3QpKFsnQkVHSU5fQVNZTkNfT1BFUkFUSU9OJywgJ1JFU09MVkVfQVNZTkNfT1BFUkFUSU9OJywgJ1JFSkVDVF9BU1lOQ19PUEVSQVRJT04nXSk7XG5leHBvcnRzLkFTWU5DX09QRVJBVElPTl9TVEVQUyA9IEFTWU5DX09QRVJBVElPTl9TVEVQUztcbmNvbnN0IEFTWU5DX09QRVJBVElPTl9UWVBFUyA9ICgwLCBfaGVscGVycy5tYWtlQ29uc3RhbnRzT2JqZWN0KShbJ1JFQUQnLCAnV1JJVEUnXSk7XG4vKipcbiAqIEluIGdlbmVyYWwgdGhpcyBpcyB1c2VkIHRvIG5vdGUgdGhlIHN0YXR1cyBvZiB0aGUgbGFzdCBmZXRjaCBhdHRlbXB0ZWQgZm9yIGEgYmFja2VuZCBvcGVyYXRpb24uXG4gKi9cblxuZXhwb3J0cy5BU1lOQ19PUEVSQVRJT05fVFlQRVMgPSBBU1lOQ19PUEVSQVRJT05fVFlQRVM7XG5jb25zdCBGRVRDSF9TVEFUVVMgPSAoMCwgX2hlbHBlcnMubWFrZUNvbnN0YW50c09iamVjdCkoWy8vIERlZmF1bHQ6IHdlIGhhdmVuJ3QgdHJpZWQgdG8gZmV0Y2ggeWV0XG4nTlVMTCcsIC8vIEluZGljYXRlcyB0aGF0IGEgcmVxdWVzdCBpcyBpbiBmbGlnaHQuXG4nUEVORElORycsIC8vIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0IGNvbXBsZXRlZCBhbmQgYWxsIGlzIHdlbGxcbidTVUNDRVNTRlVMJywgLy8gSW5kaWNhdGVzIHRoYXQgc29tZXRoaW5nIHdlbnQgd3Jvbmc6IHRoZSByZXF1ZXN0IGRpZG4ndCBjb21wbGV0ZSwgb3IgaXQgY29tcGxldGVkIHdpdGhcbi8vIGFuIGh0dHAsIHBheWxvYWQvcGFyc2luZywgb3IgYnVzaW5lc3MgbG9naWMgZXJyb3IuXG4vLyBAVE9ETzogU2hvdWxkIHdlIGRpc3Rpbmd1aXNoIGJldHdlZW4gXCJyZXF1ZXN0IGNvbXBsZXRlZCBieSByZXN1bHQgZmFpbGVkXCIgdnNcbi8vICAgICAgICBcInJlcXVlc3QgZGlkbid0IGNvbXBsZXRlIGR1ZSB0byB0aW1lb3V0IG9yIG5ldHdvcmsgZXJyb3JcIj9cbidGQUlMRUQnXSk7XG4vKipcbiAqIEluIGdlbmVyYWwgdGhpcyBpcyB1c2VkIHRvIG5vdGUgdGhlIHByZXNlbmNlIG9mIGRhdGEgZm9yIGEgc3BlY2lmaWMgYmFja2VuZCBvcGVyYXRpb24uXG4gKi9cblxuZXhwb3J0cy5GRVRDSF9TVEFUVVMgPSBGRVRDSF9TVEFUVVM7XG5jb25zdCBEQVRBX1NUQVRVUyA9ICgwLCBfaGVscGVycy5tYWtlQ29uc3RhbnRzT2JqZWN0KShbLy8gRGVmYXVsdDogd2UgaGF2ZW4ndCByZWNlaXZlZCBhbnl0aGluZ1xuJ0FCU0VOVCcsIC8vIFJlc3VsdCB3YXMgcmVjZWl2ZWQgYW5kIHdlIGhhdmUgZGF0YVxuJ1BSRVNFTlQnXSk7XG5leHBvcnRzLkRBVEFfU1RBVFVTID0gREFUQV9TVEFUVVM7Il19