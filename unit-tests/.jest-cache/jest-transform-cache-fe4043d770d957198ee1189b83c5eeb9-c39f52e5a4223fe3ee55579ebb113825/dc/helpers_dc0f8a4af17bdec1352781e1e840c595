43fc1f80eff7a562b97816810a3fae4f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAndValidateParams = exports.generateAsyncOperationKey = exports.makeConstantsObject = void 0;

require("core-js/modules/web.dom.iterable");

var _lodash = _interopRequireDefault(require("lodash"));

var _config = _interopRequireDefault(require("./config"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// TODO: JSDocify every function
const makeConstantsObject = function makeConstantsObject() {
  let sourceValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let extraOverrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.freeze( // The keyBy create our keys-and-values object, then we manipulate it and freeze it.s
  _lodash.default.assign(_lodash.default.keyBy(sourceValues), extraOverrides));
};

exports.makeConstantsObject = makeConstantsObject;

const generateAsyncOperationKey = (descriptorId, requiredParams) => {
  const config = _config.default.getConfig();

  if (!descriptorId || !_lodash.default.isString(descriptorId)) {
    config.logger.exceptionsCallback('A descriptorId string to create the async operation key was not provided');
  }

  if (requiredParams) {
    return `${descriptorId}_${_lodash.default.values(requiredParams).join('_')}`;
  }

  return descriptorId;
};

exports.generateAsyncOperationKey = generateAsyncOperationKey;

const getAndValidateParams = (paramsToCheck, asyncOperationDescriptor) => {
  let asyncOperationParams = null;

  const _asyncOperationManger = _config.default.getConfig(),
        logger = _asyncOperationManger.logger;

  if (asyncOperationDescriptor.requiredParams) {
    asyncOperationParams = asyncOperationDescriptor.requiredParams ? _lodash.default.pick(paramsToCheck, asyncOperationDescriptor.requiredParams) : null;

    if (!_lodash.default.every(asyncOperationDescriptor.requiredParams, _lodash.default.partial(_lodash.default.has, asyncOperationParams)) || asyncOperationParams && _lodash.default.some(asyncOperationParams, paramValue => !paramValue)) {
      // This warning is here just to catch typos
      logger.exceptionsCallback(`
        It looks like ${asyncOperationDescriptor.descriptorId} is missing a param/requiredParams.
        requiredParams provided: : ${asyncOperationParams}
        requiredParams: : ${asyncOperationDescriptor.requiredParams}
      `);
    }
  }

  return asyncOperationParams;
};

exports.getAndValidateParams = getAndValidateParams;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRBbmRWYWxpZGF0ZVBhcmFtcyIsImdlbmVyYXRlQXN5bmNPcGVyYXRpb25LZXkiLCJtYWtlQ29uc3RhbnRzT2JqZWN0IiwicmVxdWlyZSIsIl9sb2Rhc2giLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbmZpZyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwic291cmNlVmFsdWVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZXh0cmFPdmVycmlkZXMiLCJmcmVlemUiLCJhc3NpZ24iLCJrZXlCeSIsImRlc2NyaXB0b3JJZCIsInJlcXVpcmVkUGFyYW1zIiwiY29uZmlnIiwiZ2V0Q29uZmlnIiwiaXNTdHJpbmciLCJsb2dnZXIiLCJleGNlcHRpb25zQ2FsbGJhY2siLCJ2YWx1ZXMiLCJqb2luIiwicGFyYW1zVG9DaGVjayIsImFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciIsImFzeW5jT3BlcmF0aW9uUGFyYW1zIiwiX2FzeW5jT3BlcmF0aW9uTWFuZ2VyIiwicGljayIsImV2ZXJ5IiwicGFydGlhbCIsImhhcyIsInNvbWUiLCJwYXJhbVZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU87QUFEb0MsQ0FBN0M7QUFHQUQsUUFBUUUsb0JBQVIsR0FBK0JGLFFBQVFHLHlCQUFSLEdBQW9DSCxRQUFRSSxtQkFBUixHQUE4QixLQUFLLENBQXRHOztBQUVBQyxRQUFRLGtDQUFSOztBQUVBLElBQUlDLFVBQVVDLHVCQUF1QkYsUUFBUSxRQUFSLENBQXZCLENBQWQ7O0FBRUEsSUFBSUcsVUFBVUQsdUJBQXVCRixRQUFRLFVBQVIsQ0FBdkIsQ0FBZDs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDO0FBQXdEOztBQUUvRjtBQUNBLE1BQU1MLHNCQUFzQixTQUFTQSxtQkFBVCxHQUErQjtBQUN6RCxNQUFJUSxlQUFlQyxVQUFVQyxNQUFWLEdBQW1CLENBQW5CLElBQXdCRCxVQUFVLENBQVYsTUFBaUJFLFNBQXpDLEdBQXFERixVQUFVLENBQVYsQ0FBckQsR0FBb0UsRUFBdkY7QUFDQSxNQUFJRyxpQkFBaUJILFVBQVVDLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JELFVBQVUsQ0FBVixNQUFpQkUsU0FBekMsR0FBcURGLFVBQVUsQ0FBVixDQUFyRCxHQUFvRSxFQUF6RjtBQUNBLFNBQU9mLE9BQU9tQixNQUFQLEVBQWU7QUFDdEJYLFVBQVFLLE9BQVIsQ0FBZ0JPLE1BQWhCLENBQXVCWixRQUFRSyxPQUFSLENBQWdCUSxLQUFoQixDQUFzQlAsWUFBdEIsQ0FBdkIsRUFBNERJLGNBQTVELENBRE8sQ0FBUDtBQUVELENBTEQ7O0FBT0FoQixRQUFRSSxtQkFBUixHQUE4QkEsbUJBQTlCOztBQUVBLE1BQU1ELDRCQUE0QixDQUFDaUIsWUFBRCxFQUFlQyxjQUFmLEtBQWtDO0FBQ2xFLFFBQU1DLFNBQVNkLFFBQVFHLE9BQVIsQ0FBZ0JZLFNBQWhCLEVBQWY7O0FBRUEsTUFBSSxDQUFDSCxZQUFELElBQWlCLENBQUNkLFFBQVFLLE9BQVIsQ0FBZ0JhLFFBQWhCLENBQXlCSixZQUF6QixDQUF0QixFQUE4RDtBQUM1REUsV0FBT0csTUFBUCxDQUFjQyxrQkFBZCxDQUFpQywwRUFBakM7QUFDRDs7QUFFRCxNQUFJTCxjQUFKLEVBQW9CO0FBQ2xCLFdBQVEsR0FBRUQsWUFBYSxJQUFHZCxRQUFRSyxPQUFSLENBQWdCZ0IsTUFBaEIsQ0FBdUJOLGNBQXZCLEVBQXVDTyxJQUF2QyxDQUE0QyxHQUE1QyxDQUFpRCxFQUEzRTtBQUNEOztBQUVELFNBQU9SLFlBQVA7QUFDRCxDQVpEOztBQWNBcEIsUUFBUUcseUJBQVIsR0FBb0NBLHlCQUFwQzs7QUFFQSxNQUFNRCx1QkFBdUIsQ0FBQzJCLGFBQUQsRUFBZ0JDLHdCQUFoQixLQUE2QztBQUN4RSxNQUFJQyx1QkFBdUIsSUFBM0I7O0FBRUEsUUFBTUMsd0JBQXdCeEIsUUFBUUcsT0FBUixDQUFnQlksU0FBaEIsRUFBOUI7QUFBQSxRQUNNRSxTQUFTTyxzQkFBc0JQLE1BRHJDOztBQUdBLE1BQUlLLHlCQUF5QlQsY0FBN0IsRUFBNkM7QUFDM0NVLDJCQUF1QkQseUJBQXlCVCxjQUF6QixHQUEwQ2YsUUFBUUssT0FBUixDQUFnQnNCLElBQWhCLENBQXFCSixhQUFyQixFQUFvQ0MseUJBQXlCVCxjQUE3RCxDQUExQyxHQUF5SCxJQUFoSjs7QUFFQSxRQUFJLENBQUNmLFFBQVFLLE9BQVIsQ0FBZ0J1QixLQUFoQixDQUFzQkoseUJBQXlCVCxjQUEvQyxFQUErRGYsUUFBUUssT0FBUixDQUFnQndCLE9BQWhCLENBQXdCN0IsUUFBUUssT0FBUixDQUFnQnlCLEdBQXhDLEVBQTZDTCxvQkFBN0MsQ0FBL0QsQ0FBRCxJQUF1SUEsd0JBQXdCekIsUUFBUUssT0FBUixDQUFnQjBCLElBQWhCLENBQXFCTixvQkFBckIsRUFBMkNPLGNBQWMsQ0FBQ0EsVUFBMUQsQ0FBbkssRUFBME87QUFDeE87QUFDQWIsYUFBT0Msa0JBQVAsQ0FBMkI7d0JBQ1RJLHlCQUF5QlYsWUFBYTtxQ0FDekJXLG9CQUFxQjs0QkFDOUJELHlCQUF5QlQsY0FBZTtPQUg5RDtBQUtEO0FBQ0Y7O0FBRUQsU0FBT1Usb0JBQVA7QUFDRCxDQXBCRDs7QUFzQkEvQixRQUFRRSxvQkFBUixHQUErQkEsb0JBQS9CIiwiZmlsZSI6ImhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0QW5kVmFsaWRhdGVQYXJhbXMgPSBleHBvcnRzLmdlbmVyYXRlQXN5bmNPcGVyYXRpb25LZXkgPSBleHBvcnRzLm1ha2VDb25zdGFudHNPYmplY3QgPSB2b2lkIDA7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiKTtcblxudmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2hcIikpO1xuXG52YXIgX2NvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29uZmlnXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVE9ETzogSlNEb2NpZnkgZXZlcnkgZnVuY3Rpb25cbmNvbnN0IG1ha2VDb25zdGFudHNPYmplY3QgPSBmdW5jdGlvbiBtYWtlQ29uc3RhbnRzT2JqZWN0KCkge1xuICBsZXQgc291cmNlVmFsdWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgbGV0IGV4dHJhT3ZlcnJpZGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoIC8vIFRoZSBrZXlCeSBjcmVhdGUgb3VyIGtleXMtYW5kLXZhbHVlcyBvYmplY3QsIHRoZW4gd2UgbWFuaXB1bGF0ZSBpdCBhbmQgZnJlZXplIGl0LnNcbiAgX2xvZGFzaC5kZWZhdWx0LmFzc2lnbihfbG9kYXNoLmRlZmF1bHQua2V5Qnkoc291cmNlVmFsdWVzKSwgZXh0cmFPdmVycmlkZXMpKTtcbn07XG5cbmV4cG9ydHMubWFrZUNvbnN0YW50c09iamVjdCA9IG1ha2VDb25zdGFudHNPYmplY3Q7XG5cbmNvbnN0IGdlbmVyYXRlQXN5bmNPcGVyYXRpb25LZXkgPSAoZGVzY3JpcHRvcklkLCByZXF1aXJlZFBhcmFtcykgPT4ge1xuICBjb25zdCBjb25maWcgPSBfY29uZmlnLmRlZmF1bHQuZ2V0Q29uZmlnKCk7XG5cbiAgaWYgKCFkZXNjcmlwdG9ySWQgfHwgIV9sb2Rhc2guZGVmYXVsdC5pc1N0cmluZyhkZXNjcmlwdG9ySWQpKSB7XG4gICAgY29uZmlnLmxvZ2dlci5leGNlcHRpb25zQ2FsbGJhY2soJ0EgZGVzY3JpcHRvcklkIHN0cmluZyB0byBjcmVhdGUgdGhlIGFzeW5jIG9wZXJhdGlvbiBrZXkgd2FzIG5vdCBwcm92aWRlZCcpO1xuICB9XG5cbiAgaWYgKHJlcXVpcmVkUGFyYW1zKSB7XG4gICAgcmV0dXJuIGAke2Rlc2NyaXB0b3JJZH1fJHtfbG9kYXNoLmRlZmF1bHQudmFsdWVzKHJlcXVpcmVkUGFyYW1zKS5qb2luKCdfJyl9YDtcbiAgfVxuXG4gIHJldHVybiBkZXNjcmlwdG9ySWQ7XG59O1xuXG5leHBvcnRzLmdlbmVyYXRlQXN5bmNPcGVyYXRpb25LZXkgPSBnZW5lcmF0ZUFzeW5jT3BlcmF0aW9uS2V5O1xuXG5jb25zdCBnZXRBbmRWYWxpZGF0ZVBhcmFtcyA9IChwYXJhbXNUb0NoZWNrLCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IpID0+IHtcbiAgbGV0IGFzeW5jT3BlcmF0aW9uUGFyYW1zID0gbnVsbDtcblxuICBjb25zdCBfYXN5bmNPcGVyYXRpb25NYW5nZXIgPSBfY29uZmlnLmRlZmF1bHQuZ2V0Q29uZmlnKCksXG4gICAgICAgIGxvZ2dlciA9IF9hc3luY09wZXJhdGlvbk1hbmdlci5sb2dnZXI7XG5cbiAgaWYgKGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvci5yZXF1aXJlZFBhcmFtcykge1xuICAgIGFzeW5jT3BlcmF0aW9uUGFyYW1zID0gYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yLnJlcXVpcmVkUGFyYW1zID8gX2xvZGFzaC5kZWZhdWx0LnBpY2socGFyYW1zVG9DaGVjaywgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yLnJlcXVpcmVkUGFyYW1zKSA6IG51bGw7XG5cbiAgICBpZiAoIV9sb2Rhc2guZGVmYXVsdC5ldmVyeShhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IucmVxdWlyZWRQYXJhbXMsIF9sb2Rhc2guZGVmYXVsdC5wYXJ0aWFsKF9sb2Rhc2guZGVmYXVsdC5oYXMsIGFzeW5jT3BlcmF0aW9uUGFyYW1zKSkgfHwgYXN5bmNPcGVyYXRpb25QYXJhbXMgJiYgX2xvZGFzaC5kZWZhdWx0LnNvbWUoYXN5bmNPcGVyYXRpb25QYXJhbXMsIHBhcmFtVmFsdWUgPT4gIXBhcmFtVmFsdWUpKSB7XG4gICAgICAvLyBUaGlzIHdhcm5pbmcgaXMgaGVyZSBqdXN0IHRvIGNhdGNoIHR5cG9zXG4gICAgICBsb2dnZXIuZXhjZXB0aW9uc0NhbGxiYWNrKGBcbiAgICAgICAgSXQgbG9va3MgbGlrZSAke2FzeW5jT3BlcmF0aW9uRGVzY3JpcHRvci5kZXNjcmlwdG9ySWR9IGlzIG1pc3NpbmcgYSBwYXJhbS9yZXF1aXJlZFBhcmFtcy5cbiAgICAgICAgcmVxdWlyZWRQYXJhbXMgcHJvdmlkZWQ6IDogJHthc3luY09wZXJhdGlvblBhcmFtc31cbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IDogJHthc3luY09wZXJhdGlvbkRlc2NyaXB0b3IucmVxdWlyZWRQYXJhbXN9XG4gICAgICBgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXN5bmNPcGVyYXRpb25QYXJhbXM7XG59O1xuXG5leHBvcnRzLmdldEFuZFZhbGlkYXRlUGFyYW1zID0gZ2V0QW5kVmFsaWRhdGVQYXJhbXM7Il19