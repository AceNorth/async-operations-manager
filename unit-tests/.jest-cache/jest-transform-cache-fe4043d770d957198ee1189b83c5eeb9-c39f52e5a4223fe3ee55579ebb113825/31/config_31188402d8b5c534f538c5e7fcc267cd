55c67ac6959abf53e80161a96c7a4221
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultLoggerOptions = require("./defaultLoggerOptions");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var initialConfig = {
  logger: _defaultLoggerOptions.defaultLoggerOptions
};

var asyncOperationManagerConfig = function () {
  var config;

  var getConfig = function getConfig() {
    if (!config) {
      config = initialConfig;
    }

    return config;
  };

  var setConfig = function setConfig(newConfig) {
    config = _objectSpread({}, config, newConfig);
    return config;
  };

  return {
    setConfig: setConfig,
    getConfig: getConfig
  };
}();

var _default = asyncOperationManagerConfig;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmYXVsdExvZ2dlck9wdGlvbnMiLCJyZXF1aXJlIiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNvbmNhdCIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpbml0aWFsQ29uZmlnIiwibG9nZ2VyIiwiZGVmYXVsdExvZ2dlck9wdGlvbnMiLCJhc3luY09wZXJhdGlvbk1hbmFnZXJDb25maWciLCJjb25maWciLCJnZXRDb25maWciLCJzZXRDb25maWciLCJuZXdDb25maWciLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxxQkFBcUIsR0FBR0MsT0FBTyxDQUFDLHdCQUFELENBQW5DOztBQUVBLFNBQVNDLGFBQVQsQ0FBdUJDLE1BQXZCLEVBQStCO0FBQUUsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTlCLEVBQXNDRixDQUFDLEVBQXZDLEVBQTJDO0FBQUUsUUFBSUcsTUFBTSxHQUFHRixTQUFTLENBQUNELENBQUQsQ0FBVCxJQUFnQixJQUFoQixHQUF1QkMsU0FBUyxDQUFDRCxDQUFELENBQWhDLEdBQXNDLEVBQW5EO0FBQXVELFFBQUlJLE9BQU8sR0FBR2IsTUFBTSxDQUFDYyxJQUFQLENBQVlGLE1BQVosQ0FBZDs7QUFBbUMsUUFBSSxPQUFPWixNQUFNLENBQUNlLHFCQUFkLEtBQXdDLFVBQTVDLEVBQXdEO0FBQUVGLE1BQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDRyxNQUFSLENBQWVoQixNQUFNLENBQUNlLHFCQUFQLENBQTZCSCxNQUE3QixFQUFxQ0ssTUFBckMsQ0FBNEMsVUFBVUMsR0FBVixFQUFlO0FBQUUsZUFBT2xCLE1BQU0sQ0FBQ21CLHdCQUFQLENBQWdDUCxNQUFoQyxFQUF3Q00sR0FBeEMsRUFBNkNFLFVBQXBEO0FBQWlFLE9BQTlILENBQWYsQ0FBVjtBQUE0Sjs7QUFBQ1AsSUFBQUEsT0FBTyxDQUFDUSxPQUFSLENBQWdCLFVBQVVDLEdBQVYsRUFBZTtBQUFFQyxNQUFBQSxlQUFlLENBQUNmLE1BQUQsRUFBU2MsR0FBVCxFQUFjVixNQUFNLENBQUNVLEdBQUQsQ0FBcEIsQ0FBZjtBQUE0QyxLQUE3RTtBQUFpRjs7QUFBQyxTQUFPZCxNQUFQO0FBQWdCOztBQUVqZSxTQUFTZSxlQUFULENBQXlCQyxHQUF6QixFQUE4QkYsR0FBOUIsRUFBbUNuQixLQUFuQyxFQUEwQztBQUFFLE1BQUltQixHQUFHLElBQUlFLEdBQVgsRUFBZ0I7QUFBRXhCLElBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQnVCLEdBQXRCLEVBQTJCRixHQUEzQixFQUFnQztBQUFFbkIsTUFBQUEsS0FBSyxFQUFFQSxLQUFUO0FBQWdCaUIsTUFBQUEsVUFBVSxFQUFFLElBQTVCO0FBQWtDSyxNQUFBQSxZQUFZLEVBQUUsSUFBaEQ7QUFBc0RDLE1BQUFBLFFBQVEsRUFBRTtBQUFoRSxLQUFoQztBQUEwRyxHQUE1SCxNQUFrSTtBQUFFRixJQUFBQSxHQUFHLENBQUNGLEdBQUQsQ0FBSCxHQUFXbkIsS0FBWDtBQUFtQjs7QUFBQyxTQUFPcUIsR0FBUDtBQUFhOztBQUVqTixJQUFJRyxhQUFhLEdBQUc7QUFDbEJDLEVBQUFBLE1BQU0sRUFBRXZCLHFCQUFxQixDQUFDd0I7QUFEWixDQUFwQjs7QUFJQSxJQUFJQywyQkFBMkIsR0FBRyxZQUFZO0FBQzVDLE1BQUlDLE1BQUo7O0FBRUEsTUFBSUMsU0FBUyxHQUFHLFNBQVNBLFNBQVQsR0FBcUI7QUFDbkMsUUFBSSxDQUFDRCxNQUFMLEVBQWE7QUFDWEEsTUFBQUEsTUFBTSxHQUFHSixhQUFUO0FBQ0Q7O0FBRUQsV0FBT0ksTUFBUDtBQUNELEdBTkQ7O0FBUUEsTUFBSUUsU0FBUyxHQUFHLFNBQVNBLFNBQVQsQ0FBbUJDLFNBQW5CLEVBQThCO0FBQzVDSCxJQUFBQSxNQUFNLEdBQUd4QixhQUFhLENBQUMsRUFBRCxFQUFLd0IsTUFBTCxFQUFhRyxTQUFiLENBQXRCO0FBQ0EsV0FBT0gsTUFBUDtBQUNELEdBSEQ7O0FBS0EsU0FBTztBQUNMRSxJQUFBQSxTQUFTLEVBQUVBLFNBRE47QUFFTEQsSUFBQUEsU0FBUyxFQUFFQTtBQUZOLEdBQVA7QUFJRCxDQXBCaUMsRUFBbEM7O0FBc0JBLElBQUlHLFFBQVEsR0FBR0wsMkJBQWY7QUFDQTVCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQitCLFFBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZGVmYXVsdExvZ2dlck9wdGlvbnMgPSByZXF1aXJlKFwiLi9kZWZhdWx0TG9nZ2VyT3B0aW9uc1wiKTtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgaW5pdGlhbENvbmZpZyA9IHtcbiAgbG9nZ2VyOiBfZGVmYXVsdExvZ2dlck9wdGlvbnMuZGVmYXVsdExvZ2dlck9wdGlvbnNcbn07XG5cbnZhciBhc3luY09wZXJhdGlvbk1hbmFnZXJDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjb25maWc7XG5cbiAgdmFyIGdldENvbmZpZyA9IGZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgICBpZiAoIWNvbmZpZykge1xuICAgICAgY29uZmlnID0gaW5pdGlhbENvbmZpZztcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnO1xuICB9O1xuXG4gIHZhciBzZXRDb25maWcgPSBmdW5jdGlvbiBzZXRDb25maWcobmV3Q29uZmlnKSB7XG4gICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgY29uZmlnLCBuZXdDb25maWcpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRDb25maWc6IHNldENvbmZpZyxcbiAgICBnZXRDb25maWc6IGdldENvbmZpZ1xuICB9O1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBhc3luY09wZXJhdGlvbk1hbmFnZXJDb25maWc7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXX0=