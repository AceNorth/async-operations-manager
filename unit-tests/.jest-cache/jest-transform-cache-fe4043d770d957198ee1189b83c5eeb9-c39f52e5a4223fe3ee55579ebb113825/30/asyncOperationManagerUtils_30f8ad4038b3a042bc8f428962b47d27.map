{"version":3,"sources":["asyncOperationManagerUtils.js"],"names":["Object","defineProperty","exports","value","getAsyncOperationInfo","getStateForOperationAfterStep","getAsyncOperationDescriptor","registerAsyncOperationDescriptors","getAsyncOperation","clearRegisteredAsyncDescriptors","getRegisteredAsyncDescriptors","_lodash","require","_asyncOperationStateUtils","_interopRequireDefault","_config","_asyncOperationDescriptorRegistry","_asyncOperationUtils","_helpers","_constants","obj","__esModule","default","asyncOperationDescriptorRegistry","getAsyncOperationDescriptors","clearAsyncOperationDescriptors","descriptorId","asyncOperationDescriptors","params","asyncOperationDescriptor","asyncOperationParams","getAndValidateParams","asyncOperationKey","generateAsyncOperationKey","otherFields","omit","requiredParams","newAsyncOperationDescriptors","existingAsyncOperationDescriptors","config","getConfig","_len","arguments","length","otherDescriptors","Array","_key","isEmpty","logger","exceptionsCallback","Error","isArray","reduce","acc","updateAsyncOperationDescriptor","setAsyncOperationDescriptors","state","_getAsyncOperationInf","registeredAsyncOperationDescriptors","readStepLookup","ASYNC_OPERATION_STEPS","BEGIN_ASYNC_OPERATION","asyncOperation","beginReadAsyncOperation","RESOLVE_ASYNC_OPERATION","resolveReadAsyncOperation","REJECT_ASYNC_OPERATION","rejectReadAsyncOperation","writeStepLookup","beginWriteAsyncOperation","resolveWriteAsyncOperation","rejectWriteAsyncOperation","transformTypeLookup","ASYNC_OPERATION_TYPES","READ","asyncOperationStep","WRITE","newState","_getAsyncOperationInf2","asyncOperationToTranform","newAsyncOperation","operationType","updateAsyncOperation"],"mappings":"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","file":"asyncOperationManagerUtils.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAsyncOperationInfo = exports.getStateForOperationAfterStep = exports.getAsyncOperationDescriptor = exports.registerAsyncOperationDescriptors = exports.getAsyncOperation = exports.clearRegisteredAsyncDescriptors = exports.getRegisteredAsyncDescriptors = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _asyncOperationStateUtils = _interopRequireDefault(require(\"./asyncOperationStateUtils\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _asyncOperationDescriptorRegistry = require(\"./asyncOperationDescriptorRegistry\");\n\nvar _asyncOperationUtils = require(\"./asyncOperationUtils\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: JSDocify every function\n// \n// This file contains the 'switchboard' logic to coordinate the various\n// lower-level functions that update state. These functions are exposed\n// to the consumer of the library.\n//\nconst getRegisteredAsyncDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.getAsyncOperationDescriptors;\nexports.getRegisteredAsyncDescriptors = getRegisteredAsyncDescriptors;\nconst clearRegisteredAsyncDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.clearAsyncOperationDescriptors;\nexports.clearRegisteredAsyncDescriptors = clearRegisteredAsyncDescriptors;\n\nconst getAsyncOperationDescriptor = descriptorId => {\n  const asyncOperationDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.getAsyncOperationDescriptors();\n\n  return _asyncOperationStateUtils.default.getAsyncOperationDescriptor(asyncOperationDescriptors, descriptorId);\n};\n\nexports.getAsyncOperationDescriptor = getAsyncOperationDescriptor;\n\nconst getAsyncOperationInfo = (descriptorId, params) => {\n  const asyncOperationDescriptor = getAsyncOperationDescriptor(descriptorId);\n  const asyncOperationParams = (0, _helpers.getAndValidateParams)(params, asyncOperationDescriptor);\n  const asyncOperationKey = (0, _helpers.generateAsyncOperationKey)(descriptorId, asyncOperationParams);\n  const otherFields = (0, _lodash.omit)(params, [...asyncOperationDescriptor.requiredParams]);\n  return {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    asyncOperationKey,\n    otherFields\n  };\n};\n\nexports.getAsyncOperationInfo = getAsyncOperationInfo;\n\nconst registerAsyncOperationDescriptors = function registerAsyncOperationDescriptors(asyncOperationDescriptors) {\n  let newAsyncOperationDescriptors;\n\n  const existingAsyncOperationDescriptors = _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.getAsyncOperationDescriptors();\n\n  const config = _config.default.getConfig();\n\n  for (var _len = arguments.length, otherDescriptors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    otherDescriptors[_key - 1] = arguments[_key];\n  }\n\n  if (!(0, _lodash.isEmpty)(otherDescriptors)) {\n    config.logger.exceptionsCallback(`\n      You provided more than one argument to registerAsyncOperationDescriptors.\n      You likely forgot to put multiple descriptors within an array`, new Error());\n  } // handle array or single object arguments\n\n\n  if ((0, _lodash.isArray)(asyncOperationDescriptors)) {\n    newAsyncOperationDescriptors = (0, _lodash.reduce)(asyncOperationDescriptors, (acc, asyncOperationDescriptor) => {\n      return _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(acc, asyncOperationDescriptor);\n    }, existingAsyncOperationDescriptors);\n  } else {\n    newAsyncOperationDescriptors = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(existingAsyncOperationDescriptors, asyncOperationDescriptors);\n  }\n\n  _asyncOperationDescriptorRegistry.asyncOperationDescriptorRegistry.setAsyncOperationDescriptors(newAsyncOperationDescriptors);\n\n  return newAsyncOperationDescriptors;\n}; // TODO: heavy unit testing needed!\n\n\nexports.registerAsyncOperationDescriptors = registerAsyncOperationDescriptors;\n\nconst getAsyncOperation = (state, descriptorId, params, otherFields) => {\n  const _getAsyncOperationInf = getAsyncOperationInfo(descriptorId, params),\n        asyncOperationDescriptor = _getAsyncOperationInf.asyncOperationDescriptor,\n        asyncOperationParams = _getAsyncOperationInf.asyncOperationParams,\n        asyncOperationKey = _getAsyncOperationInf.asyncOperationKey;\n\n  const registeredAsyncOperationDescriptors = getRegisteredAsyncDescriptors();\n  return _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, asyncOperationKey, asyncOperationDescriptor, asyncOperationParams, otherFields);\n}; // switchboard for resolving the Read operation steps\n\n\nexports.getAsyncOperation = getAsyncOperation;\nconst readStepLookup = {\n  [_constants.ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION]: (asyncOperation, asyncOperationParams, otherFields) => (0, _asyncOperationUtils.beginReadAsyncOperation)(asyncOperation, asyncOperationParams, otherFields),\n  [_constants.ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION]: (asyncOperation, asyncOperationParams, otherFields) => (0, _asyncOperationUtils.resolveReadAsyncOperation)(asyncOperation, asyncOperationParams, otherFields),\n  [_constants.ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION]: (asyncOperation, asyncOperationParams, otherFields) => (0, _asyncOperationUtils.rejectReadAsyncOperation)(asyncOperation, asyncOperationParams, otherFields)\n}; // switchboard for resolving Write operation steps\n\nconst writeStepLookup = {\n  [_constants.ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION]: (asyncOperation, asyncOperationParams, otherFields) => (0, _asyncOperationUtils.beginWriteAsyncOperation)(asyncOperation, asyncOperationParams, otherFields),\n  [_constants.ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION]: (asyncOperation, asyncOperationParams, otherFields) => (0, _asyncOperationUtils.resolveWriteAsyncOperation)(asyncOperation, asyncOperationParams, otherFields),\n  [_constants.ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION]: (asyncOperation, asyncOperationParams, otherFields) => (0, _asyncOperationUtils.rejectWriteAsyncOperation)(asyncOperation, asyncOperationParams, otherFields)\n}; // first switchboard to transform an async operation\n\nconst transformTypeLookup = {\n  [_constants.ASYNC_OPERATION_TYPES.READ]: (asyncOperation, asyncOperationStep, asyncOperationParams, otherFields) => readStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams, otherFields),\n  [_constants.ASYNC_OPERATION_TYPES.WRITE]: (asyncOperation, asyncOperationStep, asyncOperationParams, otherFields) => writeStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams, otherFields)\n}; // this function is called in the reducer (in redux integration)\n\nconst getStateForOperationAfterStep = (state, asyncOperationStep, descriptorId, params) => {\n  let newState = state;\n\n  const _getAsyncOperationInf2 = getAsyncOperationInfo(descriptorId, params),\n        asyncOperationDescriptor = _getAsyncOperationInf2.asyncOperationDescriptor,\n        asyncOperationParams = _getAsyncOperationInf2.asyncOperationParams,\n        asyncOperationKey = _getAsyncOperationInf2.asyncOperationKey,\n        otherFields = _getAsyncOperationInf2.otherFields;\n\n  const asyncOperationToTranform = getAsyncOperation(state, descriptorId, asyncOperationParams, otherFields);\n  const newAsyncOperation = transformTypeLookup[asyncOperationDescriptor.operationType](asyncOperationToTranform, asyncOperationStep, asyncOperationParams, otherFields);\n  newState = _asyncOperationStateUtils.default.updateAsyncOperation(state, asyncOperationKey, newAsyncOperation, asyncOperationDescriptor);\n  return newState;\n};\n\nexports.getStateForOperationAfterStep = getStateForOperationAfterStep;"]}