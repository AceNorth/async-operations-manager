36ff4bdeb25d37f04270a98540859568
"use strict";

var _chai = require("chai");

var _sinon = _interopRequireDefault(require("sinon"));

var _asyncOperationStateUtils = _interopRequireDefault(require("../asyncOperationStateUtils"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

describe('asyncOperationStateUtils', function () {
  describe('updateAsyncOperationDescriptor', function () {
    var stub;
    var registeredAsyncOperationDescriptors;
    beforeEach(function () {
      registeredAsyncOperationDescriptors = {};
      stub = _sinon.default.stub(console, 'error');
    });
    afterEach(function () {
      stub.restore();
    });
    it('should update state with an asyncOperationDescriptor', function () {
      var asyncOperationDescriptor = {
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE',
        // optional values
        debug: false,
        alwaysImmutable: false,
        minCacheTime: 5000,
        maxCacheTime: 60000
      };

      var newState = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);

      (0, _chai.expect)(newState).to.matchSnapshot('state with well formed asyncOperationDescriptor');
    });
    it('should update state with an asyncOperationDescriptor and default optional values', function () {
      var asyncOperationDescriptor = {
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE'
      };

      var asyncOperationDescriptors = _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);

      (0, _chai.expect)(asyncOperationDescriptors.UPDATE_PERSON_DATA).to.deep.include({
        parentOperationDescriptorId: null,
        debug: false,
        alwaysImmutable: false,
        minCacheTime: 5000,
        maxCacheTime: 60000
      });
    });
    it('should throw an error if required descriptorId prop is not passed', function () {
      var asyncOperationDescriptor = {
        requiredParams: ['personId'],
        operationType: 'WRITE',
        // optional values
        debug: false,
        alwaysImmutable: false,
        minCacheTime: 5000,
        maxCacheTime: 60000
      };

      _asyncOperationStateUtils.default.updateAsyncOperationDescriptor(registeredAsyncOperationDescriptors, asyncOperationDescriptor);

      (0, _chai.expect)(stub.callCount).to.equal(1);
    });
  });
  describe('updateAsyncOperation', function () {
    var state;
    beforeEach(function () {
      state = {};
    });
    it('should update state with an asyncOperation', function () {
      var newAsyncOperation = {
        descriptorId: 'UPDATE_PERSON_DATA',
        fetchStatus: 'SUCCESSFUL',
        message: null,
        lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
        lastDataStatusTime: '2018-10-01T19:12:53.189Z',
        personId: 111
      };
      var asyncOperationDescriptor = {
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE'
      };

      var newState = _asyncOperationStateUtils.default.updateAsyncOperation(state, 'UPDATE_PERSON_DATA_111', newAsyncOperation, asyncOperationDescriptor);

      (0, _chai.expect)(newState).to.have.all.keys('UPDATE_PERSON_DATA_111');
      (0, _chai.expect)(newState).to.matchSnapshot('state with well formed asyncOperation');
    });
  });
  describe('bulkUpdateAsyncOperations', function () {
    var state;
    beforeEach(function () {
      state = {};
    });
    it('should update state with multiple async operations', function () {
      var asyncOperationUpdates = [{
        asyncOperation: {
          descriptorId: 'UPDATE_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:53.189Z',
          personId: 111
        },
        asyncOperationKey: 'UPDATE_PERSON_DATA_111',
        asyncOperationDescriptor: {
          descriptorId: 'UPDATE_PERSON_DATA',
          requiredParams: ['personId'],
          operationType: 'WRITE'
        }
      }, {
        asyncOperation: {
          descriptorId: 'UPDATE_TEAM_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:26.189Z',
          lastDataStatusTime: '2018-10-01T19:12:27.189Z',
          teamId: 2
        },
        asyncOperationKey: 'UPDATE_TEAM_DATA_2',
        asyncOperationDescriptor: {
          descriptorId: 'UPDATE_TEAM_DATA',
          requiredParams: ['teamId'],
          operationType: 'WRITE'
        }
      }];

      var newState = _asyncOperationStateUtils.default.bulkUpdateAsyncOperations(state, asyncOperationUpdates);

      (0, _chai.expect)(newState).to.have.all.keys('UPDATE_PERSON_DATA_111', 'UPDATE_TEAM_DATA_2');
      (0, _chai.expect)(newState).to.matchSnapshot('state with multiple asyncOperations');
    });
  });
  describe('getAsyncOperation', function () {
    var state;
    beforeEach(function () {
      state = {};
    });
    it('should return an initial read asyncOperation', function () {
      var asyncOperationDescriptor = _defineProperty({
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ'
      }, "descriptorId", 'FETCH_PERSON_DATA');

      var asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.deep.include({
        fetchStatus: 'NULL',
        dataStatus: 'ABSENT',
        lastFetchStatusTime: 0,
        lastDataStatusTime: 0
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');
    });
    it('should return an initial write asyncOperation', function () {
      var asyncOperationDescriptor = _defineProperty({
        descriptorId: 'UPDATE_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'WRITE'
      }, "descriptorId", 'UPDATE_PERSON_DATA');

      var asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'UPDATE_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.deep.include({
        fetchStatus: 'NULL',
        lastFetchStatusTime: 0
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');
    });
    it('should return a pending asyncOperation', function () {
      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'PENDING',
          dataStatus: 'ABSENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:13.189Z',
          personId: 111
        }
      };

      var asyncOperationDescriptor = _defineProperty({
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ'
      }, "descriptorId", 'FETCH_PERSON_DATA');

      var asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed pending asyncOperation');
    });
    it('should return a successful asyncOperation', function () {
      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:53.189Z',
          personId: 111
        }
      };

      var asyncOperationDescriptor = _defineProperty({
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ'
      }, "descriptorId", 'FETCH_PERSON_DATA');

      var asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, {}, 'FETCH_PERSON_DATA_111', asyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation');
    });
    it('should return a successful asyncOperation with parentAsyncOperation metaData', function () {
      var _fetchPersonDataAsync;

      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:12:46.189Z',
          lastDataStatusTime: '2018-10-01T19:12:53.189Z',
          personId: 111
        },
        FETCH_ALL_PERSON_DATA: {
          descriptorId: 'FETCH_ALL_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:13:52.189Z',
          lastDataStatusTime: '2018-10-01T19:13:56.189Z'
        }
      };
      var registeredAsyncOperationDescriptors = {
        FETCH_ALL_PERSON_DATA: _defineProperty({
          descriptorId: 'FETCH_ALL_PERSON_DATA',
          operationType: 'READ'
        }, "descriptorId", 'FETCH_ALL_PERSON_DATA')
      };
      var fetchPersonDataAsyncOperationDescriptor = (_fetchPersonDataAsync = {
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['personId'],
        operationType: 'READ'
      }, _defineProperty(_fetchPersonDataAsync, "descriptorId", 'FETCH_PERSON_DATA'), _defineProperty(_fetchPersonDataAsync, "parentOperationDescriptorId", 'FETCH_ALL_PERSON_DATA'), _fetchPersonDataAsync);

      var asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, 'FETCH_PERSON_DATA_111', fetchPersonDataAsyncOperationDescriptor, {
        personId: 111
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.deep.include({
        lastFetchStatusTime: '2018-10-01T19:13:52.189Z',
        lastDataStatusTime: '2018-10-01T19:13:56.189Z'
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData');
    });
    it('should return a successful asyncOperation with parentAsyncOperation metaData two levels deep', function () {
      var _FETCH_ALL_PERSON_DAT2, _fetchPersonDataAsync2;

      state = {
        FETCH_PERSON_DATA_111: {
          descriptorId: 'FETCH_PERSON_DATA',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-09-01T19:12:46.189Z',
          lastDataStatusTime: '2018-09-01T19:12:53.189Z',
          personId: 111
        },
        FETCH_ALL_PERSON_DATA_FOR_ORG_22: {
          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-09-21T19:13:52.189Z',
          lastDataStatusTime: '2018-09-21T19:13:56.189Z',
          orgId: 22
        },
        FETCH_ALL_DATA_FOR_ORG_22: {
          descriptorId: 'FETCH_ALL_DATA_FOR_ORG',
          fetchStatus: 'SUCCESSFUL',
          dataStatus: 'PRESENT',
          message: null,
          lastFetchStatusTime: '2018-10-01T19:16:52.189Z',
          lastDataStatusTime: '2018-10-01T19:23:56.189Z',
          orgId: 22
        }
      };
      var registeredAsyncOperationDescriptors = {
        FETCH_ALL_PERSON_DATA_FOR_ORG: (_FETCH_ALL_PERSON_DAT2 = {
          descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',
          requiredParams: ['orgId'],
          operationType: 'READ'
        }, _defineProperty(_FETCH_ALL_PERSON_DAT2, "descriptorId", 'FETCH_ALL_PERSON_DATA_FOR_ORG'), _defineProperty(_FETCH_ALL_PERSON_DAT2, "parentOperationDescriptorId", 'FETCH_ALL_DATA_FOR_ORG'), _FETCH_ALL_PERSON_DAT2),
        FETCH_ALL_DATA_FOR_ORG: _defineProperty({
          descriptorId: 'FETCH_ALL_DATA_FOR_ORG',
          requiredParams: ['orgId'],
          operationType: 'READ'
        }, "descriptorId", 'FETCH_ALL_DATA_FOR_ORG')
      };
      var fetchPersonDataAsyncOperationDescriptor = (_fetchPersonDataAsync2 = {
        descriptorId: 'FETCH_PERSON_DATA',
        requiredParams: ['orgId', 'personId']
      }, _defineProperty(_fetchPersonDataAsync2, "descriptorId", 'FETCH_PERSON_DATA'), _defineProperty(_fetchPersonDataAsync2, "operationType", 'READ'), _defineProperty(_fetchPersonDataAsync2, "parentOperationDescriptorId", 'FETCH_ALL_PERSON_DATA_FOR_ORG'), _fetchPersonDataAsync2);

      var asyncOperation = _asyncOperationStateUtils.default.getAsyncOperation(state, registeredAsyncOperationDescriptors, 'fetchPersonData_111', fetchPersonDataAsyncOperationDescriptor, {
        personId: 111,
        orgId: 22
      });

      (0, _chai.expect)(asyncOperation).to.be.an('object');
      (0, _chai.expect)(asyncOperation).to.deep.include({
        lastFetchStatusTime: '2018-10-01T19:16:52.189Z',
        lastDataStatusTime: '2018-10-01T19:23:56.189Z'
      });
      (0, _chai.expect)(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData two levels deep');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jT3BlcmF0aW9uU3RhdGVVdGlsc190ZXN0LmpzIl0sIm5hbWVzIjpbIl9jaGFpIiwicmVxdWlyZSIsIl9zaW5vbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVzY3JpYmUiLCJzdHViIiwicmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMiLCJiZWZvcmVFYWNoIiwiY29uc29sZSIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJpdCIsImFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciIsImRlc2NyaXB0b3JJZCIsInJlcXVpcmVkUGFyYW1zIiwib3BlcmF0aW9uVHlwZSIsImRlYnVnIiwiYWx3YXlzSW1tdXRhYmxlIiwibWluQ2FjaGVUaW1lIiwibWF4Q2FjaGVUaW1lIiwibmV3U3RhdGUiLCJ1cGRhdGVBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IiLCJleHBlY3QiLCJ0byIsIm1hdGNoU25hcHNob3QiLCJhc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzIiwiVVBEQVRFX1BFUlNPTl9EQVRBIiwiZGVlcCIsImluY2x1ZGUiLCJwYXJlbnRPcGVyYXRpb25EZXNjcmlwdG9ySWQiLCJjYWxsQ291bnQiLCJlcXVhbCIsInN0YXRlIiwibmV3QXN5bmNPcGVyYXRpb24iLCJmZXRjaFN0YXR1cyIsIm1lc3NhZ2UiLCJsYXN0RmV0Y2hTdGF0dXNUaW1lIiwibGFzdERhdGFTdGF0dXNUaW1lIiwicGVyc29uSWQiLCJ1cGRhdGVBc3luY09wZXJhdGlvbiIsImhhdmUiLCJhbGwiLCJrZXlzIiwiYXN5bmNPcGVyYXRpb25VcGRhdGVzIiwiYXN5bmNPcGVyYXRpb24iLCJkYXRhU3RhdHVzIiwiYXN5bmNPcGVyYXRpb25LZXkiLCJ0ZWFtSWQiLCJidWxrVXBkYXRlQXN5bmNPcGVyYXRpb25zIiwiZ2V0QXN5bmNPcGVyYXRpb24iLCJGRVRDSF9QRVJTT05fREFUQV8xMTEiLCJiZSIsImFuIiwiX2ZldGNoUGVyc29uRGF0YUFzeW5jIiwiRkVUQ0hfQUxMX1BFUlNPTl9EQVRBIiwiZmV0Y2hQZXJzb25EYXRhQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yIiwiX0ZFVENIX0FMTF9QRVJTT05fREFUMiIsIl9mZXRjaFBlcnNvbkRhdGFBc3luYzIiLCJGRVRDSF9BTExfUEVSU09OX0RBVEFfRk9SX09SR18yMiIsIm9yZ0lkIiwiRkVUQ0hfQUxMX0RBVEFfRk9SX09SR18yMiIsIkZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHIiwiRkVUQ0hfQUxMX0RBVEFfRk9SX09SRyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFuQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLENBQUMsT0FBRCxDQUFSLENBQW5DOztBQUVBLElBQUlHLHlCQUF5QixHQUFHRCxzQkFBc0IsQ0FBQ0YsT0FBTyxDQUFDLDZCQUFELENBQVIsQ0FBdEQ7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUVFLElBQUFBLE9BQU8sRUFBRUY7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsU0FBU0csZUFBVCxDQUF5QkgsR0FBekIsRUFBOEJJLEdBQTlCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUFFLE1BQUlELEdBQUcsSUFBSUosR0FBWCxFQUFnQjtBQUFFTSxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JQLEdBQXRCLEVBQTJCSSxHQUEzQixFQUFnQztBQUFFQyxNQUFBQSxLQUFLLEVBQUVBLEtBQVQ7QUFBZ0JHLE1B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QyxDQUEwQ0MsT0FBMUMsQ0FBa0Q7QUFDaERRLFFBQUFBLG1CQUFtQixFQUFFLDBCQUQyQjtBQUVoREMsUUFBQUEsa0JBQWtCLEVBQUU7QUFGNEIsT0FBbEQ7QUFJQSxPQUFDLEdBQUdqRCxLQUFLLENBQUNrQyxNQUFWLEVBQWtCc0IsY0FBbEIsRUFBa0NyQixFQUFsQyxDQUFxQ0MsYUFBckMsQ0FBbUQsMEZBQW5EO0FBQ0QsS0E1REMsQ0FBRjtBQTZERCxHQXZNTyxDQUFSO0FBd01ELENBNVVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9jaGFpID0gcmVxdWlyZShcImNoYWlcIik7XG5cbnZhciBfc2lub24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJzaW5vblwiKSk7XG5cbnZhciBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZGVzY3JpYmUoJ2FzeW5jT3BlcmF0aW9uU3RhdGVVdGlscycsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoJ3VwZGF0ZUFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R1YjtcbiAgICB2YXIgcmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnM7XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZWdpc3RlcmVkQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IHt9O1xuICAgICAgc3R1YiA9IF9zaW5vbi5kZWZhdWx0LnN0dWIoY29uc29sZSwgJ2Vycm9yJyk7XG4gICAgfSk7XG4gICAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0dWIucmVzdG9yZSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdXBkYXRlIHN0YXRlIHdpdGggYW4gYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1dSSVRFJyxcbiAgICAgICAgLy8gb3B0aW9uYWwgdmFsdWVzXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgYWx3YXlzSW1tdXRhYmxlOiBmYWxzZSxcbiAgICAgICAgbWluQ2FjaGVUaW1lOiA1MDAwLFxuICAgICAgICBtYXhDYWNoZVRpbWU6IDYwMDAwXG4gICAgICB9O1xuXG4gICAgICB2YXIgbmV3U3RhdGUgPSBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzLmRlZmF1bHQudXBkYXRlQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yKHJlZ2lzdGVyZWRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzLCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IpO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShuZXdTdGF0ZSkudG8ubWF0Y2hTbmFwc2hvdCgnc3RhdGUgd2l0aCB3ZWxsIGZvcm1lZCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3InKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSBzdGF0ZSB3aXRoIGFuIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciBhbmQgZGVmYXVsdCBvcHRpb25hbCB2YWx1ZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yID0ge1xuICAgICAgICBkZXNjcmlwdG9ySWQ6ICdVUERBVEVfUEVSU09OX0RBVEEnLFxuICAgICAgICByZXF1aXJlZFBhcmFtczogWydwZXJzb25JZCddLFxuICAgICAgICBvcGVyYXRpb25UeXBlOiAnV1JJVEUnXG4gICAgICB9O1xuXG4gICAgICB2YXIgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC51cGRhdGVBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IocmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcik7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMuVVBEQVRFX1BFUlNPTl9EQVRBKS50by5kZWVwLmluY2x1ZGUoe1xuICAgICAgICBwYXJlbnRPcGVyYXRpb25EZXNjcmlwdG9ySWQ6IG51bGwsXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgYWx3YXlzSW1tdXRhYmxlOiBmYWxzZSxcbiAgICAgICAgbWluQ2FjaGVUaW1lOiA1MDAwLFxuICAgICAgICBtYXhDYWNoZVRpbWU6IDYwMDAwXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHJlcXVpcmVkIGRlc2NyaXB0b3JJZCBwcm9wIGlzIG5vdCBwYXNzZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yID0ge1xuICAgICAgICByZXF1aXJlZFBhcmFtczogWydwZXJzb25JZCddLFxuICAgICAgICBvcGVyYXRpb25UeXBlOiAnV1JJVEUnLFxuICAgICAgICAvLyBvcHRpb25hbCB2YWx1ZXNcbiAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICBhbHdheXNJbW11dGFibGU6IGZhbHNlLFxuICAgICAgICBtaW5DYWNoZVRpbWU6IDUwMDAsXG4gICAgICAgIG1heENhY2hlVGltZTogNjAwMDBcbiAgICAgIH07XG5cbiAgICAgIF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC51cGRhdGVBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IocmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcik7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKHN0dWIuY2FsbENvdW50KS50by5lcXVhbCgxKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCd1cGRhdGVBc3luY09wZXJhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdXBkYXRlIHN0YXRlIHdpdGggYW4gYXN5bmNPcGVyYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmV3QXN5bmNPcGVyYXRpb24gPSB7XG4gICAgICAgIGRlc2NyaXB0b3JJZDogJ1VQREFURV9QRVJTT05fREFUQScsXG4gICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgIGxhc3RGZXRjaFN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEyOjQ2LjE4OVonLFxuICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEyOjUzLjE4OVonLFxuICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICB9O1xuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1dSSVRFJ1xuICAgICAgfTtcblxuICAgICAgdmFyIG5ld1N0YXRlID0gX2FzeW5jT3BlcmF0aW9uU3RhdGVVdGlscy5kZWZhdWx0LnVwZGF0ZUFzeW5jT3BlcmF0aW9uKHN0YXRlLCAnVVBEQVRFX1BFUlNPTl9EQVRBXzExMScsIG5ld0FzeW5jT3BlcmF0aW9uLCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IpO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShuZXdTdGF0ZSkudG8uaGF2ZS5hbGwua2V5cygnVVBEQVRFX1BFUlNPTl9EQVRBXzExMScpO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkobmV3U3RhdGUpLnRvLm1hdGNoU25hcHNob3QoJ3N0YXRlIHdpdGggd2VsbCBmb3JtZWQgYXN5bmNPcGVyYXRpb24nKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdidWxrVXBkYXRlQXN5bmNPcGVyYXRpb25zJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgc3RhdGUgd2l0aCBtdWx0aXBsZSBhc3luYyBvcGVyYXRpb25zJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uVXBkYXRlcyA9IFt7XG4gICAgICAgIGFzeW5jT3BlcmF0aW9uOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgICBmZXRjaFN0YXR1czogJ1NVQ0NFU1NGVUwnLFxuICAgICAgICAgIGRhdGFTdGF0dXM6ICdQUkVTRU5UJyxcbiAgICAgICAgICBtZXNzYWdlOiBudWxsLFxuICAgICAgICAgIGxhc3RGZXRjaFN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEyOjQ2LjE4OVonLFxuICAgICAgICAgIGxhc3REYXRhU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTI6NTMuMTg5WicsXG4gICAgICAgICAgcGVyc29uSWQ6IDExMVxuICAgICAgICB9LFxuICAgICAgICBhc3luY09wZXJhdGlvbktleTogJ1VQREFURV9QRVJTT05fREFUQV8xMTEnLFxuICAgICAgICBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3I6IHtcbiAgICAgICAgICBkZXNjcmlwdG9ySWQ6ICdVUERBVEVfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ3BlcnNvbklkJ10sXG4gICAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1dSSVRFJ1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGFzeW5jT3BlcmF0aW9uOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnVVBEQVRFX1RFQU1fREFUQScsXG4gICAgICAgICAgZmV0Y2hTdGF0dXM6ICdTVUNDRVNTRlVMJyxcbiAgICAgICAgICBkYXRhU3RhdHVzOiAnUFJFU0VOVCcsXG4gICAgICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjoyNi4xODlaJyxcbiAgICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEyOjI3LjE4OVonLFxuICAgICAgICAgIHRlYW1JZDogMlxuICAgICAgICB9LFxuICAgICAgICBhc3luY09wZXJhdGlvbktleTogJ1VQREFURV9URUFNX0RBVEFfMicsXG4gICAgICAgIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcjoge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ1VQREFURV9URUFNX0RBVEEnLFxuICAgICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ3RlYW1JZCddLFxuICAgICAgICAgIG9wZXJhdGlvblR5cGU6ICdXUklURSdcbiAgICAgICAgfVxuICAgICAgfV07XG5cbiAgICAgIHZhciBuZXdTdGF0ZSA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC5idWxrVXBkYXRlQXN5bmNPcGVyYXRpb25zKHN0YXRlLCBhc3luY09wZXJhdGlvblVwZGF0ZXMpO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShuZXdTdGF0ZSkudG8uaGF2ZS5hbGwua2V5cygnVVBEQVRFX1BFUlNPTl9EQVRBXzExMScsICdVUERBVEVfVEVBTV9EQVRBXzInKTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKG5ld1N0YXRlKS50by5tYXRjaFNuYXBzaG90KCdzdGF0ZSB3aXRoIG11bHRpcGxlIGFzeW5jT3BlcmF0aW9ucycpO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2dldEFzeW5jT3BlcmF0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gaW5pdGlhbCByZWFkIGFzeW5jT3BlcmF0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1JFQUQnXG4gICAgICB9LCBcImRlc2NyaXB0b3JJZFwiLCAnRkVUQ0hfUEVSU09OX0RBVEEnKTtcblxuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uID0gX2FzeW5jT3BlcmF0aW9uU3RhdGVVdGlscy5kZWZhdWx0LmdldEFzeW5jT3BlcmF0aW9uKHN0YXRlLCB7fSwgJ0ZFVENIX1BFUlNPTl9EQVRBXzExMScsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciwge1xuICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICB9KTtcblxuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLmRlZXAuaW5jbHVkZSh7XG4gICAgICAgIGZldGNoU3RhdHVzOiAnTlVMTCcsXG4gICAgICAgIGRhdGFTdGF0dXM6ICdBQlNFTlQnLFxuICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAwLFxuICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6IDBcbiAgICAgIH0pO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLm1hdGNoU25hcHNob3QoJ3dlbGwgZm9ybWVkIGluaXRpYWwgYXN5bmNPcGVyYXRpb24nKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBpbml0aWFsIHdyaXRlIGFzeW5jT3BlcmF0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIGRlc2NyaXB0b3JJZDogJ1VQREFURV9QRVJTT05fREFUQScsXG4gICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ3BlcnNvbklkJ10sXG4gICAgICAgIG9wZXJhdGlvblR5cGU6ICdXUklURSdcbiAgICAgIH0sIFwiZGVzY3JpcHRvcklkXCIsICdVUERBVEVfUEVSU09OX0RBVEEnKTtcblxuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uID0gX2FzeW5jT3BlcmF0aW9uU3RhdGVVdGlscy5kZWZhdWx0LmdldEFzeW5jT3BlcmF0aW9uKHN0YXRlLCB7fSwgJ1VQREFURV9QRVJTT05fREFUQV8xMTEnLCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IsIHtcbiAgICAgICAgcGVyc29uSWQ6IDExMVxuICAgICAgfSk7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5kZWVwLmluY2x1ZGUoe1xuICAgICAgICBmZXRjaFN0YXR1czogJ05VTEwnLFxuICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAwXG4gICAgICB9KTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5tYXRjaFNuYXBzaG90KCd3ZWxsIGZvcm1lZCBpbml0aWFsIGFzeW5jT3BlcmF0aW9uJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBwZW5kaW5nIGFzeW5jT3BlcmF0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgc3RhdGUgPSB7XG4gICAgICAgIEZFVENIX1BFUlNPTl9EQVRBXzExMToge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgICBmZXRjaFN0YXR1czogJ1BFTkRJTkcnLFxuICAgICAgICAgIGRhdGFTdGF0dXM6ICdBQlNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTI6NDYuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjoxMy4xODlaJyxcbiAgICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IgPSBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9QRVJTT05fREFUQScsXG4gICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ3BlcnNvbklkJ10sXG4gICAgICAgIG9wZXJhdGlvblR5cGU6ICdSRUFEJ1xuICAgICAgfSwgXCJkZXNjcmlwdG9ySWRcIiwgJ0ZFVENIX1BFUlNPTl9EQVRBJyk7XG5cbiAgICAgIHZhciBhc3luY09wZXJhdGlvbiA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC5nZXRBc3luY09wZXJhdGlvbihzdGF0ZSwge30sICdGRVRDSF9QRVJTT05fREFUQV8xMTEnLCBhc3luY09wZXJhdGlvbkRlc2NyaXB0b3IsIHtcbiAgICAgICAgcGVyc29uSWQ6IDExMVxuICAgICAgfSk7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShhc3luY09wZXJhdGlvbikudG8ubWF0Y2hTbmFwc2hvdCgnd2VsbCBmb3JtZWQgcGVuZGluZyBhc3luY09wZXJhdGlvbicpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgc3VjY2Vzc2Z1bCBhc3luY09wZXJhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0YXRlID0ge1xuICAgICAgICBGRVRDSF9QRVJTT05fREFUQV8xMTE6IHtcbiAgICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9QRVJTT05fREFUQScsXG4gICAgICAgICAgZmV0Y2hTdGF0dXM6ICdTVUNDRVNTRlVMJyxcbiAgICAgICAgICBkYXRhU3RhdHVzOiAnUFJFU0VOVCcsXG4gICAgICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo0Ni4xODlaJyxcbiAgICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEyOjUzLjE4OVonLFxuICAgICAgICAgIHBlcnNvbklkOiAxMTFcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX1BFUlNPTl9EQVRBJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXM6IFsncGVyc29uSWQnXSxcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogJ1JFQUQnXG4gICAgICB9LCBcImRlc2NyaXB0b3JJZFwiLCAnRkVUQ0hfUEVSU09OX0RBVEEnKTtcblxuICAgICAgdmFyIGFzeW5jT3BlcmF0aW9uID0gX2FzeW5jT3BlcmF0aW9uU3RhdGVVdGlscy5kZWZhdWx0LmdldEFzeW5jT3BlcmF0aW9uKHN0YXRlLCB7fSwgJ0ZFVENIX1BFUlNPTl9EQVRBXzExMScsIGFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciwge1xuICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICB9KTtcblxuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5tYXRjaFNuYXBzaG90KCd3ZWxsIGZvcm1lZCBzdWNjZXNzZnVsIGFzeW5jT3BlcmF0aW9uJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBzdWNjZXNzZnVsIGFzeW5jT3BlcmF0aW9uIHdpdGggcGFyZW50QXN5bmNPcGVyYXRpb24gbWV0YURhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2ZldGNoUGVyc29uRGF0YUFzeW5jO1xuXG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgRkVUQ0hfUEVSU09OX0RBVEFfMTExOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTI6NDYuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMjo1My4xODlaJyxcbiAgICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICAgIH0sXG4gICAgICAgIEZFVENIX0FMTF9QRVJTT05fREFUQToge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9QRVJTT05fREFUQScsXG4gICAgICAgICAgZmV0Y2hTdGF0dXM6ICdTVUNDRVNTRlVMJyxcbiAgICAgICAgICBkYXRhU3RhdHVzOiAnUFJFU0VOVCcsXG4gICAgICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgICAgICBsYXN0RmV0Y2hTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToxMzo1Mi4xODlaJyxcbiAgICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjEzOjU2LjE4OVonXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgcmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIEZFVENIX0FMTF9QRVJTT05fREFUQTogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9BTExfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIG9wZXJhdGlvblR5cGU6ICdSRUFEJ1xuICAgICAgICB9LCBcImRlc2NyaXB0b3JJZFwiLCAnRkVUQ0hfQUxMX1BFUlNPTl9EQVRBJylcbiAgICAgIH07XG4gICAgICB2YXIgZmV0Y2hQZXJzb25EYXRhQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9yID0gKF9mZXRjaFBlcnNvbkRhdGFBc3luYyA9IHtcbiAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICByZXF1aXJlZFBhcmFtczogWydwZXJzb25JZCddLFxuICAgICAgICBvcGVyYXRpb25UeXBlOiAnUkVBRCdcbiAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfZmV0Y2hQZXJzb25EYXRhQXN5bmMsIFwiZGVzY3JpcHRvcklkXCIsICdGRVRDSF9QRVJTT05fREFUQScpLCBfZGVmaW5lUHJvcGVydHkoX2ZldGNoUGVyc29uRGF0YUFzeW5jLCBcInBhcmVudE9wZXJhdGlvbkRlc2NyaXB0b3JJZFwiLCAnRkVUQ0hfQUxMX1BFUlNPTl9EQVRBJyksIF9mZXRjaFBlcnNvbkRhdGFBc3luYyk7XG5cbiAgICAgIHZhciBhc3luY09wZXJhdGlvbiA9IF9hc3luY09wZXJhdGlvblN0YXRlVXRpbHMuZGVmYXVsdC5nZXRBc3luY09wZXJhdGlvbihzdGF0ZSwgcmVnaXN0ZXJlZEFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvcnMsICdGRVRDSF9QRVJTT05fREFUQV8xMTEnLCBmZXRjaFBlcnNvbkRhdGFBc3luY09wZXJhdGlvbkRlc2NyaXB0b3IsIHtcbiAgICAgICAgcGVyc29uSWQ6IDExMVxuICAgICAgfSk7XG5cbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShhc3luY09wZXJhdGlvbikudG8uZGVlcC5pbmNsdWRlKHtcbiAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTM6NTIuMTg5WicsXG4gICAgICAgIGxhc3REYXRhU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTM6NTYuMTg5WidcbiAgICAgIH0pO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLm1hdGNoU25hcHNob3QoJ3dlbGwgZm9ybWVkIHN1Y2Nlc3NmdWwgYXN5bmNPcGVyYXRpb24gd2l0aCBwYXJlbnRBc3luY09wZXJhdGlvbiBtZXRhRGF0YScpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgc3VjY2Vzc2Z1bCBhc3luY09wZXJhdGlvbiB3aXRoIHBhcmVudEFzeW5jT3BlcmF0aW9uIG1ldGFEYXRhIHR3byBsZXZlbHMgZGVlcCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfRkVUQ0hfQUxMX1BFUlNPTl9EQVQyLCBfZmV0Y2hQZXJzb25EYXRhQXN5bmMyO1xuXG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgRkVUQ0hfUEVSU09OX0RBVEFfMTExOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfUEVSU09OX0RBVEEnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMDktMDFUMTk6MTI6NDYuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0wOS0wMVQxOToxMjo1My4xODlaJyxcbiAgICAgICAgICBwZXJzb25JZDogMTExXG4gICAgICAgIH0sXG4gICAgICAgIEZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHXzIyOiB7XG4gICAgICAgICAgZGVzY3JpcHRvcklkOiAnRkVUQ0hfQUxMX1BFUlNPTl9EQVRBX0ZPUl9PUkcnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMDktMjFUMTk6MTM6NTIuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0wOS0yMVQxOToxMzo1Ni4xODlaJyxcbiAgICAgICAgICBvcmdJZDogMjJcbiAgICAgICAgfSxcbiAgICAgICAgRkVUQ0hfQUxMX0RBVEFfRk9SX09SR18yMjoge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9EQVRBX0ZPUl9PUkcnLFxuICAgICAgICAgIGZldGNoU3RhdHVzOiAnU1VDQ0VTU0ZVTCcsXG4gICAgICAgICAgZGF0YVN0YXR1czogJ1BSRVNFTlQnLFxuICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgbGFzdEZldGNoU3RhdHVzVGltZTogJzIwMTgtMTAtMDFUMTk6MTY6NTIuMTg5WicsXG4gICAgICAgICAgbGFzdERhdGFTdGF0dXNUaW1lOiAnMjAxOC0xMC0wMVQxOToyMzo1Ni4xODlaJyxcbiAgICAgICAgICBvcmdJZDogMjJcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciByZWdpc3RlcmVkQXN5bmNPcGVyYXRpb25EZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgRkVUQ0hfQUxMX1BFUlNPTl9EQVRBX0ZPUl9PUkc6IChfRkVUQ0hfQUxMX1BFUlNPTl9EQVQyID0ge1xuICAgICAgICAgIGRlc2NyaXB0b3JJZDogJ0ZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHJyxcbiAgICAgICAgICByZXF1aXJlZFBhcmFtczogWydvcmdJZCddLFxuICAgICAgICAgIG9wZXJhdGlvblR5cGU6ICdSRUFEJ1xuICAgICAgICB9LCBfZGVmaW5lUHJvcGVydHkoX0ZFVENIX0FMTF9QRVJTT05fREFUMiwgXCJkZXNjcmlwdG9ySWRcIiwgJ0ZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHJyksIF9kZWZpbmVQcm9wZXJ0eShfRkVUQ0hfQUxMX1BFUlNPTl9EQVQyLCBcInBhcmVudE9wZXJhdGlvbkRlc2NyaXB0b3JJZFwiLCAnRkVUQ0hfQUxMX0RBVEFfRk9SX09SRycpLCBfRkVUQ0hfQUxMX1BFUlNPTl9EQVQyKSxcbiAgICAgICAgRkVUQ0hfQUxMX0RBVEFfRk9SX09SRzogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9BTExfREFUQV9GT1JfT1JHJyxcbiAgICAgICAgICByZXF1aXJlZFBhcmFtczogWydvcmdJZCddLFxuICAgICAgICAgIG9wZXJhdGlvblR5cGU6ICdSRUFEJ1xuICAgICAgICB9LCBcImRlc2NyaXB0b3JJZFwiLCAnRkVUQ0hfQUxMX0RBVEFfRk9SX09SRycpXG4gICAgICB9O1xuICAgICAgdmFyIGZldGNoUGVyc29uRGF0YUFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciA9IChfZmV0Y2hQZXJzb25EYXRhQXN5bmMyID0ge1xuICAgICAgICBkZXNjcmlwdG9ySWQ6ICdGRVRDSF9QRVJTT05fREFUQScsXG4gICAgICAgIHJlcXVpcmVkUGFyYW1zOiBbJ29yZ0lkJywgJ3BlcnNvbklkJ11cbiAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfZmV0Y2hQZXJzb25EYXRhQXN5bmMyLCBcImRlc2NyaXB0b3JJZFwiLCAnRkVUQ0hfUEVSU09OX0RBVEEnKSwgX2RlZmluZVByb3BlcnR5KF9mZXRjaFBlcnNvbkRhdGFBc3luYzIsIFwib3BlcmF0aW9uVHlwZVwiLCAnUkVBRCcpLCBfZGVmaW5lUHJvcGVydHkoX2ZldGNoUGVyc29uRGF0YUFzeW5jMiwgXCJwYXJlbnRPcGVyYXRpb25EZXNjcmlwdG9ySWRcIiwgJ0ZFVENIX0FMTF9QRVJTT05fREFUQV9GT1JfT1JHJyksIF9mZXRjaFBlcnNvbkRhdGFBc3luYzIpO1xuXG4gICAgICB2YXIgYXN5bmNPcGVyYXRpb24gPSBfYXN5bmNPcGVyYXRpb25TdGF0ZVV0aWxzLmRlZmF1bHQuZ2V0QXN5bmNPcGVyYXRpb24oc3RhdGUsIHJlZ2lzdGVyZWRBc3luY09wZXJhdGlvbkRlc2NyaXB0b3JzLCAnZmV0Y2hQZXJzb25EYXRhXzExMScsIGZldGNoUGVyc29uRGF0YUFzeW5jT3BlcmF0aW9uRGVzY3JpcHRvciwge1xuICAgICAgICBwZXJzb25JZDogMTExLFxuICAgICAgICBvcmdJZDogMjJcbiAgICAgIH0pO1xuXG4gICAgICAoMCwgX2NoYWkuZXhwZWN0KShhc3luY09wZXJhdGlvbikudG8uYmUuYW4oJ29iamVjdCcpO1xuICAgICAgKDAsIF9jaGFpLmV4cGVjdCkoYXN5bmNPcGVyYXRpb24pLnRvLmRlZXAuaW5jbHVkZSh7XG4gICAgICAgIGxhc3RGZXRjaFN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjE2OjUyLjE4OVonLFxuICAgICAgICBsYXN0RGF0YVN0YXR1c1RpbWU6ICcyMDE4LTEwLTAxVDE5OjIzOjU2LjE4OVonXG4gICAgICB9KTtcbiAgICAgICgwLCBfY2hhaS5leHBlY3QpKGFzeW5jT3BlcmF0aW9uKS50by5tYXRjaFNuYXBzaG90KCd3ZWxsIGZvcm1lZCBzdWNjZXNzZnVsIGFzeW5jT3BlcmF0aW9uIHdpdGggcGFyZW50QXN5bmNPcGVyYXRpb24gbWV0YURhdGEgdHdvIGxldmVscyBkZWVwJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il19