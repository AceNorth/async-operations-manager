{"version":3,"sources":["../../../src/reduxIntegration/__tests__/functional_tests.js"],"names":["describe","state","beforeEach","dateNowStub","jest","fn","global","Date","now","initialAction","beginAction","descriptorId","requiredParams","operationType","personId","it","resolveAction","to","deep","equal","FETCH_PERSON_DATA_111","fetchStatus","FETCH_STATUS","PENDING","dataStatus","DATA_STATUS","ABSENT","message","lastFetchStatusTime","lastDataStatusTime","SUCCESSFUL","PRESENT","lastFetchFailed","rejectAction","FAILED"],"mappings":"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","sourcesContent":["/* eslint-env jest */\nimport { expect } from 'chai';\n\nimport asyncOperationReducer from '../asyncOperationReducer';\n\nimport { FETCH_STATUS, DATA_STATUS } from '../../constants';\n\nimport {\n  createAsyncOperationInitialAction,\n  createAsyncOperationBeginAction,\n  createAsyncOperationResolveAction,\n  createAsyncOperationRejectAction,\n} from '../asyncOperationReduxUtils';\n\nimport {\n  clearAsyncOperationsManagerState,\n  registerAsyncOperationDescriptors,\n} from '../../asyncOperationManagerUtils';\n\ndescribe('scenario tests', () => {\n  let state;\n\n  beforeEach(() => {\n    clearAsyncOperationsManagerState();\n    const dateNowStub = jest.fn(() => 1530518207007);\n    global.Date.now = dateNowStub;\n  });\n\n  describe('READ operation scenarios', () => {\n    let initialAction;\n    let beginAction;\n    beforeEach(() => {\n      state = {};\n      clearAsyncOperationsManagerState();\n      registerAsyncOperationDescriptors({\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n      });\n  \n      initialAction = createAsyncOperationInitialAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n      beginAction = createAsyncOperationBeginAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n    });\n\n    it('should update a successful READ operation as expected from start to finish', () => {\n      const resolveAction = createAsyncOperationResolveAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n\n      expect(asyncOperationReducer(state, initialAction)).to.deep.equal(state);\n      expect(asyncOperationReducer(state, beginAction)).to.deep.equal({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.PENDING,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n        },\n      });\n      expect(asyncOperationReducer(state, resolveAction)).to.deep.equal({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.SUCCESSFUL,\n          dataStatus: DATA_STATUS.PRESENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 1530518207007,\n          personId: 111,\n          lastFetchFailed: false,\n        },\n      });\n    });\n\n    it('should update a failed READ operation as expected from start to finish', () => {\n      const rejectAction = createAsyncOperationRejectAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n\n      expect(asyncOperationReducer(state, initialAction)).to.deep.equal(state);\n      expect(asyncOperationReducer(state, beginAction)).to.deep.equal({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.PENDING,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n        },\n      });\n      expect(asyncOperationReducer(state, rejectAction)).to.deep.equal({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.FAILED,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n          lastFetchFailed: true,\n        },\n      });\n    });\n  });\n\n  describe('WRITE operation scenarios', () => {\n    beforeEach(() => {\n      state = {};\n      clearAsyncOperationsManagerState();\n    });\n  });\n});\n"],"file":"functional_tests.js"}