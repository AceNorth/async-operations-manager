{"version":3,"sources":["../src/asyncOperationStateUtils.js"],"names":["updateAsyncOperationDescriptor","state","descriptorOptions","asyncOperationDescriptor","debug","parentOperationDescriptorId","invalidatingOperationsDescriptorIds","alwaysImmutable","minCacheTime","maxCacheTime","requiredParams","PropTypes","checkPropTypes","asyncOperationDescriptorPropType","descriptors","descriptorId","getAsyncOperation","asyncOperationKey","asyncOperationParams","fieldsToAdd","operations","parentAsyncOperation","asyncOperation","config","asyncOperationManagerConfig","getConfig","fieldsToAddToAction","logger","verboseLoggingCallback","infoLoggingCallback","parentAsyncOperationDescriptor","parentAsyncOperationKey","operationType","ASYNC_OPERATION_TYPES","READ","invalidateOperation","invalidatingAsyncOperationDescriptor","invalidatingAsyncOperationKey","invalidatingOperation","lastDataStatusTime","valueOf","lastFetchStatusTime","readAsyncOperationFieldsToPullFromParent","updateAsyncOperation","asyncOperationPropType","bulkUpdateAsyncOperations","asyncOperationsList","accumulator"],"mappings":"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","sourcesContent":["\n// TODO: JSDocify every function\nimport { pick, forEach, reduce } from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport asyncOperationManagerConfig from './config';\n\nimport {\n  ASYNC_OPERATION_TYPES,\n  readAsyncOperationFieldsToPullFromParent,\n} from './constants';\n\nimport {\n  getAsyncOperationInfo,\n} from './helpers';\n\nimport {\n  asyncOperationDescriptorPropType,\n  asyncOperationPropType,\n} from './types';\n\nimport {\n  initialReadAsyncOperationForAction,\n  initialWriteAsyncOperationForAction,\n} from './asyncOperationUtils';\n\n// // //\n// // // These are all pure functions that return new or existing state or\n// // // pieces of new or existing state from their inputs.\n// // //\n\nconst updateAsyncOperationDescriptor = (state, descriptorOptions) => {\n  const asyncOperationDescriptor = {\n    debug: false,\n    parentOperationDescriptorId: null,\n    invalidatingOperationsDescriptorIds: null,\n    alwaysImmutable: false,\n    minCacheTime: 5000,\n    maxCacheTime: 60000,\n    requiredParams: {},\n    ...descriptorOptions,\n  };\n\n  PropTypes.checkPropTypes(asyncOperationDescriptorPropType, asyncOperationDescriptor, 'prop', 'asyncOperationDescriptor');\n  \n  return {\n    ...state,\n    descriptors: {\n      ...state.descriptors,\n      [asyncOperationDescriptor.descriptorId]: asyncOperationDescriptor,\n    },\n  };\n};\n\n// This function will do all the work to determine if an async operation is returned as an initial async operation\n// (if it is not found in state), an asyncOperation with parentAsyncOperation metaData (recursively searched to find if the parentAsyncOperation is more\n// up-to-date) or just the asyncOperation itself if the none of the above apply.\nconst getAsyncOperation = (state, asyncOperationKey, asyncOperationDescriptor, asyncOperationParams, fieldsToAdd) => {\n  const { operations, descriptors } = state;\n\n  let parentAsyncOperation;\n  const asyncOperation = operations[asyncOperationKey] || null;\n\n  const config = asyncOperationManagerConfig.getConfig();\n  const fieldsToAddToAction = {\n    ...asyncOperationParams,\n    ...fieldsToAdd,\n    // key for the descriptor of the asyncOperation\n    descriptorId: asyncOperationDescriptor.descriptorId,\n  };\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside getAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('getAsyncOperation [Data Snapshot]:', {\n      state,\n      asyncOperationParams,\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey,\n    });\n  }\n\n  if (asyncOperationDescriptor.parentOperationDescriptorId) {\n    // grab key, descriptor, params, and async operation for parentAsyncOperation\n    const {\n      asyncOperationDescriptor: parentAsyncOperationDescriptor,\n      asyncOperationKey: parentAsyncOperationKey,\n    } = getAsyncOperationInfo(descriptors, asyncOperationDescriptor.parentOperationDescriptorId, asyncOperationParams);\n\n    if (parentAsyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ) {\n      parentAsyncOperation = getAsyncOperation(state, parentAsyncOperationKey, parentAsyncOperationDescriptor, asyncOperationParams, fieldsToAddToAction);\n    }\n  }\n\n  if (!asyncOperation) {\n    if (asyncOperationDescriptor.debug) {\n      config.logger.verboseLoggingCallback(`asyncOperation not found with given key: ${asyncOperationKey}. Defaulting to an initial asyncOperation`);\n    }\n    return asyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ\n      ? initialReadAsyncOperationForAction(asyncOperationDescriptor.descriptorId, fieldsToAddToAction, parentAsyncOperation)\n      : initialWriteAsyncOperationForAction(asyncOperationDescriptor.descriptorId, fieldsToAddToAction, parentAsyncOperation);\n  }\n\n  if (asyncOperationDescriptor.invalidatingOperationsDescriptorIds) {\n    // we want to detect whether to invalidate the async operation if an async operation has been found\n    let invalidateOperation = false;\n\n    forEach(asyncOperationDescriptor.invalidatingOperationsDescriptorIds, (descriptorId) => {\n      // hanlde if an asyncOperation invalidates itself\n      if (descriptorId === asyncOperationDescriptor.descriptorId) {\n        invalidateOperation = true;\n        return false;\n      }\n\n      const {\n        asyncOperationDescriptor: invalidatingAsyncOperationDescriptor,\n        asyncOperationKey: invalidatingAsyncOperationKey,\n      } = getAsyncOperationInfo(descriptors, descriptorId, asyncOperationParams);\n      const invalidatingOperation = getAsyncOperation(state, invalidatingAsyncOperationKey, invalidatingAsyncOperationDescriptor, asyncOperationParams, fieldsToAddToAction);\n\n      // Handle invalidating operations with write or read operations.\n      invalidateOperation = invalidatingAsyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ ?\n        invalidatingOperation.lastDataStatusTime.valueOf() >= asyncOperation.lastDataStatusTime.valueOf() :\n        invalidatingOperation.lastFetchStatusTime.valueOf() >= asyncOperation.lastFetchStatusTime.valueOf();\n\n      if (invalidateOperation) {\n        return false;\n      }\n      return true;\n    });\n\n    if (invalidateOperation) {\n      return initialReadAsyncOperationForAction(asyncOperationDescriptor.descriptorId, fieldsToAddToAction);\n    }\n  }\n\n  // We want to determine whether or not to use that parentAsyncOperation metaData based on the\n  // newness of it's data in comparison to the asyncOperation\n  if (parentAsyncOperation) {\n    return parentAsyncOperation.lastDataStatusTime.valueOf() >= asyncOperation.lastDataStatusTime.valueOf()\n      ? {\n        ...asyncOperation,\n        // use parent async operation metaData (lastDataStatusTime, lastFetchStatusTime. etc...)\n        ...pick(parentAsyncOperation, readAsyncOperationFieldsToPullFromParent),\n      }\n      : asyncOperation;\n  }\n\n  return asyncOperation;\n};\n\nconst updateAsyncOperation = (state, asyncOperationKey, asyncOperation, asyncOperationDescriptor) => {\n  const config = asyncOperationManagerConfig.getConfig();\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside updateAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('updateAsyncOperation [Data Snapshot]:', {\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey,\n    });\n  }\n\n  PropTypes.checkPropTypes(asyncOperationPropType, asyncOperation, 'prop', 'asyncOperation');\n\n  return {\n    operations: {\n      ...state.operations,\n      [asyncOperationKey]: asyncOperation,\n    },\n  };\n};\n\nconst bulkUpdateAsyncOperations = (state, asyncOperationsList) => {\n  return reduce(asyncOperationsList, (accumulator, { asyncOperationKey, asyncOperation, asyncOperationDescriptor }) => {\n    return updateAsyncOperation(accumulator, asyncOperationKey, asyncOperation, asyncOperationDescriptor);\n  }, state);\n};\n\nexport default {\n  updateAsyncOperationDescriptor,\n\n  updateAsyncOperation,\n  bulkUpdateAsyncOperations,\n\n  getAsyncOperation,\n};\n"],"file":"asyncOperationStateUtils.js"}